; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\os_mon.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\os_mon.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -I..\..\Malloc -I..\..\User\Modbus -Id:\Keil_v4\ARM\RV31\INC -Id:\Keil_v4\ARM\CMSIS\Include -Id:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Flash\Obj\os_mon.crf ..\..\uCOS-III\uCOS-III\Source\os_mon.c]
                          THUMB

                          AREA ||i.OSMonCreate||, CODE, READONLY, ALIGN=2

                  OSMonCreate PROC
;;;73     
;;;74     void  OSMonCreate (OS_MON   *p_mon,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;75                        CPU_CHAR *p_name,
;;;76                        void     *p_mon_data,
;;;77                        OS_ERR   *p_err)
;;;78     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;79         CPU_SR_ALLOC();
00000c  f04f0800          MOV      r8,#0
;;;80     
;;;81     
;;;82     #ifdef OS_SAFETY_CRITICAL
;;;83         if (p_err == DEF_NULL) {
;;;84             OS_SAFETY_CRITICAL_EXCEPTION();
;;;85             return;
;;;86         }
;;;87     #endif
;;;88     
;;;89     #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;90         if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;91            *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
;;;92             return;
;;;93         }
;;;94     #endif
;;;95     
;;;96     #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;97         if (OSIntNestingCtr > 0u) {                                 /* Not allowed to be called from an ISR                 */
000010  4817              LDR      r0,|L1.112|
000012  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000014  b120              CBZ      r0,|L1.32|
;;;98            *p_err = OS_ERR_CREATE_ISR;
000016  f64260e1          MOV      r0,#0x2ee1
00001a  8030              STRH     r0,[r6,#0]
                  |L1.28|
;;;99             return;
;;;100        }
;;;101    #endif
;;;102    
;;;103    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;104        if (p_mon == DEF_NULL) {                                    /* Validate 'p_mon'                                     */
;;;105           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;106            return;
;;;107        }
;;;108    #endif
;;;109    
;;;110        CPU_CRITICAL_ENTER();
;;;111    #if (OS_OBJ_TYPE_REQ == DEF_ENABLED)
;;;112        p_mon->Type    = OS_OBJ_TYPE_MON;                           /* Mark the data structure as a monitor                 */
;;;113    #endif
;;;114    
;;;115    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;116        p_mon->NamePtr = p_name;                                    /* Save the name of the monitor                         */
;;;117    #else
;;;118        (void)&p_name;
;;;119    #endif
;;;120    
;;;121        OS_PendListInit(&p_mon->PendList);
;;;122    
;;;123    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;124        OS_MonDbgListAdd(p_mon);
;;;125        OSMonQty++;
;;;126    #endif
;;;127    
;;;128        if (p_mon_data != DEF_NULL) {
;;;129            p_mon->MonDataPtr = p_mon_data;
;;;130        }
;;;131    
;;;132        CPU_CRITICAL_EXIT();
;;;133    
;;;134       *p_err = OS_ERR_NONE;
;;;135    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.32|
000020  bf00              NOP                            ;110
000022  bf00              NOP                            ;110
000024  f7fffffe          BL       CPU_SR_Save
000028  4680              MOV      r8,r0                 ;110
00002a  bf00              NOP                            ;110
00002c  f7fffffe          BL       CPU_IntDisMeasStart
000030  bf00              NOP                            ;110
000032  4810              LDR      r0,|L1.116|
000034  6020              STR      r0,[r4,#0]            ;112
000036  6067              STR      r7,[r4,#4]            ;116
000038  f1040008          ADD      r0,r4,#8              ;121
00003c  f7fffffe          BL       OS_PendListInit
000040  4620              MOV      r0,r4                 ;124
000042  f7fffffe          BL       OS_MonDbgListAdd
000046  480c              LDR      r0,|L1.120|
000048  8800              LDRH     r0,[r0,#0]            ;125  ; OSMonQty
00004a  1c40              ADDS     r0,r0,#1              ;125
00004c  490a              LDR      r1,|L1.120|
00004e  8008              STRH     r0,[r1,#0]            ;125
000050  b105              CBZ      r5,|L1.84|
000052  6225              STR      r5,[r4,#0x20]         ;129
                  |L1.84|
000054  bf00              NOP                            ;132
000056  f7fffffe          BL       CPU_IntDisMeasStop
00005a  bf00              NOP                            ;132
00005c  4640              MOV      r0,r8                 ;132
00005e  f7fffffe          BL       CPU_SR_Restore
000062  bf00              NOP                            ;132
000064  bf00              NOP                            ;132
000066  2000              MOVS     r0,#0                 ;134
000068  8030              STRH     r0,[r6,#0]            ;134
00006a  bf00              NOP      
00006c  e7d6              B        |L1.28|
;;;136    
                          ENDP

00006e  0000              DCW      0x0000
                  |L1.112|
                          DCD      OSIntNestingCtr
                  |L1.116|
                          DCD      0x204e4f4d
                  |L1.120|
                          DCD      OSMonQty

                          AREA ||i.OSMonOp||, CODE, READONLY, ALIGN=2

                  OSMonOp PROC
;;;308    
;;;309    void  OSMonOp (OS_MON               *p_mon,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;310                   OS_TICK               timeout,
;;;311                   void                 *p_arg,
;;;312                   OS_MON_ON_ENTER_PTR   p_on_enter,
;;;313                   OS_MON_ON_EVAL_PTR    p_on_eval,
;;;314                   OS_OPT                opt,
;;;315                   OS_ERR               *p_err)
;;;316    {
000004  b091              SUB      sp,sp,#0x44
000006  4607              MOV      r7,r0
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  f8dda078          LDR      r10,[sp,#0x78]
000010  9c20              LDR      r4,[sp,#0x80]
;;;317        CPU_INT32U        op_res;
;;;318        CPU_INT32U        mon_res;
;;;319        OS_PEND_LIST     *p_pend_list;
;;;320        OS_PEND_DATA     *p_pend_data;
;;;321        OS_PEND_DATA     *p_pend_data_next;
;;;322        OS_PEND_DATA      pend_data;
;;;323        OS_MON_DATA       mon_data;
;;;324        OS_MON_DATA      *p_data;
;;;325        void             *p_eval_data;
;;;326        CPU_BOOLEAN       sched;
;;;327        CPU_SR_ALLOC();
000012  2000              MOVS     r0,#0
000014  9001              STR      r0,[sp,#4]
;;;328    
;;;329    
;;;330    #ifdef OS_SAFETY_CRITICAL
;;;331        if (p_err == DEF_NULL) {
;;;332            OS_SAFETY_CRITICAL_EXCEPTION();
;;;333            return;
;;;334        }
;;;335    #endif
;;;336    
;;;337    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;338        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;339           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;340            return;
;;;341        }
;;;342    #endif
;;;343    
;;;344    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;345        if (p_mon == DEF_NULL) {                                    /* Validate 'p_mon'                                     */
;;;346           *p_err  = OS_ERR_OBJ_PTR_NULL;
;;;347            return;
;;;348        }
;;;349    #endif
;;;350    
;;;351        sched = DEF_NO;
000016  9002              STR      r0,[sp,#8]
;;;352    
;;;353        CPU_CRITICAL_ENTER();
000018  bf00              NOP      
00001a  bf00              NOP      
00001c  f7fffffe          BL       CPU_SR_Save
000020  9001              STR      r0,[sp,#4]
000022  bf00              NOP      
000024  f7fffffe          BL       CPU_IntDisMeasStart
000028  bf00              NOP      
;;;354    
;;;355        if (p_on_enter != DEF_NULL) {
00002a  f1b90f00          CMP      r9,#0
00002e  d004              BEQ      |L2.58|
;;;356            op_res = (*p_on_enter)(p_mon, p_arg);
000030  4641              MOV      r1,r8
000032  4638              MOV      r0,r7
000034  47c8              BLX      r9
000036  4605              MOV      r5,r0
000038  e000              B        |L2.60|
                  |L2.58|
;;;357        } else {
;;;358            op_res = OS_MON_RES_BLOCK | OS_MON_RES_STOP_EVAL;
00003a  2503              MOVS     r5,#3
                  |L2.60|
;;;359        }
;;;360    
;;;361        if (DEF_BIT_IS_SET(op_res, OS_MON_RES_BLOCK) == DEF_YES) {
00003c  f0150f01          TST      r5,#1
000040  d002              BEQ      |L2.72|
000042  bf00              NOP      
000044  2001              MOVS     r0,#1
000046  e000              B        |L2.74|
                  |L2.72|
000048  2000              MOVS     r0,#0
                  |L2.74|
00004a  2801              CMP      r0,#1
00004c  d107              BNE      |L2.94|
;;;362            OS_Pend(&pend_data,                                     /* Block task pending on Condition Variable             */
00004e  2208              MOVS     r2,#8
000050  4639              MOV      r1,r7
000052  a807              ADD      r0,sp,#0x1c
000054  9b12              LDR      r3,[sp,#0x48]
000056  f7fffffe          BL       OS_Pend
;;;363                    (OS_PEND_OBJ *)(p_mon),
;;;364                    OS_TASK_PEND_ON_COND_VAR,
;;;365                    timeout);
;;;366    
;;;367            sched = DEF_YES;
00005a  2001              MOVS     r0,#1
00005c  9002              STR      r0,[sp,#8]
                  |L2.94|
;;;368        }
;;;369    
;;;370    
;;;371        pend_data.RdyMsgPtr  = &mon_data;
00005e  a805              ADD      r0,sp,#0x14
000060  900c              STR      r0,[sp,#0x30]
;;;372        mon_data.p_eval_data = p_arg;
000062  f8cd8014          STR      r8,[sp,#0x14]
;;;373        mon_data.p_on_eval   = p_on_eval;
000066  f8cda018          STR      r10,[sp,#0x18]
;;;374    
;;;375        if (DEF_BIT_IS_CLR(op_res, OS_MON_RES_STOP_EVAL) == DEF_YES) {
00006a  f0150f02          TST      r5,#2
00006e  d102              BNE      |L2.118|
000070  bf00              NOP      
000072  2001              MOVS     r0,#1
000074  e000              B        |L2.120|
                  |L2.118|
000076  2000              MOVS     r0,#0
                  |L2.120|
000078  2801              CMP      r0,#1
00007a  d14a              BNE      |L2.274|
;;;376            p_pend_list = &p_mon->PendList;
00007c  f1070b08          ADD      r11,r7,#8
;;;377            if (p_pend_list->HeadPtr != DEF_NULL) {
000080  f8db0000          LDR      r0,[r11,#0]
000084  2800              CMP      r0,#0
000086  d044              BEQ      |L2.274|
;;;378                p_pend_data = p_pend_list->HeadPtr;
000088  f8db6000          LDR      r6,[r11,#0]
;;;379                while (p_pend_data != DEF_NULL) {
00008c  e03e              B        |L2.268|
                  |L2.142|
;;;380                    p_pend_data_next = p_pend_data->NextPtr;
00008e  6870              LDR      r0,[r6,#4]
000090  900f              STR      r0,[sp,#0x3c]
;;;381    
;;;382                    p_data = (OS_MON_DATA *)p_pend_data->RdyMsgPtr;
000092  6970              LDR      r0,[r6,#0x14]
000094  9004              STR      r0,[sp,#0x10]
;;;383                    p_on_eval = p_data->p_on_eval;
000096  9804              LDR      r0,[sp,#0x10]
000098  f8d0a004          LDR      r10,[r0,#4]
;;;384                    p_eval_data = p_data->p_eval_data;
00009c  9804              LDR      r0,[sp,#0x10]
00009e  6800              LDR      r0,[r0,#0]
0000a0  9003              STR      r0,[sp,#0xc]
;;;385    
;;;386                    if (p_on_eval != DEF_NULL) {
0000a2  f1ba0f00          CMP      r10,#0
0000a6  d005              BEQ      |L2.180|
;;;387                        mon_res = (*p_on_eval)(p_mon, p_eval_data, p_arg);
0000a8  4642              MOV      r2,r8
0000aa  4638              MOV      r0,r7
0000ac  9903              LDR      r1,[sp,#0xc]
0000ae  47d0              BLX      r10
0000b0  9010              STR      r0,[sp,#0x40]
0000b2  e001              B        |L2.184|
                  |L2.180|
;;;388                    } else {
;;;389                        mon_res = OS_MON_RES_STOP_EVAL;
0000b4  2002              MOVS     r0,#2
0000b6  9010              STR      r0,[sp,#0x40]
                  |L2.184|
;;;390                    }
;;;391    
;;;392                    if (DEF_BIT_IS_CLR(mon_res, OS_MON_RES_BLOCK) == DEF_YES) {
0000b8  9810              LDR      r0,[sp,#0x40]
0000ba  f0100f01          TST      r0,#1
0000be  d102              BNE      |L2.198|
0000c0  bf00              NOP      
0000c2  2001              MOVS     r0,#1
0000c4  e000              B        |L2.200|
                  |L2.198|
0000c6  2000              MOVS     r0,#0
                  |L2.200|
0000c8  2801              CMP      r0,#1
0000ca  d112              BNE      |L2.242|
;;;393                        OS_Post((OS_PEND_OBJ *)(p_mon), p_pend_data->TCBPtr, DEF_NULL, 0u, 0u);
0000cc  2000              MOVS     r0,#0
0000ce  9000              STR      r0,[sp,#0]
0000d0  4603              MOV      r3,r0
0000d2  4602              MOV      r2,r0
0000d4  4638              MOV      r0,r7
0000d6  68b1              LDR      r1,[r6,#8]
0000d8  f7fffffe          BL       OS_Post
;;;394                        if (DEF_BIT_IS_CLR(opt, OS_OPT_POST_NO_SCHED) == DEF_YES) {
0000dc  981f              LDR      r0,[sp,#0x7c]
0000de  f4104f00          TST      r0,#0x8000
0000e2  d102              BNE      |L2.234|
0000e4  bf00              NOP      
0000e6  2001              MOVS     r0,#1
0000e8  e000              B        |L2.236|
                  |L2.234|
0000ea  2000              MOVS     r0,#0
                  |L2.236|
0000ec  2801              CMP      r0,#1
0000ee  d100              BNE      |L2.242|
;;;395                            sched = DEF_YES;
0000f0  9002              STR      r0,[sp,#8]
                  |L2.242|
;;;396                        }
;;;397                    }
;;;398    
;;;399                    if (DEF_BIT_IS_SET(mon_res, OS_MON_RES_STOP_EVAL) == DEF_YES) {
0000f2  9810              LDR      r0,[sp,#0x40]
0000f4  f0000002          AND      r0,r0,#2
0000f8  2802              CMP      r0,#2
0000fa  d102              BNE      |L2.258|
0000fc  bf00              NOP      
0000fe  2001              MOVS     r0,#1
000100  e000              B        |L2.260|
                  |L2.258|
000102  2000              MOVS     r0,#0
                  |L2.260|
000104  2801              CMP      r0,#1
000106  d100              BNE      |L2.266|
;;;400                        break;
000108  e002              B        |L2.272|
                  |L2.266|
;;;401                    }
;;;402    
;;;403                    p_pend_data = p_pend_data_next;
00010a  9e0f              LDR      r6,[sp,#0x3c]
                  |L2.268|
00010c  2e00              CMP      r6,#0                 ;379
00010e  d1be              BNE      |L2.142|
                  |L2.272|
000110  bf00              NOP                            ;400
                  |L2.274|
;;;404                }
;;;405    
;;;406            }
;;;407    
;;;408        }
;;;409    
;;;410        CPU_CRITICAL_EXIT();
000112  bf00              NOP      
000114  f7fffffe          BL       CPU_IntDisMeasStop
000118  bf00              NOP      
00011a  9801              LDR      r0,[sp,#4]
00011c  f7fffffe          BL       CPU_SR_Restore
000120  bf00              NOP      
000122  bf00              NOP      
;;;411    
;;;412        if (sched == DEF_YES) {
000124  9802              LDR      r0,[sp,#8]
000126  2801              CMP      r0,#1
000128  d101              BNE      |L2.302|
;;;413            OSSched();                                              /* Find the next highest priority task ready to run     */
00012a  f7fffffe          BL       OSSched
                  |L2.302|
;;;414        }
;;;415    
;;;416        if (DEF_BIT_IS_SET(op_res, OS_MON_RES_BLOCK) == DEF_YES) {
00012e  f0150f01          TST      r5,#1
000132  d002              BEQ      |L2.314|
000134  bf00              NOP      
000136  2001              MOVS     r0,#1
000138  e000              B        |L2.316|
                  |L2.314|
00013a  2000              MOVS     r0,#0
                  |L2.316|
00013c  2801              CMP      r0,#1
00013e  d131              BNE      |L2.420|
;;;417        CPU_CRITICAL_ENTER();
000140  bf00              NOP      
000142  bf00              NOP      
000144  f7fffffe          BL       CPU_SR_Save
000148  9001              STR      r0,[sp,#4]
00014a  bf00              NOP      
00014c  f7fffffe          BL       CPU_IntDisMeasStart
000150  bf00              NOP      
;;;418            switch (OSTCBCurPtr->PendStatus) {
000152  4817              LDR      r0,|L2.432|
000154  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
000156  f8900035          LDRB     r0,[r0,#0x35]
00015a  b130              CBZ      r0,|L2.362|
00015c  2801              CMP      r0,#1
00015e  d007              BEQ      |L2.368|
000160  2802              CMP      r0,#2
000162  d00d              BEQ      |L2.384|
000164  2803              CMP      r0,#3
000166  d10f              BNE      |L2.392|
000168  e006              B        |L2.376|
                  |L2.362|
;;;419                case OS_STATUS_PEND_OK:                             /* We got the monitor                                   */
;;;420                    *p_err = OS_ERR_NONE;
00016a  2000              MOVS     r0,#0
00016c  8020              STRH     r0,[r4,#0]
;;;421                     break;
00016e  e00f              B        |L2.400|
                  |L2.368|
;;;422    
;;;423                case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                             */
;;;424                    *p_err = OS_ERR_PEND_ABORT;
000170  f24610a9          MOV      r0,#0x61a9
000174  8020              STRH     r0,[r4,#0]
;;;425                     break;
000176  e00b              B        |L2.400|
                  |L2.376|
;;;426    
;;;427                case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get monitor within timeout   */
;;;428                    *p_err = OS_ERR_TIMEOUT;
000178  f24720d9          MOV      r0,#0x72d9
00017c  8020              STRH     r0,[r4,#0]
;;;429                     break;
00017e  e007              B        |L2.400|
                  |L2.384|
;;;430    
;;;431                case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted      */
;;;432                    *p_err = OS_ERR_OBJ_DEL;
000180  f64550c2          MOV      r0,#0x5dc2
000184  8020              STRH     r0,[r4,#0]
;;;433                     break;
000186  e003              B        |L2.400|
                  |L2.392|
;;;434    
;;;435                default:
;;;436                    *p_err = OS_ERR_STATUS_INVALID;
000188  f646602e          MOV      r0,#0x6e2e
00018c  8020              STRH     r0,[r4,#0]
00018e  bf00              NOP                            ;418
                  |L2.400|
000190  bf00              NOP                            ;421
;;;437            }
;;;438        CPU_CRITICAL_EXIT();
000192  bf00              NOP      
000194  f7fffffe          BL       CPU_IntDisMeasStop
000198  bf00              NOP      
00019a  9801              LDR      r0,[sp,#4]
00019c  f7fffffe          BL       CPU_SR_Restore
0001a0  bf00              NOP      
0001a2  e001              B        |L2.424|
                  |L2.420|
;;;439        } else {
;;;440           *p_err = OS_ERR_NONE;
0001a4  2000              MOVS     r0,#0
0001a6  8020              STRH     r0,[r4,#0]
                  |L2.424|
;;;441        }
;;;442    }
0001a8  b015              ADD      sp,sp,#0x54
0001aa  e8bd8ff0          POP      {r4-r11,pc}
;;;443    
                          ENDP

0001ae  0000              DCW      0x0000
                  |L2.432|
                          DCD      OSTCBCurPtr

                          AREA ||i.OS_MonClr||, CODE, READONLY, ALIGN=2

                  OS_MonClr PROC
;;;460    
;;;461    void  OS_MonClr (OS_MON  *p_mon)
000000  b510              PUSH     {r4,lr}
;;;462    {
000002  4604              MOV      r4,r0
;;;463    #if (OS_OBJ_TYPE_REQ == DEF_ENABLED)
;;;464        p_mon->Type       = OS_OBJ_TYPE_NONE;                       /* Mark the data structure as a NONE                    */
000004  4805              LDR      r0,|L3.28|
000006  6020              STR      r0,[r4,#0]
;;;465    #endif
;;;466        p_mon->MonDataPtr = DEF_NULL;
000008  2000              MOVS     r0,#0
00000a  6220              STR      r0,[r4,#0x20]
;;;467    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;468        p_mon->NamePtr    = (CPU_CHAR *)((void *)"?MON");
00000c  a004              ADR      r0,|L3.32|
00000e  6060              STR      r0,[r4,#4]
;;;469    #endif
;;;470        OS_PendListInit(&p_mon->PendList);                          /* Initialize the waiting list                          */
000010  f1040008          ADD      r0,r4,#8
000014  f7fffffe          BL       OS_PendListInit
;;;471    }
000018  bd10              POP      {r4,pc}
;;;472    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x454e4f4e
                  |L3.32|
000020  3f4d4f4e          DCB      "?MON",0
000024  00      
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.OS_MonDbgListAdd||, CODE, READONLY, ALIGN=2

                  OS_MonDbgListAdd PROC
;;;488    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;489    void  OS_MonDbgListAdd (OS_MON  *p_mon)
000000  a109              ADR      r1,|L4.40|
;;;490    {
;;;491        p_mon->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
000002  61c1              STR      r1,[r0,#0x1c]
;;;492        p_mon->DbgPrevPtr               = DEF_NULL;
000004  2100              MOVS     r1,#0
000006  6141              STR      r1,[r0,#0x14]
;;;493        if (OSMonDbgListPtr == DEF_NULL) {
000008  4908              LDR      r1,|L4.44|
00000a  6809              LDR      r1,[r1,#0]  ; OSMonDbgListPtr
00000c  b911              CBNZ     r1,|L4.20|
;;;494            p_mon->DbgNextPtr           = DEF_NULL;
00000e  2100              MOVS     r1,#0
000010  6181              STR      r1,[r0,#0x18]
000012  e005              B        |L4.32|
                  |L4.20|
;;;495        } else {
;;;496            p_mon->DbgNextPtr           =  OSMonDbgListPtr;
000014  4905              LDR      r1,|L4.44|
000016  6809              LDR      r1,[r1,#0]  ; OSMonDbgListPtr
000018  6181              STR      r1,[r0,#0x18]
;;;497            OSMonDbgListPtr->DbgPrevPtr =  p_mon;
00001a  4904              LDR      r1,|L4.44|
00001c  6809              LDR      r1,[r1,#0]  ; OSMonDbgListPtr
00001e  6148              STR      r0,[r1,#0x14]
                  |L4.32|
;;;498        }
;;;499        OSMonDbgListPtr                 =  p_mon;
000020  4902              LDR      r1,|L4.44|
000022  6008              STR      r0,[r1,#0]  ; OSMonDbgListPtr
;;;500    }
000024  4770              BX       lr
;;;501    
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
000028  2000              DCB      " ",0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L4.44|
                          DCD      OSMonDbgListPtr

                          AREA ||i.OS_MonDbgListRemove||, CODE, READONLY, ALIGN=2

                  OS_MonDbgListRemove PROC
;;;503    
;;;504    void  OS_MonDbgListRemove (OS_MON  *p_mon)
000000  6942              LDR      r2,[r0,#0x14]
;;;505    {
;;;506        OS_MON  *p_mon_next;
;;;507        OS_MON  *p_mon_prev;
;;;508    
;;;509    
;;;510        p_mon_prev = p_mon->DbgPrevPtr;
;;;511        p_mon_next = p_mon->DbgNextPtr;
000002  6981              LDR      r1,[r0,#0x18]
;;;512    
;;;513        if (p_mon_prev == DEF_NULL) {
000004  b93a              CBNZ     r2,|L5.22|
;;;514            OSMonDbgListPtr = p_mon_next;
000006  4b09              LDR      r3,|L5.44|
000008  6019              STR      r1,[r3,#0]  ; OSMonDbgListPtr
;;;515            if (p_mon_next != DEF_NULL) {
00000a  b109              CBZ      r1,|L5.16|
;;;516                p_mon_next->DbgPrevPtr = DEF_NULL;
00000c  2300              MOVS     r3,#0
00000e  614b              STR      r3,[r1,#0x14]
                  |L5.16|
;;;517            }
;;;518            p_mon->DbgNextPtr = DEF_NULL;
000010  2300              MOVS     r3,#0
000012  6183              STR      r3,[r0,#0x18]
000014  e009              B        |L5.42|
                  |L5.22|
;;;519    
;;;520        } else if (p_mon_next == DEF_NULL) {
000016  b919              CBNZ     r1,|L5.32|
;;;521            p_mon_prev->DbgNextPtr = DEF_NULL;
000018  2300              MOVS     r3,#0
00001a  6193              STR      r3,[r2,#0x18]
;;;522            p_mon->DbgPrevPtr      = DEF_NULL;
00001c  6143              STR      r3,[r0,#0x14]
00001e  e004              B        |L5.42|
                  |L5.32|
;;;523    
;;;524        } else {
;;;525            p_mon_prev->DbgNextPtr =  p_mon_next;
000020  6191              STR      r1,[r2,#0x18]
;;;526            p_mon_next->DbgPrevPtr =  p_mon_prev;
000022  614a              STR      r2,[r1,#0x14]
;;;527            p_mon->DbgNextPtr      = DEF_NULL;
000024  2300              MOVS     r3,#0
000026  6183              STR      r3,[r0,#0x18]
;;;528            p_mon->DbgPrevPtr      = DEF_NULL;
000028  6143              STR      r3,[r0,#0x14]
                  |L5.42|
;;;529        }
;;;530    }
00002a  4770              BX       lr
;;;531    #endif
                          ENDP

                  |L5.44|
                          DCD      OSMonDbgListPtr
