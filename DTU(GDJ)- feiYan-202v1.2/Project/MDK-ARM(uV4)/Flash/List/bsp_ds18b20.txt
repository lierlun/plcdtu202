; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\bsp_ds18b20.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\bsp_ds18b20.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -I..\..\Malloc -I..\..\User\Modbus -Id:\Keil_v4\ARM\RV31\INC -Id:\Keil_v4\ARM\CMSIS\Include -Id:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Flash\Obj\bsp_ds18b20.crf ..\..\User\bsp\src\bsp_ds18b20.c]
                          THUMB

                          AREA ||i.DS18B20_Read||, CODE, READONLY, ALIGN=1

                  DS18B20_Read PROC
;;;319    
;;;320    int16_t DS18B20_Read(void)
000000  b510              PUSH     {r4,lr}
;;;321    {
;;;322    	//保留一位小数
;;;323    	return (DS18B20_ReadTempReg()*10/16);
000002  f7fffffe          BL       DS18B20_ReadTempReg
000006  eb000080          ADD      r0,r0,r0,LSL #2
00000a  0044              LSLS     r4,r0,#1
00000c  17e0              ASRS     r0,r4,#31
00000e  eb047010          ADD      r0,r4,r0,LSR #28
000012  1100              ASRS     r0,r0,#4
000014  b200              SXTH     r0,r0
;;;324    }
000016  bd10              POP      {r4,pc}
;;;325    /***************************** 安富莱电子 www.armfly.com (END OF FILE) *********************************/
                          ENDP


                          AREA ||i.DS18B20_ReadByte||, CODE, READONLY, ALIGN=2

                  DS18B20_ReadByte PROC
;;;184    */
;;;185    static uint8_t DS18B20_ReadByte(void)
000000  b570              PUSH     {r4-r6,lr}
;;;186    {
;;;187    #if uCOS_EN == 1 
;;;188    	CPU_SR_ALLOC();
000002  2600              MOVS     r6,#0
;;;189    #endif
;;;190    	/*
;;;191    		写数据时序, 见DS18B20 page 16
;;;192    	*/
;;;193    	uint8_t i;
;;;194    	uint8_t read = 0;
000004  2500              MOVS     r5,#0
;;;195    	
;;;196      DISABLE_INT();/* 禁止全局中断 */
000006  bf00              NOP      
000008  bf00              NOP      
00000a  f7fffffe          BL       CPU_SR_Save
00000e  4606              MOV      r6,r0
000010  bf00              NOP      
000012  f7fffffe          BL       CPU_IntDisMeasStart
000016  bf00              NOP      
;;;197    	
;;;198    	for (i = 0; i < 8; i++)
000018  2400              MOVS     r4,#0
00001a  e018              B        |L2.78|
                  |L2.28|
;;;199    	{
;;;200    		read >>= 1;
00001c  106d              ASRS     r5,r5,#1
;;;201    
;;;202    		DQ_0();
00001e  2080              MOVS     r0,#0x80
000020  4911              LDR      r1,|L2.104|
000022  6148              STR      r0,[r1,#0x14]
;;;203    		bsp_DelayUS(3);
000024  2003              MOVS     r0,#3
000026  f7fffffe          BL       bsp_DelayUS
;;;204    		DQ_1();
00002a  2080              MOVS     r0,#0x80
00002c  490e              LDR      r1,|L2.104|
00002e  6108              STR      r0,[r1,#0x10]
;;;205    		bsp_DelayUS(3);
000030  2003              MOVS     r0,#3
000032  f7fffffe          BL       bsp_DelayUS
;;;206    
;;;207    		if (DQ_IS_LOW())
000036  480c              LDR      r0,|L2.104|
000038  6880              LDR      r0,[r0,#8]
00003a  f0100f80          TST      r0,#0x80
00003e  d001              BEQ      |L2.68|
;;;208    		{
;;;209    			;
;;;210    		}
;;;211    		else
;;;212    		{
;;;213    			read |= 0x80;
000040  f0450580          ORR      r5,r5,#0x80
                  |L2.68|
;;;214    		}
;;;215    		bsp_DelayUS(60);
000044  203c              MOVS     r0,#0x3c
000046  f7fffffe          BL       bsp_DelayUS
00004a  1c60              ADDS     r0,r4,#1              ;198
00004c  b2c4              UXTB     r4,r0                 ;198
                  |L2.78|
00004e  2c08              CMP      r4,#8                 ;198
000050  dbe4              BLT      |L2.28|
;;;216    	}
;;;217    	
;;;218    	ENABLE_INT();	/* 使能全局中断 */
000052  bf00              NOP      
000054  f7fffffe          BL       CPU_IntDisMeasStop
000058  bf00              NOP      
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       CPU_SR_Restore
000060  bf00              NOP      
000062  bf00              NOP      
;;;219    	return read;
000064  4628              MOV      r0,r5
;;;220    }
000066  bd70              POP      {r4-r6,pc}
;;;221    
                          ENDP

                  |L2.104|
                          DCD      0x40011000

                          AREA ||i.DS18B20_ReadID||, CODE, READONLY, ALIGN=1

                  DS18B20_ReadID PROC
;;;261    */
;;;262    uint8_t DS18B20_ReadID(uint8_t *_id)
000000  b570              PUSH     {r4-r6,lr}
;;;263    {
000002  4605              MOV      r5,r0
;;;264    	uint8_t i;
;;;265    
;;;266    	/* 总线复位 */
;;;267    	if (DS18B20_Reset() == 0)
000004  f7fffffe          BL       DS18B20_Reset
000008  b908              CBNZ     r0,|L3.14|
;;;268    	{
;;;269    		return 0;
00000a  2000              MOVS     r0,#0
                  |L3.12|
;;;270    	}
;;;271    
;;;272    	DS18B20_WriteByte(0x33);	/* 发命令 */
;;;273    	for (i = 0; i < 8; i++)
;;;274    	{
;;;275    		_id[i] = DS18B20_ReadByte();
;;;276    	}
;;;277    
;;;278    	DS18B20_Reset();		/* 总线复位 */
;;;279    	
;;;280    	return 1;
;;;281    }
00000c  bd70              POP      {r4-r6,pc}
                  |L3.14|
00000e  2033              MOVS     r0,#0x33              ;272
000010  f7fffffe          BL       DS18B20_WriteByte
000014  2400              MOVS     r4,#0                 ;273
000016  e004              B        |L3.34|
                  |L3.24|
000018  f7fffffe          BL       DS18B20_ReadByte
00001c  5528              STRB     r0,[r5,r4]            ;275
00001e  1c60              ADDS     r0,r4,#1              ;273
000020  b2c4              UXTB     r4,r0                 ;273
                  |L3.34|
000022  2c08              CMP      r4,#8                 ;273
000024  dbf8              BLT      |L3.24|
000026  f7fffffe          BL       DS18B20_Reset
00002a  2001              MOVS     r0,#1                 ;280
00002c  e7ee              B        |L3.12|
;;;282    
                          ENDP


                          AREA ||i.DS18B20_ReadTempByID||, CODE, READONLY, ALIGN=1

                  DS18B20_ReadTempByID PROC
;;;290    */
;;;291    int16_t DS18B20_ReadTempByID(uint8_t *_id)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;292    {
000004  4605              MOV      r5,r0
;;;293    	uint8_t temp1, temp2;
;;;294    	uint8_t i;
;;;295    
;;;296    	DS18B20_Reset();		/* 总线复位 */
000006  f7fffffe          BL       DS18B20_Reset
;;;297    
;;;298    	DS18B20_WriteByte(0x55);	/* 发命令 */
00000a  2055              MOVS     r0,#0x55
00000c  f7fffffe          BL       DS18B20_WriteByte
;;;299    	for (i = 0; i < 8; i++)
000010  2400              MOVS     r4,#0
000012  e004              B        |L4.30|
                  |L4.20|
;;;300    	{
;;;301    		DS18B20_WriteByte(_id[i]);
000014  5d28              LDRB     r0,[r5,r4]
000016  f7fffffe          BL       DS18B20_WriteByte
00001a  1c60              ADDS     r0,r4,#1              ;299
00001c  b2c4              UXTB     r4,r0                 ;299
                  |L4.30|
00001e  2c08              CMP      r4,#8                 ;299
000020  dbf8              BLT      |L4.20|
;;;302    	}
;;;303    	DS18B20_WriteByte(0x44);	/* 发转换命令 */
000022  2044              MOVS     r0,#0x44
000024  f7fffffe          BL       DS18B20_WriteByte
;;;304    
;;;305    	DS18B20_Reset();		/* 总线复位 */
000028  f7fffffe          BL       DS18B20_Reset
;;;306    
;;;307    	DS18B20_WriteByte(0x55);	/* 发命令 */
00002c  2055              MOVS     r0,#0x55
00002e  f7fffffe          BL       DS18B20_WriteByte
;;;308    	for (i = 0; i < 8; i++)
000032  2400              MOVS     r4,#0
000034  e004              B        |L4.64|
                  |L4.54|
;;;309    	{
;;;310    		DS18B20_WriteByte(_id[i]);
000036  5d28              LDRB     r0,[r5,r4]
000038  f7fffffe          BL       DS18B20_WriteByte
00003c  1c60              ADDS     r0,r4,#1              ;308
00003e  b2c4              UXTB     r4,r0                 ;308
                  |L4.64|
000040  2c08              CMP      r4,#8                 ;308
000042  dbf8              BLT      |L4.54|
;;;311    	}	
;;;312    	DS18B20_WriteByte(0xbe);
000044  20be              MOVS     r0,#0xbe
000046  f7fffffe          BL       DS18B20_WriteByte
;;;313    
;;;314    	temp1 = DS18B20_ReadByte();	/* 读温度值低字节 */
00004a  f7fffffe          BL       DS18B20_ReadByte
00004e  4606              MOV      r6,r0
;;;315    	temp2 = DS18B20_ReadByte();	/* 读温度值高字节 */
000050  f7fffffe          BL       DS18B20_ReadByte
000054  4607              MOV      r7,r0
;;;316    
;;;317    	return ((temp2 << 8) | temp1);	/* 返回16位寄存器值 */
000056  ea462007          ORR      r0,r6,r7,LSL #8
00005a  b200              SXTH     r0,r0
;;;318    }
00005c  e8bd81f0          POP      {r4-r8,pc}
;;;319    
                          ENDP


                          AREA ||i.DS18B20_ReadTempReg||, CODE, READONLY, ALIGN=1

                  DS18B20_ReadTempReg PROC
;;;229    */
;;;230    int16_t DS18B20_ReadTempReg(void)
000000  b570              PUSH     {r4-r6,lr}
;;;231    {
;;;232    	uint8_t temp1, temp2;
;;;233    
;;;234    	/* 总线复位 */
;;;235    	if (DS18B20_Reset() == 0)
000002  f7fffffe          BL       DS18B20_Reset
000006  b908              CBNZ     r0,|L5.12|
;;;236    	{
;;;237    		return 0;
000008  2000              MOVS     r0,#0
                  |L5.10|
;;;238    	}		
;;;239    
;;;240    	DS18B20_WriteByte(0xcc);	/* 发命令 */
;;;241    	DS18B20_WriteByte(0x44);	/* 发转换命令 */
;;;242    
;;;243    	DS18B20_Reset();		/* 总线复位 */
;;;244    
;;;245    	DS18B20_WriteByte(0xcc);	/* 发命令 */
;;;246    	DS18B20_WriteByte(0xbe);
;;;247    
;;;248    	temp1 = DS18B20_ReadByte();	/* 读温度值低字节 */
;;;249    	temp2 = DS18B20_ReadByte();	/* 读温度值高字节 */
;;;250    
;;;251    	return ((temp2 << 8) | temp1);	/* 返回16位寄存器值 */
;;;252    }
00000a  bd70              POP      {r4-r6,pc}
                  |L5.12|
00000c  20cc              MOVS     r0,#0xcc              ;240
00000e  f7fffffe          BL       DS18B20_WriteByte
000012  2044              MOVS     r0,#0x44              ;241
000014  f7fffffe          BL       DS18B20_WriteByte
000018  f7fffffe          BL       DS18B20_Reset
00001c  20cc              MOVS     r0,#0xcc              ;245
00001e  f7fffffe          BL       DS18B20_WriteByte
000022  20be              MOVS     r0,#0xbe              ;246
000024  f7fffffe          BL       DS18B20_WriteByte
000028  f7fffffe          BL       DS18B20_ReadByte
00002c  4605              MOV      r5,r0                 ;248
00002e  f7fffffe          BL       DS18B20_ReadByte
000032  4604              MOV      r4,r0                 ;249
000034  ea452004          ORR      r0,r5,r4,LSL #8       ;251
000038  b200              SXTH     r0,r0                 ;251
00003a  e7e6              B        |L5.10|
;;;253    
                          ENDP


                          AREA ||i.DS18B20_Reset||, CODE, READONLY, ALIGN=2

                  DS18B20_Reset PROC
;;;64     */
;;;65     uint8_t DS18B20_Reset(void)
000000  b570              PUSH     {r4-r6,lr}
;;;66     {
;;;67     #if uCOS_EN == 1 
;;;68     	CPU_SR_ALLOC();
000002  2600              MOVS     r6,#0
;;;69     #endif
;;;70     	/*
;;;71     		复位时序, 见DS18B20 page 15
;;;72     
;;;73     		首先主机拉低DQ，持续最少 480us
;;;74     		然后释放DQ，等待DQ被上拉电阻拉高，约 15-60us
;;;75     		DS18B20 将驱动DQ为低 60-240us， 这个信号叫 presence pulse  (在位脉冲,表示DS18B20准备就绪 可以接受命令)
;;;76     		如果主机检测到这个低应答信号，表示DS18B20复位成功
;;;77     	*/
;;;78     
;;;79     	uint8_t i;
;;;80     	uint16_t k;
;;;81     
;;;82     	DISABLE_INT();/* 禁止全局中断 */
000004  bf00              NOP      
000006  bf00              NOP      
000008  f7fffffe          BL       CPU_SR_Save
00000c  4606              MOV      r6,r0
00000e  bf00              NOP      
000010  f7fffffe          BL       CPU_IntDisMeasStart
000014  bf00              NOP      
;;;83     
;;;84     	/* 复位，如果失败则返回0 */
;;;85     	for (i = 0; i < 1; i++)
000016  2500              MOVS     r5,#0
000018  e035              B        |L6.134|
                  |L6.26|
;;;86     	{
;;;87     		DQ_0();				/* 拉低DQ */
00001a  2080              MOVS     r0,#0x80
00001c  4924              LDR      r1,|L6.176|
00001e  6148              STR      r0,[r1,#0x14]
;;;88     		bsp_DelayUS(520);	/* 延迟 520uS， 要求这个延迟大于 480us */
000020  f44f7002          MOV      r0,#0x208
000024  f7fffffe          BL       bsp_DelayUS
;;;89     		DQ_1();				/* 释放DQ */
000028  2080              MOVS     r0,#0x80
00002a  4921              LDR      r1,|L6.176|
00002c  6108              STR      r0,[r1,#0x10]
;;;90     
;;;91     		bsp_DelayUS(15);	/* 等待15us */
00002e  200f              MOVS     r0,#0xf
000030  f7fffffe          BL       bsp_DelayUS
;;;92     
;;;93     		/* 检测DQ电平是否为低 */
;;;94     		for (k = 0; k < 10; k++)
000034  2400              MOVS     r4,#0
000036  e00a              B        |L6.78|
                  |L6.56|
;;;95     		{
;;;96     			if (DQ_IS_LOW())
000038  481d              LDR      r0,|L6.176|
00003a  6880              LDR      r0,[r0,#8]
00003c  f0100f80          TST      r0,#0x80
000040  d100              BNE      |L6.68|
;;;97     			{
;;;98     				break;
000042  e006              B        |L6.82|
                  |L6.68|
;;;99     			}
;;;100    			bsp_DelayUS(10);	/* 等待65us */
000044  200a              MOVS     r0,#0xa
000046  f7fffffe          BL       bsp_DelayUS
00004a  1c60              ADDS     r0,r4,#1              ;94
00004c  b284              UXTH     r4,r0                 ;94
                  |L6.78|
00004e  2c0a              CMP      r4,#0xa               ;94
000050  dbf2              BLT      |L6.56|
                  |L6.82|
000052  bf00              NOP                            ;98
;;;101    		}
;;;102    		if (k >= 10)
000054  2c0a              CMP      r4,#0xa
000056  db00              BLT      |L6.90|
;;;103    		{
;;;104    			continue;		/* 失败 */
000058  e013              B        |L6.130|
                  |L6.90|
;;;105    		}
;;;106    
;;;107    		/* 等待DS18B20释放DQ */
;;;108    		for (k = 0; k < 30; k++)
00005a  2400              MOVS     r4,#0
00005c  e00a              B        |L6.116|
                  |L6.94|
;;;109    		{
;;;110    			if (!DQ_IS_LOW())
00005e  4814              LDR      r0,|L6.176|
000060  6880              LDR      r0,[r0,#8]
000062  f0100f80          TST      r0,#0x80
000066  d000              BEQ      |L6.106|
;;;111    			{
;;;112    				break;
000068  e006              B        |L6.120|
                  |L6.106|
;;;113    			}
;;;114    			bsp_DelayUS(10);	/* 等待65us */
00006a  200a              MOVS     r0,#0xa
00006c  f7fffffe          BL       bsp_DelayUS
000070  1c60              ADDS     r0,r4,#1              ;108
000072  b284              UXTH     r4,r0                 ;108
                  |L6.116|
000074  2c1e              CMP      r4,#0x1e              ;108
000076  dbf2              BLT      |L6.94|
                  |L6.120|
000078  bf00              NOP                            ;112
;;;115    		}
;;;116    		if (k >= 30)
00007a  2c1e              CMP      r4,#0x1e
00007c  db00              BLT      |L6.128|
;;;117    		{
;;;118    			continue;		/* 失败 */
00007e  e000              B        |L6.130|
                  |L6.128|
;;;119    		}
;;;120    
;;;121    		break;
000080  e003              B        |L6.138|
                  |L6.130|
000082  1c68              ADDS     r0,r5,#1              ;85
000084  b2c5              UXTB     r5,r0                 ;85
                  |L6.134|
000086  2d01              CMP      r5,#1                 ;85
000088  dbc7              BLT      |L6.26|
                  |L6.138|
00008a  bf00              NOP      
;;;122    	}
;;;123    
;;;124    	ENABLE_INT();	/* 使能全局中断 */
00008c  bf00              NOP      
00008e  f7fffffe          BL       CPU_IntDisMeasStop
000092  bf00              NOP      
000094  4630              MOV      r0,r6
000096  f7fffffe          BL       CPU_SR_Restore
00009a  bf00              NOP      
00009c  bf00              NOP      
;;;125    
;;;126    	bsp_DelayUS(5);
00009e  2005              MOVS     r0,#5
0000a0  f7fffffe          BL       bsp_DelayUS
;;;127    
;;;128    	if (i >= 1)
0000a4  2d01              CMP      r5,#1
0000a6  db01              BLT      |L6.172|
;;;129    	{
;;;130    		return 0;
0000a8  2000              MOVS     r0,#0
                  |L6.170|
;;;131    	}
;;;132    
;;;133    	return 1;
;;;134    }
0000aa  bd70              POP      {r4-r6,pc}
                  |L6.172|
0000ac  2001              MOVS     r0,#1                 ;133
0000ae  e7fc              B        |L6.170|
;;;135    
                          ENDP

                  |L6.176|
                          DCD      0x40011000

                          AREA ||i.DS18B20_WriteByte||, CODE, READONLY, ALIGN=2

                  DS18B20_WriteByte PROC
;;;143    */
;;;144    static void DS18B20_WriteByte(uint8_t _val)
000000  b570              PUSH     {r4-r6,lr}
;;;145    {
000002  4604              MOV      r4,r0
;;;146    #if uCOS_EN == 1 
;;;147    	CPU_SR_ALLOC();
000004  2600              MOVS     r6,#0
;;;148    #endif
;;;149    	/*
;;;150    		写数据时序, 见DS18B20 page 16
;;;151    	*/
;;;152    	uint8_t i;
;;;153    
;;;154    	DISABLE_INT();/* 禁止全局中断 */
000006  bf00              NOP      
000008  bf00              NOP      
00000a  f7fffffe          BL       CPU_SR_Save
00000e  4606              MOV      r6,r0
000010  bf00              NOP      
000012  f7fffffe          BL       CPU_IntDisMeasStart
000016  bf00              NOP      
;;;155    	
;;;156    	for (i = 0; i < 8; i++)
000018  2500              MOVS     r5,#0
00001a  e01b              B        |L7.84|
                  |L7.28|
;;;157    	{
;;;158    		DQ_0();
00001c  2080              MOVS     r0,#0x80
00001e  4913              LDR      r1,|L7.108|
000020  6148              STR      r0,[r1,#0x14]
;;;159    		bsp_DelayUS(2);
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       bsp_DelayUS
;;;160    
;;;161    		if (_val & 0x01)
000028  f0140f01          TST      r4,#1
00002c  d003              BEQ      |L7.54|
;;;162    		{
;;;163    			DQ_1();
00002e  2080              MOVS     r0,#0x80
000030  490e              LDR      r1,|L7.108|
000032  6108              STR      r0,[r1,#0x10]
000034  e002              B        |L7.60|
                  |L7.54|
;;;164    		}
;;;165    		else
;;;166    		{
;;;167    			DQ_0();
000036  2080              MOVS     r0,#0x80
000038  490c              LDR      r1,|L7.108|
00003a  6148              STR      r0,[r1,#0x14]
                  |L7.60|
;;;168    		}
;;;169    		bsp_DelayUS(60);
00003c  203c              MOVS     r0,#0x3c
00003e  f7fffffe          BL       bsp_DelayUS
;;;170    		DQ_1();
000042  2080              MOVS     r0,#0x80
000044  4909              LDR      r1,|L7.108|
000046  6108              STR      r0,[r1,#0x10]
;;;171    		bsp_DelayUS(2);
000048  2002              MOVS     r0,#2
00004a  f7fffffe          BL       bsp_DelayUS
;;;172    		_val >>= 1;
00004e  1064              ASRS     r4,r4,#1
000050  1c68              ADDS     r0,r5,#1              ;156
000052  b2c5              UXTB     r5,r0                 ;156
                  |L7.84|
000054  2d08              CMP      r5,#8                 ;156
000056  dbe1              BLT      |L7.28|
;;;173    	}
;;;174    	ENABLE_INT();	/* 使能全局中断 */
000058  bf00              NOP      
00005a  f7fffffe          BL       CPU_IntDisMeasStop
00005e  bf00              NOP      
000060  4630              MOV      r0,r6
000062  f7fffffe          BL       CPU_SR_Restore
000066  bf00              NOP      
000068  bf00              NOP      
;;;175    }
00006a  bd70              POP      {r4-r6,pc}
;;;176    
                          ENDP

                  |L7.108|
                          DCD      0x40011000

                          AREA ||i.bsp_InitDS18B20||, CODE, READONLY, ALIGN=2

                  bsp_InitDS18B20 PROC
;;;39     */
;;;40     void bsp_InitDS18B20(void)
000000  b508              PUSH     {r3,lr}
;;;41     {
;;;42     	GPIO_InitTypeDef GPIO_InitStructure;
;;;43     
;;;44     	/* 打开GPIO时钟 */
;;;45     	RCC_APB2PeriphClockCmd(RCC_DQ, ENABLE);
000002  2101              MOVS     r1,#1
000004  2010              MOVS     r0,#0x10
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;46     
;;;47     	DQ_1();
00000a  2080              MOVS     r0,#0x80
00000c  4907              LDR      r1,|L8.44|
00000e  6108              STR      r0,[r1,#0x10]
;;;48     
;;;49     	/* 配置DQ为开漏输出 */
;;;50     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;51     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;	/* 开漏输出模式 */
000016  2014              MOVS     r0,#0x14
000018  f88d0003          STRB     r0,[sp,#3]
;;;52     
;;;53     	GPIO_InitStructure.GPIO_Pin = PIN_DQ;
00001c  2080              MOVS     r0,#0x80
00001e  f8ad0000          STRH     r0,[sp,#0]
;;;54     	GPIO_Init(PORT_DQ, &GPIO_InitStructure);
000022  4669              MOV      r1,sp
000024  4801              LDR      r0,|L8.44|
000026  f7fffffe          BL       GPIO_Init
;;;55     }
00002a  bd08              POP      {r3,pc}
;;;56     
                          ENDP

                  |L8.44|
                          DCD      0x40011000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_ds18b20.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_bsp_ds18b20_c_ceb834f6____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_ds18b20_c_ceb834f6____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_bsp_ds18b20_c_ceb834f6____REVSH|
#line 128
|__asm___13_bsp_ds18b20_c_ceb834f6____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
