; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\bsp_timer.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\bsp_timer.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -I..\..\Malloc -I..\..\User\Modbus -Id:\Keil_v4\ARM\RV31\INC -Id:\Keil_v4\ARM\CMSIS\Include -Id:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Flash\Obj\bsp_timer.crf ..\..\User\bsp\src\bsp_timer.c]
                          THUMB

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM2_IRQHandler PROC
;;;645    #ifdef USE_TIM2
;;;646    void TIM2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;647    #endif
;;;648    
;;;649    #ifdef USE_TIM3
;;;650    void TIM3_IRQHandler(void)
;;;651    #endif
;;;652    
;;;653    #ifdef USE_TIM4
;;;654    void TIM4_IRQHandler(void)
;;;655    #endif
;;;656    
;;;657    #ifdef USE_TIM5
;;;658    void TIM5_IRQHandler(void)
;;;659    #endif
;;;660    {
;;;661        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC1))
000002  2102              MOVS     r1,#2
000004  0748              LSLS     r0,r1,#29
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b158              CBZ      r0,|L1.36|
;;;662        {
;;;663            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC1);
00000c  2102              MOVS     r1,#2
00000e  0748              LSLS     r0,r1,#29
000010  f7fffffe          BL       TIM_ClearITPendingBit
;;;664            TIM_ITConfig(TIM_HARD, TIM_IT_CC1, DISABLE);	/* 禁能CC1中断 */
000014  2200              MOVS     r2,#0
000016  2102              MOVS     r1,#2
000018  0748              LSLS     r0,r1,#29
00001a  f7fffffe          BL       TIM_ITConfig
;;;665    
;;;666            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;667            s_TIM_CallBack1();
00001e  481b              LDR      r0,|L1.140|
000020  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack1
000022  4780              BLX      r0
                  |L1.36|
;;;668        }
;;;669    
;;;670        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC2))
000024  2104              MOVS     r1,#4
000026  0708              LSLS     r0,r1,#28
000028  f7fffffe          BL       TIM_GetITStatus
00002c  b158              CBZ      r0,|L1.70|
;;;671        {
;;;672            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC2);
00002e  2104              MOVS     r1,#4
000030  0708              LSLS     r0,r1,#28
000032  f7fffffe          BL       TIM_ClearITPendingBit
;;;673            TIM_ITConfig(TIM_HARD, TIM_IT_CC2, DISABLE);	/* 禁能CC2中断 */
000036  2200              MOVS     r2,#0
000038  2104              MOVS     r1,#4
00003a  0708              LSLS     r0,r1,#28
00003c  f7fffffe          BL       TIM_ITConfig
;;;674    
;;;675            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;676            s_TIM_CallBack2();
000040  4813              LDR      r0,|L1.144|
000042  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack2
000044  4780              BLX      r0
                  |L1.70|
;;;677        }
;;;678    
;;;679        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC3))
000046  2108              MOVS     r1,#8
000048  06c8              LSLS     r0,r1,#27
00004a  f7fffffe          BL       TIM_GetITStatus
00004e  b158              CBZ      r0,|L1.104|
;;;680        {
;;;681            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC3);
000050  2108              MOVS     r1,#8
000052  06c8              LSLS     r0,r1,#27
000054  f7fffffe          BL       TIM_ClearITPendingBit
;;;682            TIM_ITConfig(TIM_HARD, TIM_IT_CC3, DISABLE);	/* 禁能CC3中断 */
000058  2200              MOVS     r2,#0
00005a  2108              MOVS     r1,#8
00005c  06c8              LSLS     r0,r1,#27
00005e  f7fffffe          BL       TIM_ITConfig
;;;683    
;;;684            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;685            s_TIM_CallBack3();
000062  480c              LDR      r0,|L1.148|
000064  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack3
000066  4780              BLX      r0
                  |L1.104|
;;;686        }
;;;687    
;;;688        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC4))
000068  2110              MOVS     r1,#0x10
00006a  0688              LSLS     r0,r1,#26
00006c  f7fffffe          BL       TIM_GetITStatus
000070  b158              CBZ      r0,|L1.138|
;;;689        {
;;;690            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC4);
000072  2110              MOVS     r1,#0x10
000074  0688              LSLS     r0,r1,#26
000076  f7fffffe          BL       TIM_ClearITPendingBit
;;;691            TIM_ITConfig(TIM_HARD, TIM_IT_CC4, DISABLE);	/* 禁能CC4中断 */
00007a  2200              MOVS     r2,#0
00007c  2110              MOVS     r1,#0x10
00007e  0688              LSLS     r0,r1,#26
000080  f7fffffe          BL       TIM_ITConfig
;;;692    
;;;693            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;694            s_TIM_CallBack4();
000084  4804              LDR      r0,|L1.152|
000086  6800              LDR      r0,[r0,#0]  ; s_TIM_CallBack4
000088  4780              BLX      r0
                  |L1.138|
;;;695        }
;;;696    }
00008a  bd10              POP      {r4,pc}
;;;697    
                          ENDP

                  |L1.140|
                          DCD      s_TIM_CallBack1
                  |L1.144|
                          DCD      s_TIM_CallBack2
                  |L1.148|
                          DCD      s_TIM_CallBack3
                  |L1.152|
                          DCD      s_TIM_CallBack4

                          AREA ||i.TimeTickHook||, CODE, READONLY, ALIGN=2

                  TimeTickHook PROC
;;;133    #if uCOS_EN == 1 
;;;134    void TimeTickHook(void)
000000  b510              PUSH     {r4,lr}
;;;135    #else
;;;136    void SysTick_ISR(void)
;;;137    #endif
;;;138    {
;;;139    	static uint8_t s_count = 0;
;;;140    	uint8_t i;
;;;141    
;;;142    	/* 每隔1ms进来1次 （仅用于 bsp_DelayMS） */
;;;143    	if (s_uiDelayCount > 0)
000002  481b              LDR      r0,|L2.112|
000004  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
000006  b140              CBZ      r0,|L2.26|
;;;144    	{
;;;145    		if (--s_uiDelayCount == 0)
000008  4819              LDR      r0,|L2.112|
00000a  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
00000c  1e40              SUBS     r0,r0,#1
00000e  4918              LDR      r1,|L2.112|
000010  6008              STR      r0,[r1,#0]  ; s_uiDelayCount
000012  d102              BNE      |L2.26|
;;;146    		{
;;;147    			s_ucTimeOutFlag = 1;
000014  2001              MOVS     r0,#1
000016  4917              LDR      r1,|L2.116|
000018  7008              STRB     r0,[r1,#0]
                  |L2.26|
;;;148    		}
;;;149    	}
;;;150    
;;;151    	/* 每隔1ms，对软件定时器的计数器进行减一操作 */
;;;152    	for (i = 0; i < TMR_COUNT; i++)
00001a  2400              MOVS     r4,#0
00001c  e008              B        |L2.48|
                  |L2.30|
;;;153    	{
;;;154    		bsp_SoftTimerDec(&s_tTmr[i]);
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  4a15              LDR      r2,|L2.120|
000024  eb020081          ADD      r0,r2,r1,LSL #2
000028  f7fffffe          BL       bsp_SoftTimerDec
00002c  1c60              ADDS     r0,r4,#1              ;152
00002e  b2c4              UXTB     r4,r0                 ;152
                  |L2.48|
000030  2c14              CMP      r4,#0x14              ;152
000032  dbf4              BLT      |L2.30|
;;;155    	}
;;;156    
;;;157    	/* 全局运行时间每1ms增1 */
;;;158    	g_iRunTime++;
000034  4811              LDR      r0,|L2.124|
000036  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000038  1c40              ADDS     r0,r0,#1
00003a  4910              LDR      r1,|L2.124|
00003c  6008              STR      r0,[r1,#0]  ; g_iRunTime
;;;159    	if (g_iRunTime == 0x7FFFFFFF)	/* 这个变量是 int32_t 类型，最大数为 0x7FFFFFFF */
00003e  4608              MOV      r0,r1
000040  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000042  f06f4100          MVN      r1,#0x80000000
000046  4288              CMP      r0,r1
000048  d102              BNE      |L2.80|
;;;160    	{
;;;161    		g_iRunTime = 0;
00004a  2000              MOVS     r0,#0
00004c  490b              LDR      r1,|L2.124|
00004e  6008              STR      r0,[r1,#0]  ; g_iRunTime
                  |L2.80|
;;;162    	}
;;;163    
;;;164    	bsp_RunPer1ms();		/* 每隔1ms调用一次此函数，此函数在 bsp.c */
000050  f7fffffe          BL       bsp_RunPer1ms
;;;165    
;;;166    	if (++s_count >= 10)
000054  480a              LDR      r0,|L2.128|
000056  7800              LDRB     r0,[r0,#0]  ; s_count
000058  1c40              ADDS     r0,r0,#1
00005a  b2c0              UXTB     r0,r0
00005c  4908              LDR      r1,|L2.128|
00005e  7008              STRB     r0,[r1,#0]
000060  280a              CMP      r0,#0xa
000062  db03              BLT      |L2.108|
;;;167    	{
;;;168    		s_count = 0;
000064  2000              MOVS     r0,#0
000066  7008              STRB     r0,[r1,#0]
;;;169    
;;;170    		bsp_RunPer10ms();	/* 每隔10ms调用一次此函数，此函数在 bsp.c */
000068  f7fffffe          BL       bsp_RunPer10ms
                  |L2.108|
;;;171    	}
;;;172    }
00006c  bd10              POP      {r4,pc}
;;;173    
                          ENDP

00006e  0000              DCW      0x0000
                  |L2.112|
                          DCD      s_uiDelayCount
                  |L2.116|
                          DCD      s_ucTimeOutFlag
                  |L2.120|
                          DCD      s_tTmr
                  |L2.124|
                          DCD      g_iRunTime
                  |L2.128|
                          DCD      s_count

                          AREA ||i.bsp_CheckRunTime||, CODE, READONLY, ALIGN=2

                  bsp_CheckRunTime PROC
;;;436    */
;;;437    int32_t bsp_CheckRunTime(int32_t _LastTime)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;438    {
000004  4604              MOV      r4,r0
;;;439    #if uCOS_EN == 1 
;;;440    	CPU_SR_ALLOC();
000006  2700              MOVS     r7,#0
;;;441    #endif
;;;442    	int32_t now_time;
;;;443    	int32_t time_diff;
;;;444    
;;;445    	DISABLE_INT();  	/* 关中断 */
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  f7fffffe          BL       CPU_SR_Save
000010  4607              MOV      r7,r0
000012  bf00              NOP      
000014  f7fffffe          BL       CPU_IntDisMeasStart
000018  bf00              NOP      
;;;446    
;;;447    	now_time = g_iRunTime;	/* 这个变量在Systick中断中被改写，因此需要关中断进行保护 */
00001a  480b              LDR      r0,|L3.72|
00001c  6805              LDR      r5,[r0,#0]  ; g_iRunTime
;;;448    
;;;449    	ENABLE_INT();  		/* 开中断 */
00001e  bf00              NOP      
000020  f7fffffe          BL       CPU_IntDisMeasStop
000024  bf00              NOP      
000026  4638              MOV      r0,r7
000028  f7fffffe          BL       CPU_SR_Restore
00002c  bf00              NOP      
00002e  bf00              NOP      
;;;450    	
;;;451    	if (now_time >= _LastTime)
000030  42a5              CMP      r5,r4
000032  db01              BLT      |L3.56|
;;;452    	{
;;;453    		time_diff = now_time - _LastTime;
000034  1b2e              SUBS     r6,r5,r4
000036  e003              B        |L3.64|
                  |L3.56|
;;;454    	}
;;;455    	else
;;;456    	{
;;;457    		time_diff = 0x7FFFFFFF - _LastTime + now_time;
000038  f06f4000          MVN      r0,#0x80000000
00003c  1b00              SUBS     r0,r0,r4
00003e  1946              ADDS     r6,r0,r5
                  |L3.64|
;;;458    	}
;;;459    
;;;460    	return time_diff;
000040  4630              MOV      r0,r6
;;;461    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;462    
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      g_iRunTime

                          AREA ||i.bsp_CheckTimer||, CODE, READONLY, ALIGN=2

                  bsp_CheckTimer PROC
;;;386    */
;;;387    uint8_t bsp_CheckTimer(uint8_t _id)
000000  4601              MOV      r1,r0
;;;388    {
;;;389    	if (_id >= TMR_COUNT)
000002  2914              CMP      r1,#0x14
000004  db01              BLT      |L4.10|
;;;390    	{
;;;391    		return 0;
000006  2000              MOVS     r0,#0
                  |L4.8|
;;;392    	}
;;;393    
;;;394    	if (s_tTmr[_id].Flag == 1)
;;;395    	{
;;;396    		s_tTmr[_id].Flag = 0;
;;;397    		return 1;
;;;398    	}
;;;399    	else
;;;400    	{
;;;401    		return 0;
;;;402    	}
;;;403    }
000008  4770              BX       lr
                  |L4.10|
00000a  eb010041          ADD      r0,r1,r1,LSL #1       ;394
00000e  4a08              LDR      r2,|L4.48|
000010  eb020080          ADD      r0,r2,r0,LSL #2       ;394
000014  7840              LDRB     r0,[r0,#1]            ;394
000016  2801              CMP      r0,#1                 ;394
000018  d108              BNE      |L4.44|
00001a  2000              MOVS     r0,#0                 ;396
00001c  eb010241          ADD      r2,r1,r1,LSL #1       ;396
000020  4b03              LDR      r3,|L4.48|
000022  eb030282          ADD      r2,r3,r2,LSL #2       ;396
000026  7050              STRB     r0,[r2,#1]            ;396
000028  2001              MOVS     r0,#1                 ;397
00002a  e7ed              B        |L4.8|
                  |L4.44|
00002c  2000              MOVS     r0,#0                 ;401
00002e  e7eb              B        |L4.8|
;;;404    
                          ENDP

                  |L4.48|
                          DCD      s_tTmr

                          AREA ||i.bsp_DelayMS||, CODE, READONLY, ALIGN=2

                  bsp_DelayMS PROC
;;;207    */
;;;208    void bsp_DelayMS(uint32_t n)
000000  b570              PUSH     {r4-r6,lr}
;;;209    {
000002  4604              MOV      r4,r0
;;;210    #if uCOS_EN == 1 
;;;211    	CPU_SR_ALLOC();
000004  2500              MOVS     r5,#0
;;;212    #endif
;;;213    	if (n == 0)
000006  b904              CBNZ     r4,|L5.10|
                  |L5.8|
;;;214    	{
;;;215    		return;
;;;216    	}
;;;217    	else if (n == 1)
;;;218    	{
;;;219    		n = 2;
;;;220    	}
;;;221    
;;;222    	DISABLE_INT();  			/* 关中断 */
;;;223    
;;;224    	s_uiDelayCount = n;
;;;225    	s_ucTimeOutFlag = 0;
;;;226    
;;;227    	ENABLE_INT();  				/* 开中断 */
;;;228    
;;;229    	while (1)
;;;230    	{
;;;231    //		bsp_Idle();				/* CPU空闲执行的操作， 见 bsp.c 和 bsp.h 文件 */
;;;232    	  BSP_OS_TimeDlyMs(1);	
;;;233    		/*
;;;234    			等待延迟时间到
;;;235    			注意：编译器认为 s_ucTimeOutFlag = 0，所以可能优化错误，因此 s_ucTimeOutFlag 变量必须申明为 volatile
;;;236    		*/
;;;237    		if (s_ucTimeOutFlag == 1)
;;;238    		{
;;;239    			break;
;;;240    		}
;;;241    	}
;;;242    }
000008  bd70              POP      {r4-r6,pc}
                  |L5.10|
00000a  2c01              CMP      r4,#1                 ;217
00000c  d100              BNE      |L5.16|
00000e  2402              MOVS     r4,#2                 ;219
                  |L5.16|
000010  bf00              NOP                            ;222
000012  bf00              NOP                            ;222
000014  f7fffffe          BL       CPU_SR_Save
000018  4605              MOV      r5,r0                 ;222
00001a  bf00              NOP                            ;222
00001c  f7fffffe          BL       CPU_IntDisMeasStart
000020  bf00              NOP                            ;222
000022  480d              LDR      r0,|L5.88|
000024  6004              STR      r4,[r0,#0]            ;224  ; s_uiDelayCount
000026  2000              MOVS     r0,#0                 ;225
000028  490c              LDR      r1,|L5.92|
00002a  7008              STRB     r0,[r1,#0]            ;225
00002c  bf00              NOP                            ;227
00002e  f7fffffe          BL       CPU_IntDisMeasStop
000032  bf00              NOP                            ;227
000034  4628              MOV      r0,r5                 ;227
000036  f7fffffe          BL       CPU_SR_Restore
00003a  bf00              NOP                            ;227
00003c  bf00              NOP                            ;227
00003e  e007              B        |L5.80|
                  |L5.64|
000040  2001              MOVS     r0,#1                 ;232
000042  f7fffffe          BL       BSP_OS_TimeDlyMs
000046  4805              LDR      r0,|L5.92|
000048  7800              LDRB     r0,[r0,#0]            ;237  ; s_ucTimeOutFlag
00004a  2801              CMP      r0,#1                 ;237
00004c  d100              BNE      |L5.80|
00004e  e000              B        |L5.82|
                  |L5.80|
000050  e7f6              B        |L5.64|
                  |L5.82|
000052  bf00              NOP                            ;239
000054  bf00              NOP      
000056  e7d7              B        |L5.8|
;;;243    
                          ENDP

                  |L5.88|
                          DCD      s_uiDelayCount
                  |L5.92|
                          DCD      s_ucTimeOutFlag

                          AREA ||i.bsp_DelayUS||, CODE, READONLY, ALIGN=2

                  bsp_DelayUS PROC
;;;251    */
;;;252    void bsp_DelayUS(uint32_t n)
000000  b5f0              PUSH     {r4-r7,lr}
;;;253    {
000002  4603              MOV      r3,r0
;;;254        uint32_t ticks;
;;;255        uint32_t told;
;;;256        uint32_t tnow;
;;;257        uint32_t tcnt = 0;
000004  2200              MOVS     r2,#0
;;;258        uint32_t reload;
;;;259           
;;;260    	  reload = SysTick->LOAD;                
000006  f04f26e0          MOV      r6,#0xe000e000
00000a  6975              LDR      r5,[r6,#0x14]
;;;261        ticks = n * (SystemCoreClock / 1000000);	 /* 需要的节拍数 */  
00000c  4e0f              LDR      r6,|L6.76|
00000e  6836              LDR      r6,[r6,#0]  ; SystemCoreClock
000010  4f0f              LDR      r7,|L6.80|
000012  fbb6f6f7          UDIV     r6,r6,r7
000016  fb06f403          MUL      r4,r6,r3
;;;262        
;;;263        tcnt = 0;
00001a  bf00              NOP      
;;;264        told = SysTick->VAL;             /* 刚进入时的计数器值 */
00001c  f04f26e0          MOV      r6,#0xe000e000
000020  69b1              LDR      r1,[r6,#0x18]
;;;265    
;;;266        while (1)
000022  e010              B        |L6.70|
                  |L6.36|
;;;267        {
;;;268            tnow = SysTick->VAL;    
000024  f04f26e0          MOV      r6,#0xe000e000
000028  69b0              LDR      r0,[r6,#0x18]
;;;269            if (tnow != told)
00002a  4288              CMP      r0,r1
00002c  d00b              BEQ      |L6.70|
;;;270            {    
;;;271                /* SYSTICK是一个递减的计数器 */    
;;;272                if (tnow < told)
00002e  4288              CMP      r0,r1
000030  d202              BCS      |L6.56|
;;;273                {
;;;274                    tcnt += told - tnow;    
000032  1a0e              SUBS     r6,r1,r0
000034  4432              ADD      r2,r2,r6
000036  e002              B        |L6.62|
                  |L6.56|
;;;275                }
;;;276                /* 重新装载递减 */
;;;277                else
;;;278                {
;;;279                    tcnt += reload - tnow + told;    
000038  1a2e              SUBS     r6,r5,r0
00003a  440e              ADD      r6,r6,r1
00003c  4432              ADD      r2,r2,r6
                  |L6.62|
;;;280                }        
;;;281                told = tnow;
00003e  4601              MOV      r1,r0
;;;282    
;;;283                /* 时间超过/等于要延迟的时间,则退出 */
;;;284                if (tcnt >= ticks)
000040  42a2              CMP      r2,r4
000042  d300              BCC      |L6.70|
;;;285                {
;;;286                	break;
000044  e000              B        |L6.72|
                  |L6.70|
000046  e7ed              B        |L6.36|
                  |L6.72|
000048  bf00              NOP      
;;;287                }
;;;288            }  
;;;289        }
;;;290    } 
00004a  bdf0              POP      {r4-r7,pc}
;;;291    
                          ENDP

                  |L6.76|
                          DCD      SystemCoreClock
                  |L6.80|
                          DCD      0x000f4240

                          AREA ||i.bsp_GetRunTime||, CODE, READONLY, ALIGN=2

                  bsp_GetRunTime PROC
;;;412    */
;;;413    int32_t bsp_GetRunTime(void)
000000  b570              PUSH     {r4-r6,lr}
;;;414    {
;;;415    #if uCOS_EN == 1 
;;;416    	CPU_SR_ALLOC();
000002  2500              MOVS     r5,#0
;;;417    #endif
;;;418    	int32_t runtime;
;;;419    
;;;420    	DISABLE_INT();  	/* 关中断 */
000004  bf00              NOP      
000006  bf00              NOP      
000008  f7fffffe          BL       CPU_SR_Save
00000c  4605              MOV      r5,r0
00000e  bf00              NOP      
000010  f7fffffe          BL       CPU_IntDisMeasStart
000014  bf00              NOP      
;;;421    
;;;422    	runtime = g_iRunTime;	/* 这个变量在Systick中断中被改写，因此需要关中断进行保护 */
000016  4806              LDR      r0,|L7.48|
000018  6804              LDR      r4,[r0,#0]  ; g_iRunTime
;;;423    
;;;424    	ENABLE_INT();  		/* 开中断 */
00001a  bf00              NOP      
00001c  f7fffffe          BL       CPU_IntDisMeasStop
000020  bf00              NOP      
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       CPU_SR_Restore
000028  bf00              NOP      
00002a  bf00              NOP      
;;;425    
;;;426    	return runtime;
00002c  4620              MOV      r0,r4
;;;427    }
00002e  bd70              POP      {r4-r6,pc}
;;;428    
                          ENDP

                  |L7.48|
                          DCD      g_iRunTime

                          AREA ||i.bsp_InitHardTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitHardTimer PROC
;;;502    #if defined (USE_TIM2) || defined (USE_TIM3)  || defined (USE_TIM4)	|| defined (USE_TIM5)
;;;503    void bsp_InitHardTimer(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;504    {
;;;505    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;506    	uint32_t usPeriod;
;;;507    	uint16_t usPrescaler;
;;;508    	uint32_t uiTIMxCLK;
;;;509    
;;;510      	/* 使能TIM时钟 */
;;;511    	RCC_APB1PeriphClockCmd(TIM_HARD_RCC, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;512    
;;;513        /*-----------------------------------------------------------------------
;;;514    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;515    
;;;516    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;517    		PCLK2 = HCLK / 2      (APB2Periph)
;;;518    		PCLK1 = HCLK / 4      (APB1Periph)
;;;519    
;;;520    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;521    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;522    
;;;523    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13,TIM14
;;;524    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;525    
;;;526    	----------------------------------------------------------------------- */
;;;527    	uiTIMxCLK = SystemCoreClock / 2;
00000a  4815              LDR      r0,|L8.96|
00000c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000e  0846              LSRS     r6,r0,#1
;;;528    
;;;529    	usPrescaler = uiTIMxCLK / 1000000 ;	/* 分频到周期 1us */
000010  4814              LDR      r0,|L8.100|
000012  fbb6f0f0          UDIV     r0,r6,r0
000016  b285              UXTH     r5,r0
;;;530    	
;;;531    #if defined (USE_TIM2) || defined (USE_TIM5) 
;;;532    	//usPeriod = 0xFFFFFFFF;	/* 407支持32位定时器 */
;;;533    	usPeriod = 0xFFFF;	/* 103支持16位 */
000018  f64f74ff          MOV      r4,#0xffff
;;;534    #else
;;;535    	usPeriod = 0xFFFF;
;;;536    #endif
;;;537    	/* Time base configuration */
;;;538    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
00001c  f8ad4008          STRH     r4,[sp,#8]
;;;539    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
000020  f8ad5004          STRH     r5,[sp,#4]
;;;540    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
000024  2000              MOVS     r0,#0
000026  f8ad000a          STRH     r0,[sp,#0xa]
;;;541    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
00002a  f8ad0006          STRH     r0,[sp,#6]
;;;542    
;;;543    	TIM_TimeBaseInit(TIM_HARD, &TIM_TimeBaseStructure);
00002e  a901              ADD      r1,sp,#4
000030  f04f4080          MOV      r0,#0x40000000
000034  f7fffffe          BL       TIM_TimeBaseInit
;;;544    
;;;545    	//TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;546    
;;;547    	/* TIMx enable counter */
;;;548    	TIM_Cmd(TIM_HARD, ENABLE);
000038  2101              MOVS     r1,#1
00003a  0788              LSLS     r0,r1,#30
00003c  f7fffffe          BL       TIM_Cmd
;;;549    
;;;550    	/* 配置TIM定时中断 (Update) */
;;;551    	{
;;;552    		NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;553    
;;;554    		NVIC_InitStructure.NVIC_IRQChannel = TIM_HARD_IRQn;
000040  201c              MOVS     r0,#0x1c
000042  f88d0000          STRB     r0,[sp,#0]
;;;555    
;;;556    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 4;	/* 比串口优先级低 */
000046  2004              MOVS     r0,#4
000048  f88d0001          STRB     r0,[sp,#1]
;;;557    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00004c  2000              MOVS     r0,#0
00004e  f88d0002          STRB     r0,[sp,#2]
;;;558    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000052  2001              MOVS     r0,#1
000054  f88d0003          STRB     r0,[sp,#3]
;;;559    		NVIC_Init(&NVIC_InitStructure);
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       NVIC_Init
;;;560    	}
;;;561    }
00005e  bd7f              POP      {r0-r6,pc}
;;;562    
                          ENDP

                  |L8.96|
                          DCD      SystemCoreClock
                  |L8.100|
                          DCD      0x000f4240

                          AREA ||i.bsp_InitTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitTimer PROC
;;;90     */
;;;91     void bsp_InitTimer(void)
000000  b570              PUSH     {r4-r6,lr}
;;;92     {
;;;93     	uint8_t i;
;;;94     
;;;95     	/* 清零所有的软件定时器 */
;;;96     	for (i = 0; i < TMR_COUNT; i++)
000002  2400              MOVS     r4,#0
000004  e016              B        |L9.52|
                  |L9.6|
;;;97     	{
;;;98     		s_tTmr[i].Count = 0;
000006  2000              MOVS     r0,#0
000008  eb040144          ADD      r1,r4,r4,LSL #1
00000c  4a1f              LDR      r2,|L9.140|
00000e  eb020181          ADD      r1,r2,r1,LSL #2
000012  6048              STR      r0,[r1,#4]
;;;99     		s_tTmr[i].PreLoad = 0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
000018  eb020181          ADD      r1,r2,r1,LSL #2
00001c  6088              STR      r0,[r1,#8]
;;;100    		s_tTmr[i].Flag = 0;
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  eb020181          ADD      r1,r2,r1,LSL #2
000026  7048              STRB     r0,[r1,#1]
;;;101    		s_tTmr[i].Mode = TMR_ONCE_MODE;	/* 缺省是1次性工作模式 */
000028  eb040144          ADD      r1,r4,r4,LSL #1
00002c  f8020021          STRB     r0,[r2,r1,LSL #2]
000030  1c60              ADDS     r0,r4,#1              ;96
000032  b2c4              UXTB     r4,r0                 ;96
                  |L9.52|
000034  2c14              CMP      r4,#0x14              ;96
000036  dbe6              BLT      |L9.6|
;;;102    	}
;;;103    
;;;104    	/*
;;;105    		配置systic中断周期为1ms，并启动systick中断。
;;;106    
;;;107        	SystemCoreClock 是固件中定义的系统内核时钟，对于STM32F4XX,一般为 168MHz
;;;108    
;;;109        	SysTick_Config() 函数的形参表示内核时钟多少个周期后触发一次Systick定时中断.
;;;110    	    	-- SystemCoreClock / 1000  表示定时频率为 1000Hz， 也就是定时周期为  1ms
;;;111    	    	-- SystemCoreClock / 500   表示定时频率为 500Hz，  也就是定时周期为  2ms
;;;112    	    	-- SystemCoreClock / 2000  表示定时频率为 2000Hz， 也就是定时周期为  500us
;;;113    
;;;114        	对于常规的应用，我们一般取定时周期1ms。对于低速CPU或者低功耗应用，可以设置定时周期为 10ms
;;;115        */
;;;116    	SysTick_Config(SystemCoreClock / 1000);
000038  4815              LDR      r0,|L9.144|
00003a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00003c  f44f727a          MOV      r2,#0x3e8
000040  fbb0f1f2          UDIV     r1,r0,r2
000044  f1b17f80          CMP      r1,#0x1000000
000048  d300              BCC      |L9.76|
00004a  e01b              B        |L9.132|
                  |L9.76|
00004c  f021407f          BIC      r0,r1,#0xff000000
000050  1e40              SUBS     r0,r0,#1
000052  f04f22e0          MOV      r2,#0xe000e000
000056  6150              STR      r0,[r2,#0x14]
000058  1750              ASRS     r0,r2,#29
00005a  220f              MOVS     r2,#0xf
00005c  2800              CMP      r0,#0
00005e  da06              BGE      |L9.110|
000060  0113              LSLS     r3,r2,#4
000062  4d0c              LDR      r5,|L9.148|
000064  f000060f          AND      r6,r0,#0xf
000068  1f36              SUBS     r6,r6,#4
00006a  55ab              STRB     r3,[r5,r6]
00006c  e002              B        |L9.116|
                  |L9.110|
00006e  0113              LSLS     r3,r2,#4
000070  4d09              LDR      r5,|L9.152|
000072  542b              STRB     r3,[r5,r0]
                  |L9.116|
000074  bf00              NOP      
000076  2000              MOVS     r0,#0
000078  f04f22e0          MOV      r2,#0xe000e000
00007c  6190              STR      r0,[r2,#0x18]
00007e  2007              MOVS     r0,#7
000080  6110              STR      r0,[r2,#0x10]
000082  bf00              NOP      
                  |L9.132|
;;;117    	
;;;118    #if defined (USE_TIM2) || defined (USE_TIM3)  || defined (USE_TIM4)	|| defined (USE_TIM5)
;;;119    	bsp_InitHardTimer();
000084  f7fffffe          BL       bsp_InitHardTimer
;;;120    #endif
;;;121    }
000088  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP

00008a  0000              DCW      0x0000
                  |L9.140|
                          DCD      s_tTmr
                  |L9.144|
                          DCD      SystemCoreClock
                  |L9.148|
                          DCD      0xe000ed18
                  |L9.152|
                          DCD      0xe000e400

                          AREA ||i.bsp_SoftTimerDec||, CODE, READONLY, ALIGN=1

                  bsp_SoftTimerDec PROC
;;;181    */
;;;182    static void bsp_SoftTimerDec(SOFT_TMR *_tmr)
000000  6841              LDR      r1,[r0,#4]
;;;183    {
;;;184    	if (_tmr->Count > 0)
000002  b151              CBZ      r1,|L10.26|
;;;185    	{
;;;186    		/* 如果定时器变量减到1则设置定时器到达标志 */
;;;187    		if (--_tmr->Count == 0)
000004  6841              LDR      r1,[r0,#4]
000006  1e49              SUBS     r1,r1,#1
000008  6041              STR      r1,[r0,#4]
00000a  d106              BNE      |L10.26|
;;;188    		{
;;;189    			_tmr->Flag = 1;
00000c  2101              MOVS     r1,#1
00000e  7041              STRB     r1,[r0,#1]
;;;190    
;;;191    			/* 如果是自动模式，则自动重装计数器 */
;;;192    			if(_tmr->Mode == TMR_AUTO_MODE)
000010  7801              LDRB     r1,[r0,#0]
000012  2901              CMP      r1,#1
000014  d101              BNE      |L10.26|
;;;193    			{
;;;194    				_tmr->Count = _tmr->PreLoad;
000016  6881              LDR      r1,[r0,#8]
000018  6041              STR      r1,[r0,#4]
                  |L10.26|
;;;195    			}
;;;196    		}
;;;197    	}
;;;198    }
00001a  4770              BX       lr
;;;199    
                          ENDP


                          AREA ||i.bsp_StartAutoTimer||, CODE, READONLY, ALIGN=2

                  bsp_StartAutoTimer PROC
;;;330    */
;;;331    void bsp_StartAutoTimer(uint8_t _id, uint32_t _period)
000000  b570              PUSH     {r4-r6,lr}
;;;332    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;333    #if uCOS_EN == 1 
;;;334    	CPU_SR_ALLOC();
000006  2600              MOVS     r6,#0
;;;335    #endif
;;;336    	if (_id >= TMR_COUNT)
000008  2c14              CMP      r4,#0x14
00000a  db01              BLT      |L11.16|
;;;337    	{
;;;338    		while(1); /* 参数异常，死机等待看门狗复位 */
00000c  bf00              NOP      
                  |L11.14|
00000e  e7fe              B        |L11.14|
                  |L11.16|
;;;339    	}
;;;340    
;;;341    	DISABLE_INT();  		/* 关中断 */
000010  bf00              NOP      
000012  bf00              NOP      
000014  f7fffffe          BL       CPU_SR_Save
000018  4606              MOV      r6,r0
00001a  bf00              NOP      
00001c  f7fffffe          BL       CPU_IntDisMeasStart
000020  bf00              NOP      
;;;342    
;;;343    	s_tTmr[_id].Count = _period;			/* 实时计数器初值 */
000022  eb040044          ADD      r0,r4,r4,LSL #1
000026  490f              LDR      r1,|L11.100|
000028  eb010080          ADD      r0,r1,r0,LSL #2
00002c  6045              STR      r5,[r0,#4]
;;;344    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
00002e  eb040044          ADD      r0,r4,r4,LSL #1
000032  eb010080          ADD      r0,r1,r0,LSL #2
000036  6085              STR      r5,[r0,#8]
;;;345    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000038  2000              MOVS     r0,#0
00003a  eb040144          ADD      r1,r4,r4,LSL #1
00003e  4a09              LDR      r2,|L11.100|
000040  eb020181          ADD      r1,r2,r1,LSL #2
000044  7048              STRB     r0,[r1,#1]
;;;346    	s_tTmr[_id].Mode = TMR_AUTO_MODE;	/* 自动工作模式 */
000046  2001              MOVS     r0,#1
000048  eb040144          ADD      r1,r4,r4,LSL #1
00004c  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;347    
;;;348    	ENABLE_INT();  			/* 开中断 */
000050  bf00              NOP      
000052  f7fffffe          BL       CPU_IntDisMeasStop
000056  bf00              NOP      
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       CPU_SR_Restore
00005e  bf00              NOP      
000060  bf00              NOP      
;;;349    }
000062  bd70              POP      {r4-r6,pc}
;;;350    
                          ENDP

                  |L11.100|
                          DCD      s_tTmr

                          AREA ||i.bsp_StartHardTimer||, CODE, READONLY, ALIGN=2

                  bsp_StartHardTimer PROC
;;;575    */
;;;576    void bsp_StartHardTimer(uint8_t _CC, uint32_t _uiTimeOut, void * _pCallBack)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;577    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;578        uint32_t cnt_now;
;;;579        uint32_t cnt_tar;
;;;580    
;;;581        /*
;;;582            执行下面这个语句，时长 = 18us (通过逻辑分析仪测量IO翻转)
;;;583            bsp_StartTimer2(3, 500, (void *)test1);
;;;584        */
;;;585        if (_uiTimeOut < 5)
00000a  2f05              CMP      r7,#5
00000c  d300              BCC      |L12.16|
;;;586        {
;;;587            ;
;;;588        }
;;;589        else
;;;590        {
;;;591            _uiTimeOut -= 5;
00000e  1f7f              SUBS     r7,r7,#5
                  |L12.16|
;;;592        }
;;;593    
;;;594        cnt_now = TIM_GetCounter(TIM_HARD);    	/* 读取当前的计数器值 */
000010  f04f4080          MOV      r0,#0x40000000
000014  f7fffffe          BL       TIM_GetCounter
000018  4680              MOV      r8,r0
;;;595        cnt_tar = cnt_now + _uiTimeOut;			/* 计算捕获的计数器值 */
00001a  eb080607          ADD      r6,r8,r7
;;;596        if (_CC == 1)
00001e  2c01              CMP      r4,#1
000020  d10f              BNE      |L12.66|
;;;597        {
;;;598            s_TIM_CallBack1 = (void (*)(void))_pCallBack;
000022  4825              LDR      r0,|L12.184|
000024  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack1
;;;599    
;;;600            TIM_SetCompare1(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC1 */
000026  b2b1              UXTH     r1,r6
000028  07a0              LSLS     r0,r4,#30
00002a  f7fffffe          BL       TIM_SetCompare1
;;;601            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC1);
00002e  2102              MOVS     r1,#2
000030  0748              LSLS     r0,r1,#29
000032  f7fffffe          BL       TIM_ClearITPendingBit
;;;602    		TIM_ITConfig(TIM_HARD, TIM_IT_CC1, ENABLE);	/* 使能CC1中断 */
000036  2201              MOVS     r2,#1
000038  2102              MOVS     r1,#2
00003a  0748              LSLS     r0,r1,#29
00003c  f7fffffe          BL       TIM_ITConfig
000040  e038              B        |L12.180|
                  |L12.66|
;;;603    
;;;604        }
;;;605        else if (_CC == 2)
000042  2c02              CMP      r4,#2
000044  d10f              BNE      |L12.102|
;;;606        {
;;;607    		s_TIM_CallBack2 = (void (*)(void))_pCallBack;
000046  481d              LDR      r0,|L12.188|
000048  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack2
;;;608    
;;;609            TIM_SetCompare2(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC2 */
00004a  b2b1              UXTH     r1,r6
00004c  0760              LSLS     r0,r4,#29
00004e  f7fffffe          BL       TIM_SetCompare2
;;;610    		TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC2);
000052  2104              MOVS     r1,#4
000054  0708              LSLS     r0,r1,#28
000056  f7fffffe          BL       TIM_ClearITPendingBit
;;;611    		TIM_ITConfig(TIM_HARD, TIM_IT_CC2, ENABLE);	/* 使能CC2中断 */
00005a  2201              MOVS     r2,#1
00005c  2104              MOVS     r1,#4
00005e  0708              LSLS     r0,r1,#28
000060  f7fffffe          BL       TIM_ITConfig
000064  e026              B        |L12.180|
                  |L12.102|
;;;612        }
;;;613        else if (_CC == 3)
000066  2c03              CMP      r4,#3
000068  d110              BNE      |L12.140|
;;;614        {
;;;615            s_TIM_CallBack3 = (void (*)(void))_pCallBack;
00006a  4815              LDR      r0,|L12.192|
00006c  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack3
;;;616    
;;;617            TIM_SetCompare3(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC3 */
00006e  b2b1              UXTH     r1,r6
000070  f04f4080          MOV      r0,#0x40000000
000074  f7fffffe          BL       TIM_SetCompare3
;;;618            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC3);
000078  2108              MOVS     r1,#8
00007a  06c8              LSLS     r0,r1,#27
00007c  f7fffffe          BL       TIM_ClearITPendingBit
;;;619    		TIM_ITConfig(TIM_HARD, TIM_IT_CC3, ENABLE);	/* 使能CC3中断 */
000080  2201              MOVS     r2,#1
000082  2108              MOVS     r1,#8
000084  06c8              LSLS     r0,r1,#27
000086  f7fffffe          BL       TIM_ITConfig
00008a  e013              B        |L12.180|
                  |L12.140|
;;;620        }
;;;621        else if (_CC == 4)
00008c  2c04              CMP      r4,#4
00008e  d10f              BNE      |L12.176|
;;;622        {
;;;623            s_TIM_CallBack4 = (void (*)(void))_pCallBack;
000090  480c              LDR      r0,|L12.196|
000092  6005              STR      r5,[r0,#0]  ; s_TIM_CallBack4
;;;624    
;;;625            TIM_SetCompare4(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC4 */
000094  b2b1              UXTH     r1,r6
000096  0720              LSLS     r0,r4,#28
000098  f7fffffe          BL       TIM_SetCompare4
;;;626    		TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC4);
00009c  2110              MOVS     r1,#0x10
00009e  0688              LSLS     r0,r1,#26
0000a0  f7fffffe          BL       TIM_ClearITPendingBit
;;;627    		TIM_ITConfig(TIM_HARD, TIM_IT_CC4, ENABLE);	/* 使能CC4中断 */
0000a4  2201              MOVS     r2,#1
0000a6  2110              MOVS     r1,#0x10
0000a8  0688              LSLS     r0,r1,#26
0000aa  f7fffffe          BL       TIM_ITConfig
0000ae  e001              B        |L12.180|
                  |L12.176|
;;;628        }
;;;629    	else
;;;630        {
;;;631            return;
;;;632        }
;;;633    }
0000b0  e8bd81f0          POP      {r4-r8,pc}
                  |L12.180|
0000b4  bf00              NOP      
0000b6  e7fb              B        |L12.176|
;;;634    #endif
                          ENDP

                  |L12.184|
                          DCD      s_TIM_CallBack1
                  |L12.188|
                          DCD      s_TIM_CallBack2
                  |L12.192|
                          DCD      s_TIM_CallBack3
                  |L12.196|
                          DCD      s_TIM_CallBack4

                          AREA ||i.bsp_StartTimer||, CODE, READONLY, ALIGN=2

                  bsp_StartTimer PROC
;;;301    */
;;;302    void bsp_StartTimer(uint8_t _id, uint32_t _period)
000000  b570              PUSH     {r4-r6,lr}
;;;303    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;304    #if uCOS_EN == 1 
;;;305    	CPU_SR_ALLOC();
000006  2600              MOVS     r6,#0
;;;306    #endif
;;;307    	if (_id >= TMR_COUNT)
000008  2c14              CMP      r4,#0x14
00000a  db01              BLT      |L13.16|
;;;308    	{
;;;309    		while(1); /* 参数异常，死机等待看门狗复位 */
00000c  bf00              NOP      
                  |L13.14|
00000e  e7fe              B        |L13.14|
                  |L13.16|
;;;310    	}
;;;311    
;;;312    	DISABLE_INT();  			/* 关中断 */
000010  bf00              NOP      
000012  bf00              NOP      
000014  f7fffffe          BL       CPU_SR_Save
000018  4606              MOV      r6,r0
00001a  bf00              NOP      
00001c  f7fffffe          BL       CPU_IntDisMeasStart
000020  bf00              NOP      
;;;313    
;;;314    	s_tTmr[_id].Count = _period;		/* 实时计数器初值 */
000022  eb040044          ADD      r0,r4,r4,LSL #1
000026  490f              LDR      r1,|L13.100|
000028  eb010080          ADD      r0,r1,r0,LSL #2
00002c  6045              STR      r5,[r0,#4]
;;;315    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
00002e  eb040044          ADD      r0,r4,r4,LSL #1
000032  eb010080          ADD      r0,r1,r0,LSL #2
000036  6085              STR      r5,[r0,#8]
;;;316    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000038  2000              MOVS     r0,#0
00003a  eb040144          ADD      r1,r4,r4,LSL #1
00003e  4a09              LDR      r2,|L13.100|
000040  eb020181          ADD      r1,r2,r1,LSL #2
000044  7048              STRB     r0,[r1,#1]
;;;317    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 1次性工作模式 */
000046  eb040144          ADD      r1,r4,r4,LSL #1
00004a  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;318    
;;;319    	ENABLE_INT();  				/* 开中断 */
00004e  bf00              NOP      
000050  f7fffffe          BL       CPU_IntDisMeasStop
000054  bf00              NOP      
000056  4630              MOV      r0,r6
000058  f7fffffe          BL       CPU_SR_Restore
00005c  bf00              NOP      
00005e  bf00              NOP      
;;;320    }
000060  bd70              POP      {r4-r6,pc}
;;;321    
                          ENDP

000062  0000              DCW      0x0000
                  |L13.100|
                          DCD      s_tTmr

                          AREA ||i.bsp_StopTimer||, CODE, READONLY, ALIGN=2

                  bsp_StopTimer PROC
;;;358    */
;;;359    void bsp_StopTimer(uint8_t _id)
000000  b570              PUSH     {r4-r6,lr}
;;;360    {
000002  4604              MOV      r4,r0
;;;361    #if uCOS_EN == 1 
;;;362    	CPU_SR_ALLOC();
000004  2500              MOVS     r5,#0
;;;363    #endif
;;;364    	if (_id >= TMR_COUNT)
000006  2c14              CMP      r4,#0x14
000008  db01              BLT      |L14.14|
;;;365    	{
;;;366    		while(1); /* 参数异常，死机等待看门狗复位 */
00000a  bf00              NOP      
                  |L14.12|
00000c  e7fe              B        |L14.12|
                  |L14.14|
;;;367    	}
;;;368    
;;;369    	DISABLE_INT();  	/* 关中断 */
00000e  bf00              NOP      
000010  bf00              NOP      
000012  f7fffffe          BL       CPU_SR_Save
000016  4605              MOV      r5,r0
000018  bf00              NOP      
00001a  f7fffffe          BL       CPU_IntDisMeasStart
00001e  bf00              NOP      
;;;370    
;;;371    	s_tTmr[_id].Count = 0;				/* 实时计数器初值 */
000020  2000              MOVS     r0,#0
000022  eb040144          ADD      r1,r4,r4,LSL #1
000026  4a0b              LDR      r2,|L14.84|
000028  eb020181          ADD      r1,r2,r1,LSL #2
00002c  6048              STR      r0,[r1,#4]
;;;372    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
00002e  eb040144          ADD      r1,r4,r4,LSL #1
000032  eb020181          ADD      r1,r2,r1,LSL #2
000036  7048              STRB     r0,[r1,#1]
;;;373    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 自动工作模式 */
000038  eb040144          ADD      r1,r4,r4,LSL #1
00003c  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;374    
;;;375    	ENABLE_INT();  		/* 开中断 */
000040  bf00              NOP      
000042  f7fffffe          BL       CPU_IntDisMeasStop
000046  bf00              NOP      
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       CPU_SR_Restore
00004e  bf00              NOP      
000050  bf00              NOP      
;;;376    }
000052  bd70              POP      {r4-r6,pc}
;;;377    
                          ENDP

                  |L14.84|
                          DCD      s_tTmr

                          AREA ||i.timing||, CODE, READONLY, ALIGN=2

                  timing PROC
;;;470    */
;;;471    uint8_t timing(uint32_t starting_time, uint32_t interval)
000000  4602              MOV      r2,r0
;;;472    {
;;;473    	if(g_iRunTime-starting_time>interval)	return TRUE;
000002  4804              LDR      r0,|L15.20|
000004  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000006  1a80              SUBS     r0,r0,r2
000008  4288              CMP      r0,r1
00000a  d901              BLS      |L15.16|
00000c  2001              MOVS     r0,#1
                  |L15.14|
;;;474    	else									                return FALSE;
;;;475    }
00000e  4770              BX       lr
                  |L15.16|
000010  2000              MOVS     r0,#0                 ;474
000012  e7fc              B        |L15.14|
;;;476    
                          ENDP

                  |L15.20|
                          DCD      g_iRunTime

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tTmr
                          %        240

                          AREA ||.data||, DATA, ALIGN=2

                  s_uiDelayCount
                          DCD      0x00000000
                  s_ucTimeOutFlag
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  g_iRunTime
                          DCD      0x00000000
                  s_count
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  s_TIM_CallBack1
                          DCD      0x00000000
                  s_TIM_CallBack2
                          DCD      0x00000000
                  s_TIM_CallBack3
                          DCD      0x00000000
                  s_TIM_CallBack4
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_timer.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_timer_c_95bb07ef____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REVSH|
#line 128
|__asm___11_bsp_timer_c_95bb07ef____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
