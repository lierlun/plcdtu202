; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\stm32f10x_spi.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\stm32f10x_spi.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -I..\..\Malloc -I..\..\User\Modbus -Id:\Keil_v4\ARM\RV31\INC -Id:\Keil_v4\ARM\CMSIS\Include -Id:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Flash\Obj\stm32f10x_spi.crf ..\..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_spi.c]
                          THUMB

                          AREA ||i.I2S_Cmd||, CODE, READONLY, ALIGN=1

                  I2S_Cmd PROC
;;;456      */
;;;457    void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L1.12|
;;;458    {
;;;459      /* Check the parameters */
;;;460      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;461      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;462      if (NewState != DISABLE)
;;;463      {
;;;464        /* Enable the selected SPI peripheral (in I2S mode) */
;;;465        SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
000002  8b82              LDRH     r2,[r0,#0x1c]
000004  f4426280          ORR      r2,r2,#0x400
000008  8382              STRH     r2,[r0,#0x1c]
00000a  e004              B        |L1.22|
                  |L1.12|
;;;466      }
;;;467      else
;;;468      {
;;;469        /* Disable the selected SPI peripheral (in I2S mode) */
;;;470        SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
00000c  8b82              LDRH     r2,[r0,#0x1c]
00000e  f64f33ff          MOV      r3,#0xfbff
000012  401a              ANDS     r2,r2,r3
000014  8382              STRH     r2,[r0,#0x1c]
                  |L1.22|
;;;471      }
;;;472    }
000016  4770              BX       lr
;;;473    
                          ENDP


                          AREA ||i.I2S_Init||, CODE, READONLY, ALIGN=2

                  I2S_Init PROC
;;;224      */
;;;225    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;226    {
000004  b085              SUB      sp,sp,#0x14
000006  4605              MOV      r5,r0
000008  460c              MOV      r4,r1
;;;227      uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
00000a  f04f0900          MOV      r9,#0
00000e  2702              MOVS     r7,#2
000010  f04f0800          MOV      r8,#0
000014  f04f0b01          MOV      r11,#1
;;;228      uint32_t tmp = 0;
000018  2600              MOVS     r6,#0
;;;229      RCC_ClocksTypeDef RCC_Clocks;
;;;230      uint32_t sourceclock = 0;
00001a  46b2              MOV      r10,r6
;;;231      
;;;232      /* Check the I2S parameters */
;;;233      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;234      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;235      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;236      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;237      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
;;;238      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
;;;239      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;240    
;;;241    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;242      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;243      SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
00001c  8ba8              LDRH     r0,[r5,#0x1c]
00001e  f24f0140          MOV      r1,#0xf040
000022  4008              ANDS     r0,r0,r1
000024  83a8              STRH     r0,[r5,#0x1c]
;;;244      SPIx->I2SPR = 0x0002;
000026  2002              MOVS     r0,#2
000028  8428              STRH     r0,[r5,#0x20]
;;;245      
;;;246      /* Get the I2SCFGR register value */
;;;247      tmpreg = SPIx->I2SCFGR;
00002a  f8b5901c          LDRH     r9,[r5,#0x1c]
;;;248      
;;;249      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;250      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
00002e  68a0              LDR      r0,[r4,#8]
000030  2802              CMP      r0,#2
000032  d101              BNE      |L2.56|
;;;251      {
;;;252        i2sodd = (uint16_t)0;
000034  bf00              NOP      
;;;253        i2sdiv = (uint16_t)2;   
000036  e038              B        |L2.170|
                  |L2.56|
;;;254      }
;;;255      /* If the requested audio frequency is not the default, compute the prescaler */
;;;256      else
;;;257      {
;;;258        /* Check the frame length (For the Prescaler computing) */
;;;259        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
000038  88a0              LDRH     r0,[r4,#4]
00003a  b910              CBNZ     r0,|L2.66|
;;;260        {
;;;261          /* Packet length is 16 bits */
;;;262          packetlength = 1;
00003c  f04f0b01          MOV      r11,#1
000040  e001              B        |L2.70|
                  |L2.66|
;;;263        }
;;;264        else
;;;265        {
;;;266          /* Packet length is 32 bits */
;;;267          packetlength = 2;
000042  f04f0b02          MOV      r11,#2
                  |L2.70|
;;;268        }
;;;269    
;;;270        /* Get the I2S clock source mask depending on the peripheral number */
;;;271        if(((uint32_t)SPIx) == SPI2_BASE)
000046  4827              LDR      r0,|L2.228|
000048  4285              CMP      r5,r0
00004a  d100              BNE      |L2.78|
;;;272        {
;;;273          /* The mask is relative to I2S2 */
;;;274          tmp = I2S2_CLOCK_SRC;
00004c  e000              B        |L2.80|
                  |L2.78|
;;;275        }
;;;276        else 
;;;277        {
;;;278          /* The mask is relative to I2S3 */      
;;;279          tmp = I2S3_CLOCK_SRC;
00004e  bf00              NOP      
                  |L2.80|
;;;280        }
;;;281    
;;;282        /* Check the I2S clock source configuration depending on the Device:
;;;283           Only Connectivity line devices have the PLL3 VCO clock */
;;;284    #ifdef STM32F10X_CL
;;;285        if((RCC->CFGR2 & tmp) != 0)
;;;286        {
;;;287          /* Get the configuration bits of RCC PLL3 multiplier */
;;;288          tmp = (uint32_t)((RCC->CFGR2 & I2S_MUL_MASK) >> 12);
;;;289    
;;;290          /* Get the value of the PLL3 multiplier */      
;;;291          if((tmp > 5) && (tmp < 15))
;;;292          {
;;;293            /* Multiplier is between 8 and 14 (value 15 is forbidden) */
;;;294            tmp += 2;
;;;295          }
;;;296          else
;;;297          {
;;;298            if (tmp == 15)
;;;299            {
;;;300              /* Multiplier is 20 */
;;;301              tmp = 20;
;;;302            }
;;;303          }      
;;;304          /* Get the PREDIV2 value */
;;;305          sourceclock = (uint32_t)(((RCC->CFGR2 & I2S_DIV_MASK) >> 4) + 1);
;;;306          
;;;307          /* Calculate the Source Clock frequency based on PLL3 and PREDIV2 values */
;;;308          sourceclock = (uint32_t) ((HSE_Value / sourceclock) * tmp * 2); 
;;;309        }
;;;310        else
;;;311        {
;;;312          /* I2S Clock source is System clock: Get System Clock frequency */
;;;313          RCC_GetClocksFreq(&RCC_Clocks);      
;;;314          
;;;315          /* Get the source clock value: based on System Clock value */
;;;316          sourceclock = RCC_Clocks.SYSCLK_Frequency;
;;;317        }        
;;;318    #else /* STM32F10X_HD */
;;;319        /* I2S Clock source is System clock: Get System Clock frequency */
;;;320        RCC_GetClocksFreq(&RCC_Clocks);      
000050  4668              MOV      r0,sp
000052  f7fffffe          BL       RCC_GetClocksFreq
;;;321          
;;;322        /* Get the source clock value: based on System Clock value */
;;;323        sourceclock = RCC_Clocks.SYSCLK_Frequency;    
000056  f8dda000          LDR      r10,[sp,#0]
;;;324    #endif /* STM32F10X_CL */    
;;;325    
;;;326        /* Compute the Real divider depending on the MCLK output state with a floating point */
;;;327        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
00005a  88e0              LDRH     r0,[r4,#6]
00005c  f5b07f00          CMP      r0,#0x200
000060  d10a              BNE      |L2.120|
;;;328        {
;;;329          /* MCLK output is enabled */
;;;330          tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
000062  ea4f201a          LSR      r0,r10,#8
000066  eb000080          ADD      r0,r0,r0,LSL #2
00006a  0040              LSLS     r0,r0,#1
00006c  68a1              LDR      r1,[r4,#8]
00006e  fbb0f0f1          UDIV     r0,r0,r1
000072  1d40              ADDS     r0,r0,#5
000074  b286              UXTH     r6,r0
000076  e00b              B        |L2.144|
                  |L2.120|
;;;331        }
;;;332        else
;;;333        {
;;;334          /* MCLK output is disabled */
;;;335          tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
000078  ea4f104b          LSL      r0,r11,#5
00007c  fbbaf0f0          UDIV     r0,r10,r0
000080  eb000080          ADD      r0,r0,r0,LSL #2
000084  0040              LSLS     r0,r0,#1
000086  68a1              LDR      r1,[r4,#8]
000088  fbb0f0f1          UDIV     r0,r0,r1
00008c  1d40              ADDS     r0,r0,#5
00008e  b286              UXTH     r6,r0
                  |L2.144|
;;;336        }
;;;337        
;;;338        /* Remove the floating point */
;;;339        tmp = tmp / 10;  
000090  200a              MOVS     r0,#0xa
000092  fbb6f6f0          UDIV     r6,r6,r0
;;;340          
;;;341        /* Check the parity of the divider */
;;;342        i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
000096  f0060801          AND      r8,r6,#1
;;;343       
;;;344        /* Compute the i2sdiv prescaler */
;;;345        i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
00009a  eba60008          SUB      r0,r6,r8
00009e  f3c0074f          UBFX     r7,r0,#1,#16
;;;346       
;;;347        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;348        i2sodd = (uint16_t) (i2sodd << 8);
0000a2  f64f70ff          MOV      r0,#0xffff
0000a6  ea002808          AND      r8,r0,r8,LSL #8
                  |L2.170|
;;;349      }
;;;350      
;;;351      /* Test if the divider is 1 or 0 or greater than 0xFF */
;;;352      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
0000aa  2f02              CMP      r7,#2
0000ac  db01              BLT      |L2.178|
0000ae  2fff              CMP      r7,#0xff
0000b0  dd02              BLE      |L2.184|
                  |L2.178|
;;;353      {
;;;354        /* Set the default values */
;;;355        i2sdiv = 2;
0000b2  2702              MOVS     r7,#2
;;;356        i2sodd = 0;
0000b4  f04f0800          MOV      r8,#0
                  |L2.184|
;;;357      }
;;;358    
;;;359      /* Write to SPIx I2SPR register the computed value */
;;;360      SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
0000b8  88e0              LDRH     r0,[r4,#6]
0000ba  ea400008          ORR      r0,r0,r8
0000be  4338              ORRS     r0,r0,r7
0000c0  8428              STRH     r0,[r5,#0x20]
;;;361     
;;;362      /* Configure the I2S with the SPI_InitStruct values */
;;;363      tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
0000c2  88a0              LDRH     r0,[r4,#4]
0000c4  89a1              LDRH     r1,[r4,#0xc]
0000c6  4308              ORRS     r0,r0,r1
0000c8  8861              LDRH     r1,[r4,#2]
0000ca  4308              ORRS     r0,r0,r1
0000cc  8821              LDRH     r1,[r4,#0]
0000ce  4308              ORRS     r0,r0,r1
0000d0  f4406000          ORR      r0,r0,#0x800
0000d4  ea400909          ORR      r9,r0,r9
;;;364                      (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
;;;365                      (uint16_t)I2S_InitStruct->I2S_CPOL))));
;;;366     
;;;367      /* Write to SPIx I2SCFGR */  
;;;368      SPIx->I2SCFGR = tmpreg;   
0000d8  f8a5901c          STRH     r9,[r5,#0x1c]
;;;369    }
0000dc  b005              ADD      sp,sp,#0x14
0000de  e8bd8ff0          POP      {r4-r11,pc}
;;;370    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L2.228|
                          DCD      0x40003800

                          AREA ||i.I2S_StructInit||, CODE, READONLY, ALIGN=1

                  I2S_StructInit PROC
;;;403      */
;;;404    void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
000000  2100              MOVS     r1,#0
;;;405    {
;;;406    /*--------------- Reset I2S init structure parameters values -----------------*/
;;;407      /* Initialize the I2S_Mode member */
;;;408      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000002  8001              STRH     r1,[r0,#0]
;;;409      
;;;410      /* Initialize the I2S_Standard member */
;;;411      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000004  8041              STRH     r1,[r0,#2]
;;;412      
;;;413      /* Initialize the I2S_DataFormat member */
;;;414      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
000006  8081              STRH     r1,[r0,#4]
;;;415      
;;;416      /* Initialize the I2S_MCLKOutput member */
;;;417      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;418      
;;;419      /* Initialize the I2S_AudioFreq member */
;;;420      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00000a  2102              MOVS     r1,#2
00000c  6081              STR      r1,[r0,#8]
;;;421      
;;;422      /* Initialize the I2S_CPOL member */
;;;423      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
00000e  2100              MOVS     r1,#0
000010  8181              STRH     r1,[r0,#0xc]
;;;424    }
000012  4770              BX       lr
;;;425    
                          ENDP


                          AREA ||i.SPI_BiDirectionalLineConfig||, CODE, READONLY, ALIGN=1

                  SPI_BiDirectionalLineConfig PROC
;;;737      */
;;;738    void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
000000  f5b14f80          CMP      r1,#0x4000
;;;739    {
;;;740      /* Check the parameters */
;;;741      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;742      assert_param(IS_SPI_DIRECTION(SPI_Direction));
;;;743      if (SPI_Direction == SPI_Direction_Tx)
000004  d104              BNE      |L4.16|
;;;744      {
;;;745        /* Set the Tx only mode */
;;;746        SPIx->CR1 |= SPI_Direction_Tx;
000006  8802              LDRH     r2,[r0,#0]
000008  f4424280          ORR      r2,r2,#0x4000
00000c  8002              STRH     r2,[r0,#0]
00000e  e004              B        |L4.26|
                  |L4.16|
;;;747      }
;;;748      else
;;;749      {
;;;750        /* Set the Rx only mode */
;;;751        SPIx->CR1 &= SPI_Direction_Rx;
000010  8802              LDRH     r2,[r0,#0]
000012  f64b73ff          MOV      r3,#0xbfff
000016  401a              ANDS     r2,r2,r3
000018  8002              STRH     r2,[r0,#0]
                  |L4.26|
;;;752      }
;;;753    }
00001a  4770              BX       lr
;;;754    
                          ENDP


                          AREA ||i.SPI_CalculateCRC||, CODE, READONLY, ALIGN=1

                  SPI_CalculateCRC PROC
;;;668      */
;;;669    void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L5.12|
;;;670    {
;;;671      /* Check the parameters */
;;;672      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;673      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;674      if (NewState != DISABLE)
;;;675      {
;;;676        /* Enable the selected SPI CRC calculation */
;;;677        SPIx->CR1 |= CR1_CRCEN_Set;
000002  8802              LDRH     r2,[r0,#0]
000004  f4425200          ORR      r2,r2,#0x2000
000008  8002              STRH     r2,[r0,#0]
00000a  e004              B        |L5.22|
                  |L5.12|
;;;678      }
;;;679      else
;;;680      {
;;;681        /* Disable the selected SPI CRC calculation */
;;;682        SPIx->CR1 &= CR1_CRCEN_Reset;
00000c  8802              LDRH     r2,[r0,#0]
00000e  f64d73ff          MOV      r3,#0xdfff
000012  401a              ANDS     r2,r2,r3
000014  8002              STRH     r2,[r0,#0]
                  |L5.22|
;;;683      }
;;;684    }
000016  4770              BX       lr
;;;685    
                          ENDP


                          AREA ||i.SPI_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_Cmd PROC
;;;432      */
;;;433    void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L6.12|
;;;434    {
;;;435      /* Check the parameters */
;;;436      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;437      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;438      if (NewState != DISABLE)
;;;439      {
;;;440        /* Enable the selected SPI peripheral */
;;;441        SPIx->CR1 |= CR1_SPE_Set;
000002  8802              LDRH     r2,[r0,#0]
000004  f0420240          ORR      r2,r2,#0x40
000008  8002              STRH     r2,[r0,#0]
00000a  e004              B        |L6.22|
                  |L6.12|
;;;442      }
;;;443      else
;;;444      {
;;;445        /* Disable the selected SPI peripheral */
;;;446        SPIx->CR1 &= CR1_SPE_Reset;
00000c  8802              LDRH     r2,[r0,#0]
00000e  f64f73bf          MOV      r3,#0xffbf
000012  401a              ANDS     r2,r2,r3
000014  8002              STRH     r2,[r0,#0]
                  |L6.22|
;;;447      }
;;;448    }
000016  4770              BX       lr
;;;449    
                          ENDP


                          AREA ||i.SPI_DataSizeConfig||, CODE, READONLY, ALIGN=1

                  SPI_DataSizeConfig PROC
;;;636      */
;;;637    void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
000000  8802              LDRH     r2,[r0,#0]
;;;638    {
;;;639      /* Check the parameters */
;;;640      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;641      assert_param(IS_SPI_DATASIZE(SPI_DataSize));
;;;642      /* Clear DFF bit */
;;;643      SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
000002  f24f73ff          MOV      r3,#0xf7ff
000006  401a              ANDS     r2,r2,r3
000008  8002              STRH     r2,[r0,#0]
;;;644      /* Set new DFF bit value */
;;;645      SPIx->CR1 |= SPI_DataSize;
00000a  8802              LDRH     r2,[r0,#0]
00000c  430a              ORRS     r2,r2,r1
00000e  8002              STRH     r2,[r0,#0]
;;;646    }
000010  4770              BX       lr
;;;647    
                          ENDP


                          AREA ||i.SPI_GetCRC||, CODE, READONLY, ALIGN=1

                  SPI_GetCRC PROC
;;;694      */
;;;695    uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
000000  4602              MOV      r2,r0
;;;696    {
;;;697      uint16_t crcreg = 0;
000002  2000              MOVS     r0,#0
;;;698      /* Check the parameters */
;;;699      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;700      assert_param(IS_SPI_CRC(SPI_CRC));
;;;701      if (SPI_CRC != SPI_CRC_Rx)
000004  2901              CMP      r1,#1
000006  d001              BEQ      |L8.12|
;;;702      {
;;;703        /* Get the Tx CRC register */
;;;704        crcreg = SPIx->TXCRCR;
000008  8b10              LDRH     r0,[r2,#0x18]
00000a  e000              B        |L8.14|
                  |L8.12|
;;;705      }
;;;706      else
;;;707      {
;;;708        /* Get the Rx CRC register */
;;;709        crcreg = SPIx->RXCRCR;
00000c  8a90              LDRH     r0,[r2,#0x14]
                  |L8.14|
;;;710      }
;;;711      /* Return the selected CRC register */
;;;712      return crcreg;
;;;713    }
00000e  4770              BX       lr
;;;714    
                          ENDP


                          AREA ||i.SPI_GetCRCPolynomial||, CODE, READONLY, ALIGN=1

                  SPI_GetCRCPolynomial PROC
;;;719      */
;;;720    uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
000000  4601              MOV      r1,r0
;;;721    {
;;;722      /* Check the parameters */
;;;723      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;724      
;;;725      /* Return the CRC polynomial register */
;;;726      return SPIx->CRCPR;
000002  8a08              LDRH     r0,[r1,#0x10]
;;;727    }
000004  4770              BX       lr
;;;728    
                          ENDP


                          AREA ||i.SPI_I2S_ClearFlag||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearFlag PROC
;;;809      */
;;;810    void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  43ca              MVNS     r2,r1
;;;811    {
;;;812      /* Check the parameters */
;;;813      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;814      assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
;;;815        
;;;816        /* Clear the selected SPI CRC Error (CRCERR) flag */
;;;817        SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
000002  8102              STRH     r2,[r0,#8]
;;;818    }
000004  4770              BX       lr
;;;819    
                          ENDP


                          AREA ||i.SPI_I2S_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearITPendingBit PROC
;;;888      */
;;;889    void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b510              PUSH     {r4,lr}
;;;890    {
;;;891      uint16_t itpos = 0;
000002  2200              MOVS     r2,#0
;;;892      /* Check the parameters */
;;;893      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;894      assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
;;;895    
;;;896      /* Get the SPI IT index */
;;;897      itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000004  f001040f          AND      r4,r1,#0xf
000008  2301              MOVS     r3,#1
00000a  40a3              LSLS     r3,r3,r4
00000c  b29a              UXTH     r2,r3
;;;898    
;;;899      /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
;;;900      SPIx->SR = (uint16_t)~itpos;
00000e  43d3              MVNS     r3,r2
000010  8103              STRH     r3,[r0,#8]
;;;901    }
000012  bd10              POP      {r4,pc}
;;;902    /**
                          ENDP


                          AREA ||i.SPI_I2S_DMACmd||, CODE, READONLY, ALIGN=1

                  SPI_I2S_DMACmd PROC
;;;526      */
;;;527    void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
000000  b11a              CBZ      r2,|L12.10|
;;;528    {
;;;529      /* Check the parameters */
;;;530      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;531      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;532      assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
;;;533      if (NewState != DISABLE)
;;;534      {
;;;535        /* Enable the selected SPI/I2S DMA requests */
;;;536        SPIx->CR2 |= SPI_I2S_DMAReq;
000002  8883              LDRH     r3,[r0,#4]
000004  430b              ORRS     r3,r3,r1
000006  8083              STRH     r3,[r0,#4]
000008  e002              B        |L12.16|
                  |L12.10|
;;;537      }
;;;538      else
;;;539      {
;;;540        /* Disable the selected SPI/I2S DMA requests */
;;;541        SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
00000a  8883              LDRH     r3,[r0,#4]
00000c  438b              BICS     r3,r3,r1
00000e  8083              STRH     r3,[r0,#4]
                  |L12.16|
;;;542      }
;;;543    }
000010  4770              BX       lr
;;;544    
                          ENDP


                          AREA ||i.SPI_I2S_DeInit||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DeInit PROC
;;;124      */
;;;125    void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;126    {
000002  4604              MOV      r4,r0
;;;127      /* Check the parameters */
;;;128      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;129    
;;;130      if (SPIx == SPI1)
000004  4811              LDR      r0,|L13.76|
000006  4284              CMP      r4,r0
000008  d108              BNE      |L13.28|
;;;131      {
;;;132        /* Enable SPI1 reset state */
;;;133        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  1480              ASRS     r0,r0,#18
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;134        /* Release SPI1 from reset state */
;;;135        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
000012  2100              MOVS     r1,#0
000014  14a0              ASRS     r0,r4,#18
000016  f7fffffe          BL       RCC_APB2PeriphResetCmd
00001a  e016              B        |L13.74|
                  |L13.28|
;;;136      }
;;;137      else if (SPIx == SPI2)
00001c  480c              LDR      r0,|L13.80|
00001e  4284              CMP      r4,r0
000020  d108              BNE      |L13.52|
;;;138      {
;;;139        /* Enable SPI2 reset state */
;;;140        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
000022  2101              MOVS     r1,#1
000024  1400              ASRS     r0,r0,#16
000026  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;141        /* Release SPI2 from reset state */
;;;142        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
00002a  2100              MOVS     r1,#0
00002c  1420              ASRS     r0,r4,#16
00002e  f7fffffe          BL       RCC_APB1PeriphResetCmd
000032  e00a              B        |L13.74|
                  |L13.52|
;;;143      }
;;;144      else
;;;145      {
;;;146        if (SPIx == SPI3)
000034  4807              LDR      r0,|L13.84|
000036  4284              CMP      r4,r0
000038  d107              BNE      |L13.74|
;;;147        {
;;;148          /* Enable SPI3 reset state */
;;;149          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  13c0              ASRS     r0,r0,#15
00003e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;150          /* Release SPI3 from reset state */
;;;151          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
000042  2100              MOVS     r1,#0
000044  13e0              ASRS     r0,r4,#15
000046  f7fffffe          BL       RCC_APB1PeriphResetCmd
                  |L13.74|
;;;152        }
;;;153      }
;;;154    }
00004a  bd10              POP      {r4,pc}
;;;155    
                          ENDP

                  |L13.76|
                          DCD      0x40013000
                  |L13.80|
                          DCD      0x40003800
                  |L13.84|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetFlagStatus PROC
;;;771      */
;;;772    FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  4602              MOV      r2,r0
;;;773    {
;;;774      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;775      /* Check the parameters */
;;;776      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;777      assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
;;;778      /* Check the status of the specified SPI/I2S flag */
;;;779      if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
000004  8913              LDRH     r3,[r2,#8]
000006  420b              TST      r3,r1
000008  d001              BEQ      |L14.14|
;;;780      {
;;;781        /* SPI_I2S_FLAG is set */
;;;782        bitstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L14.16|
                  |L14.14|
;;;783      }
;;;784      else
;;;785      {
;;;786        /* SPI_I2S_FLAG is reset */
;;;787        bitstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L14.16|
;;;788      }
;;;789      /* Return the SPI_I2S_FLAG status */
;;;790      return  bitstatus;
;;;791    }
000010  4770              BX       lr
;;;792    
                          ENDP


                          AREA ||i.SPI_I2S_GetITStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetITStatus PROC
;;;834      */
;;;835    ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b5f0              PUSH     {r4-r7,lr}
;;;836    {
000002  4602              MOV      r2,r0
;;;837      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;838      uint16_t itpos = 0, itmask = 0, enablestatus = 0;
000006  2400              MOVS     r4,#0
000008  2300              MOVS     r3,#0
00000a  2500              MOVS     r5,#0
;;;839    
;;;840      /* Check the parameters */
;;;841      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;842      assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
;;;843    
;;;844      /* Get the SPI/I2S IT index */
;;;845      itpos = 0x01 << (SPI_I2S_IT & 0x0F);
00000c  f001070f          AND      r7,r1,#0xf
000010  2601              MOVS     r6,#1
000012  40be              LSLS     r6,r6,r7
000014  b2b4              UXTH     r4,r6
;;;846    
;;;847      /* Get the SPI/I2S IT mask */
;;;848      itmask = SPI_I2S_IT >> 4;
000016  110b              ASRS     r3,r1,#4
;;;849    
;;;850      /* Set the IT mask */
;;;851      itmask = 0x01 << itmask;
000018  2601              MOVS     r6,#1
00001a  409e              LSLS     r6,r6,r3
00001c  b2b3              UXTH     r3,r6
;;;852    
;;;853      /* Get the SPI_I2S_IT enable bit status */
;;;854      enablestatus = (SPIx->CR2 & itmask) ;
00001e  8896              LDRH     r6,[r2,#4]
000020  ea060503          AND      r5,r6,r3
;;;855    
;;;856      /* Check the status of the specified SPI/I2S interrupt */
;;;857      if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
000024  8916              LDRH     r6,[r2,#8]
000026  4226              TST      r6,r4
000028  d002              BEQ      |L15.48|
00002a  b10d              CBZ      r5,|L15.48|
;;;858      {
;;;859        /* SPI_I2S_IT is set */
;;;860        bitstatus = SET;
00002c  2001              MOVS     r0,#1
00002e  e000              B        |L15.50|
                  |L15.48|
;;;861      }
;;;862      else
;;;863      {
;;;864        /* SPI_I2S_IT is reset */
;;;865        bitstatus = RESET;
000030  2000              MOVS     r0,#0
                  |L15.50|
;;;866      }
;;;867      /* Return the SPI_I2S_IT status */
;;;868      return bitstatus;
;;;869    }
000032  bdf0              POP      {r4-r7,pc}
;;;870    
                          ENDP


                          AREA ||i.SPI_I2S_ITConfig||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ITConfig PROC
;;;487      */
;;;488    void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
000000  b530              PUSH     {r4,r5,lr}
;;;489    {
;;;490      uint16_t itpos = 0, itmask = 0 ;
000002  2400              MOVS     r4,#0
000004  2300              MOVS     r3,#0
;;;491      /* Check the parameters */
;;;492      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;493      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;494      assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
;;;495    
;;;496      /* Get the SPI/I2S IT index */
;;;497      itpos = SPI_I2S_IT >> 4;
000006  110c              ASRS     r4,r1,#4
;;;498    
;;;499      /* Set the IT mask */
;;;500      itmask = (uint16_t)1 << (uint16_t)itpos;
000008  2501              MOVS     r5,#1
00000a  40a5              LSLS     r5,r5,r4
00000c  b2ab              UXTH     r3,r5
;;;501    
;;;502      if (NewState != DISABLE)
00000e  b11a              CBZ      r2,|L16.24|
;;;503      {
;;;504        /* Enable the selected SPI/I2S interrupt */
;;;505        SPIx->CR2 |= itmask;
000010  8885              LDRH     r5,[r0,#4]
000012  431d              ORRS     r5,r5,r3
000014  8085              STRH     r5,[r0,#4]
000016  e002              B        |L16.30|
                  |L16.24|
;;;506      }
;;;507      else
;;;508      {
;;;509        /* Disable the selected SPI/I2S interrupt */
;;;510        SPIx->CR2 &= (uint16_t)~itmask;
000018  8885              LDRH     r5,[r0,#4]
00001a  439d              BICS     r5,r5,r3
00001c  8085              STRH     r5,[r0,#4]
                  |L16.30|
;;;511      }
;;;512    }
00001e  bd30              POP      {r4,r5,pc}
;;;513    
                          ENDP


                          AREA ||i.SPI_I2S_ReceiveData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ReceiveData PROC
;;;568      */
;;;569    uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
000000  4601              MOV      r1,r0
;;;570    {
;;;571      /* Check the parameters */
;;;572      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;573      
;;;574      /* Return the data in the DR register */
;;;575      return SPIx->DR;
000002  8988              LDRH     r0,[r1,#0xc]
;;;576    }
000004  4770              BX       lr
;;;577    
                          ENDP


                          AREA ||i.SPI_I2S_SendData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_SendData PROC
;;;552      */
;;;553    void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
000000  8181              STRH     r1,[r0,#0xc]
;;;554    {
;;;555      /* Check the parameters */
;;;556      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;557      
;;;558      /* Write in the DR register the data to be sent */
;;;559      SPIx->DR = Data;
;;;560    }
000002  4770              BX       lr
;;;561    
                          ENDP


                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=1

                  SPI_Init PROC
;;;163      */
;;;164    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;165    {
;;;166      uint16_t tmpreg = 0;
000002  2200              MOVS     r2,#0
;;;167      
;;;168      /* check the parameters */
;;;169      assert_param(IS_SPI_ALL_PERIPH(SPIx));   
;;;170      
;;;171      /* Check the SPI parameters */
;;;172      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
;;;173      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
;;;174      assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
;;;175      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
;;;176      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
;;;177      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
;;;178      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
;;;179      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
;;;180      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
;;;181    
;;;182    /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;183      /* Get the SPIx CR1 value */
;;;184      tmpreg = SPIx->CR1;
000004  8802              LDRH     r2,[r0,#0]
;;;185      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
;;;186      tmpreg &= CR1_CLEAR_Mask;
000006  f4025241          AND      r2,r2,#0x3040
;;;187      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;188         master/salve mode, CPOL and CPHA */
;;;189      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;190      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
;;;191      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;192      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;193      /* Set CPOL bit according to SPI_CPOL value */
;;;194      /* Set CPHA bit according to SPI_CPHA value */
;;;195      tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
00000a  880b              LDRH     r3,[r1,#0]
00000c  884c              LDRH     r4,[r1,#2]
00000e  4323              ORRS     r3,r3,r4
000010  888c              LDRH     r4,[r1,#4]
000012  4323              ORRS     r3,r3,r4
000014  88cc              LDRH     r4,[r1,#6]
000016  4323              ORRS     r3,r3,r4
000018  890c              LDRH     r4,[r1,#8]
00001a  4323              ORRS     r3,r3,r4
00001c  894c              LDRH     r4,[r1,#0xa]
00001e  4323              ORRS     r3,r3,r4
000020  898c              LDRH     r4,[r1,#0xc]
000022  4323              ORRS     r3,r3,r4
000024  89cc              LDRH     r4,[r1,#0xe]
000026  4323              ORRS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
;;;196                      SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
;;;197                      SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
;;;198                      SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
;;;199      /* Write to SPIx CR1 */
;;;200      SPIx->CR1 = tmpreg;
00002a  8002              STRH     r2,[r0,#0]
;;;201      
;;;202      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;203      SPIx->I2SCFGR &= SPI_Mode_Select;		
00002c  8b83              LDRH     r3,[r0,#0x1c]
00002e  f24f74ff          MOV      r4,#0xf7ff
000032  4023              ANDS     r3,r3,r4
000034  8383              STRH     r3,[r0,#0x1c]
;;;204    
;;;205    /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;206      /* Write to SPIx CRCPOLY */
;;;207      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
000036  8a0b              LDRH     r3,[r1,#0x10]
000038  8203              STRH     r3,[r0,#0x10]
;;;208    }
00003a  bd10              POP      {r4,pc}
;;;209    
                          ENDP


                          AREA ||i.SPI_NSSInternalSoftwareConfig||, CODE, READONLY, ALIGN=1

                  SPI_NSSInternalSoftwareConfig PROC
;;;586      */
;;;587    void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
000000  f5a1427e          SUB      r2,r1,#0xfe00
;;;588    {
;;;589      /* Check the parameters */
;;;590      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;591      assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
;;;592      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
000004  3aff              SUBS     r2,r2,#0xff
000006  d004              BEQ      |L20.18|
;;;593      {
;;;594        /* Set NSS pin internally by software */
;;;595        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
000008  8802              LDRH     r2,[r0,#0]
00000a  f4427280          ORR      r2,r2,#0x100
00000e  8002              STRH     r2,[r0,#0]
000010  e004              B        |L20.28|
                  |L20.18|
;;;596      }
;;;597      else
;;;598      {
;;;599        /* Reset NSS pin internally by software */
;;;600        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
000012  8802              LDRH     r2,[r0,#0]
000014  f64f63ff          MOV      r3,#0xfeff
000018  401a              ANDS     r2,r2,r3
00001a  8002              STRH     r2,[r0,#0]
                  |L20.28|
;;;601      }
;;;602    }
00001c  4770              BX       lr
;;;603    
                          ENDP


                          AREA ||i.SPI_SSOutputCmd||, CODE, READONLY, ALIGN=1

                  SPI_SSOutputCmd PROC
;;;610      */
;;;611    void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L21.12|
;;;612    {
;;;613      /* Check the parameters */
;;;614      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;615      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;616      if (NewState != DISABLE)
;;;617      {
;;;618        /* Enable the selected SPI SS output */
;;;619        SPIx->CR2 |= CR2_SSOE_Set;
000002  8882              LDRH     r2,[r0,#4]
000004  f0420204          ORR      r2,r2,#4
000008  8082              STRH     r2,[r0,#4]
00000a  e004              B        |L21.22|
                  |L21.12|
;;;620      }
;;;621      else
;;;622      {
;;;623        /* Disable the selected SPI SS output */
;;;624        SPIx->CR2 &= CR2_SSOE_Reset;
00000c  8882              LDRH     r2,[r0,#4]
00000e  f64f73fb          MOV      r3,#0xfffb
000012  401a              ANDS     r2,r2,r3
000014  8082              STRH     r2,[r0,#4]
                  |L21.22|
;;;625      }
;;;626    }
000016  4770              BX       lr
;;;627    
                          ENDP


                          AREA ||i.SPI_StructInit||, CODE, READONLY, ALIGN=1

                  SPI_StructInit PROC
;;;375      */
;;;376    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
000000  2100              MOVS     r1,#0
;;;377    {
;;;378    /*--------------- Reset SPI init structure parameters values -----------------*/
;;;379      /* Initialize the SPI_Direction member */
;;;380      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000002  8001              STRH     r1,[r0,#0]
;;;381      /* initialize the SPI_Mode member */
;;;382      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
000004  8041              STRH     r1,[r0,#2]
;;;383      /* initialize the SPI_DataSize member */
;;;384      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000006  8081              STRH     r1,[r0,#4]
;;;385      /* Initialize the SPI_CPOL member */
;;;386      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
000008  80c1              STRH     r1,[r0,#6]
;;;387      /* Initialize the SPI_CPHA member */
;;;388      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
00000a  8101              STRH     r1,[r0,#8]
;;;389      /* Initialize the SPI_NSS member */
;;;390      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
00000c  8141              STRH     r1,[r0,#0xa]
;;;391      /* Initialize the SPI_BaudRatePrescaler member */
;;;392      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
00000e  8181              STRH     r1,[r0,#0xc]
;;;393      /* Initialize the SPI_FirstBit member */
;;;394      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
000010  81c1              STRH     r1,[r0,#0xe]
;;;395      /* Initialize the SPI_CRCPolynomial member */
;;;396      SPI_InitStruct->SPI_CRCPolynomial = 7;
000012  2107              MOVS     r1,#7
000014  8201              STRH     r1,[r0,#0x10]
;;;397    }
000016  4770              BX       lr
;;;398    
                          ENDP


                          AREA ||i.SPI_TransmitCRC||, CODE, READONLY, ALIGN=1

                  SPI_TransmitCRC PROC
;;;652      */
;;;653    void SPI_TransmitCRC(SPI_TypeDef* SPIx)
000000  8801              LDRH     r1,[r0,#0]
;;;654    {
;;;655      /* Check the parameters */
;;;656      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;657      
;;;658      /* Enable the selected SPI CRC transmission */
;;;659      SPIx->CR1 |= CR1_CRCNext_Set;
000002  f4415180          ORR      r1,r1,#0x1000
000006  8001              STRH     r1,[r0,#0]
;;;660    }
000008  4770              BX       lr
;;;661    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Libraries\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_spi.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f10x_spi_c_2b928927____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f10x_spi_c_2b928927____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f10x_spi_c_2b928927____REVSH|
#line 128
|__asm___15_stm32f10x_spi_c_2b928927____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
