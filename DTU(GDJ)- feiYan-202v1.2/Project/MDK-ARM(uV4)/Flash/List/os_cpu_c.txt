; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\os_cpu_c.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\os_cpu_c.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -I..\..\Malloc -I..\..\User\Modbus -Id:\Keil_v4\ARM\RV31\INC -Id:\Keil_v4\ARM\CMSIS\Include -Id:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Flash\Obj\os_cpu_c.crf ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\os_cpu_c.c]
                          THUMB

                          AREA ||i.OSIdleTaskHook||, CODE, READONLY, ALIGN=2

                  OSIdleTaskHook PROC
;;;70     
;;;71     void  OSIdleTaskHook (void)
000000  b510              PUSH     {r4,lr}
;;;72     {
;;;73     #if OS_CFG_APP_HOOKS_EN > 0u
;;;74         if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
000002  4803              LDR      r0,|L1.16|
000004  6800              LDR      r0,[r0,#0]  ; OS_AppIdleTaskHookPtr
000006  b110              CBZ      r0,|L1.14|
;;;75             (*OS_AppIdleTaskHookPtr)();
000008  4801              LDR      r0,|L1.16|
00000a  6800              LDR      r0,[r0,#0]  ; OS_AppIdleTaskHookPtr
00000c  4780              BLX      r0
                  |L1.14|
;;;76         }
;;;77     #endif
;;;78     }
00000e  bd10              POP      {r4,pc}
;;;79     
                          ENDP

                  |L1.16|
                          DCD      OS_AppIdleTaskHookPtr

                          AREA ||i.OSInitHook||, CODE, READONLY, ALIGN=2

                  OSInitHook PROC
;;;93     
;;;94     void  OSInitHook (void)
000000  4a0a              LDR      r2,|L2.44|
;;;95     {
;;;96         CPU_STK_SIZE   i;
;;;97         CPU_STK       *p_stk;
;;;98     
;;;99     
;;;100        p_stk = OSCfg_ISRStkBasePtr;                            /* Clear the ISR stack                                    */
000002  6811              LDR      r1,[r2,#0]  ; OSCfg_ISRStkBasePtr
;;;101        for (i = 0u; i < OSCfg_ISRStkSize; i++) {
000004  2000              MOVS     r0,#0
000006  e002              B        |L2.14|
                  |L2.8|
;;;102            *p_stk++ = (CPU_STK)0u;
000008  2200              MOVS     r2,#0
00000a  c104              STM      r1!,{r2}
00000c  1c40              ADDS     r0,r0,#1              ;101
                  |L2.14|
00000e  4a08              LDR      r2,|L2.48|
000010  6812              LDR      r2,[r2,#0]            ;101  ; OSCfg_ISRStkSize
000012  4290              CMP      r0,r2                 ;101
000014  d3f8              BCC      |L2.8|
;;;103        }
;;;104        OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize - 1u);
000016  4a05              LDR      r2,|L2.44|
000018  6812              LDR      r2,[r2,#0]  ; OSCfg_ISRStkBasePtr
00001a  4b05              LDR      r3,|L2.48|
00001c  681b              LDR      r3,[r3,#0]  ; OSCfg_ISRStkSize
00001e  eb020283          ADD      r2,r2,r3,LSL #2
000022  1f12              SUBS     r2,r2,#4
000024  4b03              LDR      r3,|L2.52|
000026  601a              STR      r2,[r3,#0]  ; OS_CPU_ExceptStkBase
;;;105    }
000028  4770              BX       lr
;;;106    
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      OSCfg_ISRStkBasePtr
                  |L2.48|
                          DCD      OSCfg_ISRStkSize
                  |L2.52|
                          DCD      OS_CPU_ExceptStkBase

                          AREA ||i.OSStatTaskHook||, CODE, READONLY, ALIGN=2

                  OSStatTaskHook PROC
;;;148    
;;;149    void  OSStatTaskHook (void)
000000  b510              PUSH     {r4,lr}
;;;150    {
;;;151    #if OS_CFG_APP_HOOKS_EN > 0u
;;;152        if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
000002  4803              LDR      r0,|L3.16|
000004  6800              LDR      r0,[r0,#0]  ; OS_AppStatTaskHookPtr
000006  b110              CBZ      r0,|L3.14|
;;;153            (*OS_AppStatTaskHookPtr)();
000008  4801              LDR      r0,|L3.16|
00000a  6800              LDR      r0,[r0,#0]  ; OS_AppStatTaskHookPtr
00000c  4780              BLX      r0
                  |L3.14|
;;;154        }
;;;155    #endif
;;;156    }
00000e  bd10              POP      {r4,pc}
;;;157    
                          ENDP

                  |L3.16|
                          DCD      OS_AppStatTaskHookPtr

                          AREA ||i.OSTaskCreateHook||, CODE, READONLY, ALIGN=2

                  OSTaskCreateHook PROC
;;;171    
;;;172    void  OSTaskCreateHook (OS_TCB  *p_tcb)
000000  b510              PUSH     {r4,lr}
;;;173    {
000002  4604              MOV      r4,r0
;;;174    #if OS_CFG_APP_HOOKS_EN > 0u
;;;175        if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
000004  4803              LDR      r0,|L4.20|
000006  6800              LDR      r0,[r0,#0]  ; OS_AppTaskCreateHookPtr
000008  b118              CBZ      r0,|L4.18|
;;;176            (*OS_AppTaskCreateHookPtr)(p_tcb);
00000a  4620              MOV      r0,r4
00000c  4901              LDR      r1,|L4.20|
00000e  6809              LDR      r1,[r1,#0]  ; OS_AppTaskCreateHookPtr
000010  4788              BLX      r1
                  |L4.18|
;;;177        }
;;;178    #else
;;;179        (void)p_tcb;                                            /* Prevent compiler warning                               */
;;;180    #endif
;;;181    }
000012  bd10              POP      {r4,pc}
;;;182    
                          ENDP

                  |L4.20|
                          DCD      OS_AppTaskCreateHookPtr

                          AREA ||i.OSTaskDelHook||, CODE, READONLY, ALIGN=2

                  OSTaskDelHook PROC
;;;196    
;;;197    void  OSTaskDelHook (OS_TCB  *p_tcb)
000000  b510              PUSH     {r4,lr}
;;;198    {
000002  4604              MOV      r4,r0
;;;199    #if OS_CFG_APP_HOOKS_EN > 0u
;;;200        if (OS_AppTaskDelHookPtr != (OS_APP_HOOK_TCB)0) {
000004  4803              LDR      r0,|L5.20|
000006  6800              LDR      r0,[r0,#0]  ; OS_AppTaskDelHookPtr
000008  b118              CBZ      r0,|L5.18|
;;;201            (*OS_AppTaskDelHookPtr)(p_tcb);
00000a  4620              MOV      r0,r4
00000c  4901              LDR      r1,|L5.20|
00000e  6809              LDR      r1,[r1,#0]  ; OS_AppTaskDelHookPtr
000010  4788              BLX      r1
                  |L5.18|
;;;202        }
;;;203    #else
;;;204        (void)p_tcb;                                            /* Prevent compiler warning                               */
;;;205    #endif
;;;206    }
000012  bd10              POP      {r4,pc}
;;;207    
                          ENDP

                  |L5.20|
                          DCD      OS_AppTaskDelHookPtr

                          AREA ||i.OSTaskReturnHook||, CODE, READONLY, ALIGN=2

                  OSTaskReturnHook PROC
;;;222    
;;;223    void  OSTaskReturnHook (OS_TCB  *p_tcb)
000000  b510              PUSH     {r4,lr}
;;;224    {
000002  4604              MOV      r4,r0
;;;225    #if OS_CFG_APP_HOOKS_EN > 0u
;;;226        if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
000004  4803              LDR      r0,|L6.20|
000006  6800              LDR      r0,[r0,#0]  ; OS_AppTaskReturnHookPtr
000008  b118              CBZ      r0,|L6.18|
;;;227            (*OS_AppTaskReturnHookPtr)(p_tcb);
00000a  4620              MOV      r0,r4
00000c  4901              LDR      r1,|L6.20|
00000e  6809              LDR      r1,[r1,#0]  ; OS_AppTaskReturnHookPtr
000010  4788              BLX      r1
                  |L6.18|
;;;228        }
;;;229    #else
;;;230        (void)p_tcb;                                            /* Prevent compiler warning                               */
;;;231    #endif
;;;232    }
000012  bd10              POP      {r4,pc}
;;;233    
                          ENDP

                  |L6.20|
                          DCD      OS_AppTaskReturnHookPtr

                          AREA ||i.OSTaskStkInit||, CODE, READONLY, ALIGN=2

                  OSTaskStkInit PROC
;;;263    
;;;264    CPU_STK  *OSTaskStkInit (OS_TASK_PTR    p_task,
000000  b5f0              PUSH     {r4-r7,lr}
;;;265                             void          *p_arg,
;;;266                             CPU_STK       *p_stk_base,
;;;267                             CPU_STK       *p_stk_limit,
;;;268                             CPU_STK_SIZE   stk_size,
;;;269                             OS_OPT         opt)
;;;270    {
000002  4604              MOV      r4,r0
000004  e9dd5605          LDRD     r5,r6,[sp,#0x14]
;;;271        CPU_STK  *p_stk;
;;;272    
;;;273    
;;;274        (void)opt;                                              /* Prevent compiler warning                               */
;;;275    
;;;276        p_stk = &p_stk_base[stk_size];                          /* Load stack pointer                                     */
000008  eb020085          ADD      r0,r2,r5,LSL #2
;;;277                                                                /* Align the stack to 8-bytes.                          */
;;;278        p_stk = (CPU_STK *)((CPU_STK)(p_stk) & 0xFFFFFFF8);
00000c  f0200007          BIC      r0,r0,#7
;;;279    	
;;;280    															/* Registers stacked as if auto-saved on exception        */
;;;281        *--p_stk = (CPU_STK)0x01000000u;                        /* xPSR                                                   */
000010  f04f7c80          MOV      r12,#0x1000000
000014  1f07              SUBS     r7,r0,#4
000016  4638              MOV      r0,r7
000018  f8c7c000          STR      r12,[r7,#0]
;;;282        *--p_stk = (CPU_STK)p_task;                             /* Entry Point                                            */
00001c  1f07              SUBS     r7,r0,#4
00001e  4638              MOV      r0,r7
000020  603c              STR      r4,[r7,#0]
;;;283        *--p_stk = (CPU_STK)OS_TaskReturn;                      /* R14 (LR)                                               */
000022  f8dfc09c          LDR      r12,|L7.192|
000026  1f07              SUBS     r7,r0,#4
000028  4638              MOV      r0,r7
00002a  f8c7c000          STR      r12,[r7,#0]
;;;284        *--p_stk = (CPU_STK)0x12121212u;                        /* R12                                                    */
00002e  f04f3c12          MOV      r12,#0x12121212
000032  1f07              SUBS     r7,r0,#4
000034  4638              MOV      r0,r7
000036  f8c7c000          STR      r12,[r7,#0]
;;;285        *--p_stk = (CPU_STK)0x03030303u;                        /* R3                                                     */
00003a  f04f3c03          MOV      r12,#0x3030303
00003e  1f07              SUBS     r7,r0,#4
000040  4638              MOV      r0,r7
000042  f8c7c000          STR      r12,[r7,#0]
;;;286        *--p_stk = (CPU_STK)0x02020202u;                        /* R2                                                     */
000046  f04f3c02          MOV      r12,#0x2020202
00004a  1f07              SUBS     r7,r0,#4
00004c  4638              MOV      r0,r7
00004e  f8c7c000          STR      r12,[r7,#0]
;;;287        *--p_stk = (CPU_STK)p_stk_limit;                        /* R1                                                     */
000052  1f07              SUBS     r7,r0,#4
000054  4638              MOV      r0,r7
000056  603b              STR      r3,[r7,#0]
;;;288        *--p_stk = (CPU_STK)p_arg;                              /* R0 : argument                                          */
000058  1f07              SUBS     r7,r0,#4
00005a  4638              MOV      r0,r7
00005c  6039              STR      r1,[r7,#0]
;;;289                                                                /* Remaining registers saved on process stack             */
;;;290        *--p_stk = (CPU_STK)0x11111111u;                        /* R11                                                    */
00005e  f04f3c11          MOV      r12,#0x11111111
000062  1f07              SUBS     r7,r0,#4
000064  4638              MOV      r0,r7
000066  f8c7c000          STR      r12,[r7,#0]
;;;291        *--p_stk = (CPU_STK)0x10101010u;                        /* R10                                                    */
00006a  f04f3c10          MOV      r12,#0x10101010
00006e  1f07              SUBS     r7,r0,#4
000070  4638              MOV      r0,r7
000072  f8c7c000          STR      r12,[r7,#0]
;;;292        *--p_stk = (CPU_STK)0x09090909u;                        /* R9                                                     */
000076  f04f3c09          MOV      r12,#0x9090909
00007a  1f07              SUBS     r7,r0,#4
00007c  4638              MOV      r0,r7
00007e  f8c7c000          STR      r12,[r7,#0]
;;;293        *--p_stk = (CPU_STK)0x08080808u;                        /* R8                                                     */
000082  f04f3c08          MOV      r12,#0x8080808
000086  1f07              SUBS     r7,r0,#4
000088  4638              MOV      r0,r7
00008a  f8c7c000          STR      r12,[r7,#0]
;;;294        *--p_stk = (CPU_STK)0x07070707u;                        /* R7                                                     */
00008e  f04f3c07          MOV      r12,#0x7070707
000092  1f07              SUBS     r7,r0,#4
000094  4638              MOV      r0,r7
000096  f8c7c000          STR      r12,[r7,#0]
;;;295        *--p_stk = (CPU_STK)0x06060606u;                        /* R6                                                     */
00009a  f04f3c06          MOV      r12,#0x6060606
00009e  1f07              SUBS     r7,r0,#4
0000a0  4638              MOV      r0,r7
0000a2  f8c7c000          STR      r12,[r7,#0]
;;;296        *--p_stk = (CPU_STK)0x05050505u;                        /* R5                                                     */
0000a6  f04f3c05          MOV      r12,#0x5050505
0000aa  1f07              SUBS     r7,r0,#4
0000ac  4638              MOV      r0,r7
0000ae  f8c7c000          STR      r12,[r7,#0]
;;;297        *--p_stk = (CPU_STK)0x04040404u;                        /* R4                                                     */
0000b2  f04f3c04          MOV      r12,#0x4040404
0000b6  1f07              SUBS     r7,r0,#4
0000b8  4638              MOV      r0,r7
0000ba  f8c7c000          STR      r12,[r7,#0]
;;;298    
;;;299        return (p_stk);
;;;300    }
0000be  bdf0              POP      {r4-r7,pc}
;;;301    
                          ENDP

                  |L7.192|
                          DCD      OS_TaskReturn

                          AREA ||i.OSTaskSwHook||, CODE, READONLY, ALIGN=2

                  OSTaskSwHook PROC
;;;319    
;;;320    void  OSTaskSwHook (void)
000000  b570              PUSH     {r4-r6,lr}
;;;321    {
;;;322    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;323        CPU_TS  ts;
;;;324    #endif
;;;325    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;326        CPU_TS  int_dis_time;
;;;327    #endif
;;;328    #if (OS_CFG_TASK_STK_REDZONE_EN == DEF_ENABLED)
;;;329        CPU_BOOLEAN  stk_status;
;;;330    #endif
;;;331    
;;;332    
;;;333    #if OS_CFG_APP_HOOKS_EN > 0u
;;;334        if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
000002  481b              LDR      r0,|L8.112|
000004  6800              LDR      r0,[r0,#0]  ; OS_AppTaskSwHookPtr
000006  b110              CBZ      r0,|L8.14|
;;;335            (*OS_AppTaskSwHookPtr)();
000008  4819              LDR      r0,|L8.112|
00000a  6800              LDR      r0,[r0,#0]  ; OS_AppTaskSwHookPtr
00000c  4780              BLX      r0
                  |L8.14|
;;;336        }
;;;337    #endif
;;;338    
;;;339    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
;;;340        TRACE_OS_TASK_SWITCHED_IN(OSTCBHighRdyPtr);             /* Record the event.                                      */
;;;341    #endif
;;;342    
;;;343    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;344        ts = OS_TS_GET();
00000e  f7fffffe          BL       CPU_TS_TmrRd
000012  4604              MOV      r4,r0
;;;345        if (OSTCBCurPtr != OSTCBHighRdyPtr) {
000014  4817              LDR      r0,|L8.116|
000016  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
000018  4917              LDR      r1,|L8.120|
00001a  6809              LDR      r1,[r1,#0]  ; OSTCBHighRdyPtr
00001c  4288              CMP      r0,r1
00001e  d015              BEQ      |L8.76|
;;;346            OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
000020  4814              LDR      r0,|L8.116|
000022  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
000024  f8d0008c          LDR      r0,[r0,#0x8c]
000028  1a20              SUBS     r0,r4,r0
00002a  4912              LDR      r1,|L8.116|
00002c  6809              LDR      r1,[r1,#0]  ; OSTCBCurPtr
00002e  f8c10088          STR      r0,[r1,#0x88]
;;;347            OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
000032  4810              LDR      r0,|L8.116|
000034  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
000036  f8d00090          LDR      r0,[r0,#0x90]
00003a  490e              LDR      r1,|L8.116|
00003c  6809              LDR      r1,[r1,#0]  ; OSTCBCurPtr
00003e  f8d11088          LDR      r1,[r1,#0x88]
000042  4408              ADD      r0,r0,r1
000044  490b              LDR      r1,|L8.116|
000046  6809              LDR      r1,[r1,#0]  ; OSTCBCurPtr
000048  f8c10090          STR      r0,[r1,#0x90]
                  |L8.76|
;;;348        }
;;;349    
;;;350        OSTCBHighRdyPtr->CyclesStart = ts;
00004c  480a              LDR      r0,|L8.120|
00004e  6800              LDR      r0,[r0,#0]  ; OSTCBHighRdyPtr
000050  f8c0408c          STR      r4,[r0,#0x8c]
;;;351    #endif
;;;352    
;;;353    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;354        int_dis_time = CPU_IntDisMeasMaxCurReset();             /* Keep track of per-task interrupt disable time          */
000054  f7fffffe          BL       CPU_IntDisMeasMaxCurReset
000058  4605              MOV      r5,r0
;;;355        if (OSTCBCurPtr->IntDisTimeMax < int_dis_time) {
00005a  4806              LDR      r0,|L8.116|
00005c  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
00005e  f8d000a8          LDR      r0,[r0,#0xa8]
000062  42a8              CMP      r0,r5
000064  d203              BCS      |L8.110|
;;;356            OSTCBCurPtr->IntDisTimeMax = int_dis_time;
000066  4803              LDR      r0,|L8.116|
000068  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
00006a  f8c050a8          STR      r5,[r0,#0xa8]
                  |L8.110|
;;;357        }
;;;358    #endif
;;;359    
;;;360    #if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
;;;361                                                                /* Keep track of per-task scheduler lock time             */
;;;362        if (OSTCBCurPtr->SchedLockTimeMax < OSSchedLockTimeMaxCur) {
;;;363            OSTCBCurPtr->SchedLockTimeMax = OSSchedLockTimeMaxCur;
;;;364        }
;;;365        OSSchedLockTimeMaxCur = (CPU_TS)0;                      /* Reset the per-task value                               */
;;;366    #endif
;;;367    
;;;368    #if (OS_CFG_TASK_STK_REDZONE_EN == DEF_ENABLED)
;;;369        stk_status = OSTaskStkRedzoneChk(DEF_NULL);
;;;370        if (stk_status != DEF_OK) {
;;;371            CPU_SW_EXCEPTION(;);
;;;372        }
;;;373    #endif
;;;374    }
00006e  bd70              POP      {r4-r6,pc}
;;;375    
                          ENDP

                  |L8.112|
                          DCD      OS_AppTaskSwHookPtr
                  |L8.116|
                          DCD      OSTCBCurPtr
                  |L8.120|
                          DCD      OSTCBHighRdyPtr

                          AREA ||i.OSTimeTickHook||, CODE, READONLY, ALIGN=2

                  OSTimeTickHook PROC
;;;389    
;;;390    void  OSTimeTickHook (void)
000000  b510              PUSH     {r4,lr}
;;;391    {
;;;392    #if OS_CFG_APP_HOOKS_EN > 0u
;;;393        if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
000002  4803              LDR      r0,|L9.16|
000004  6800              LDR      r0,[r0,#0]  ; OS_AppTimeTickHookPtr
000006  b110              CBZ      r0,|L9.14|
;;;394            (*OS_AppTimeTickHookPtr)();
000008  4801              LDR      r0,|L9.16|
00000a  6800              LDR      r0,[r0,#0]  ; OS_AppTimeTickHookPtr
00000c  4780              BLX      r0
                  |L9.14|
;;;395        }
;;;396    #endif
;;;397    }
00000e  bd10              POP      {r4,pc}
;;;398    
                          ENDP

                  |L9.16|
                          DCD      OS_AppTimeTickHookPtr

                          AREA ||i.OS_CPU_SysTickHandler||, CODE, READONLY, ALIGN=1

                  OS_CPU_SysTickHandler PROC
;;;413    
;;;414    void  OS_CPU_SysTickHandler (void)
000000  b510              PUSH     {r4,lr}
;;;415    {
;;;416        CPU_SR_ALLOC();
000002  2400              MOVS     r4,#0
;;;417    
;;;418    
;;;419        CPU_CRITICAL_ENTER();
000004  bf00              NOP      
000006  bf00              NOP      
000008  f7fffffe          BL       CPU_SR_Save
00000c  4604              MOV      r4,r0
00000e  bf00              NOP      
000010  f7fffffe          BL       CPU_IntDisMeasStart
000014  bf00              NOP      
;;;420        OSIntEnter();                                           /* Tell uC/OS-III that we are starting an ISR             */
000016  f7fffffe          BL       OSIntEnter
;;;421        CPU_CRITICAL_EXIT();
00001a  bf00              NOP      
00001c  f7fffffe          BL       CPU_IntDisMeasStop
000020  bf00              NOP      
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       CPU_SR_Restore
000028  bf00              NOP      
00002a  bf00              NOP      
;;;422    
;;;423        OSTimeTick();                                           /* Call uC/OS-III's OSTimeTick()                          */
00002c  f7fffffe          BL       OSTimeTick
;;;424    
;;;425        OSIntExit();                                            /* Tell uC/OS-III that we are leaving the ISR             */
000030  f7fffffe          BL       OSIntExit
;;;426    }
000034  bd10              POP      {r4,pc}
;;;427    
                          ENDP


                          AREA ||i.OS_CPU_SysTickInit||, CODE, READONLY, ALIGN=2

                  OS_CPU_SysTickInit PROC
;;;441    
;;;442    void  OS_CPU_SysTickInit (CPU_INT32U  cnts)
000000  4601              MOV      r1,r0
;;;443    {
;;;444        CPU_INT32U  prio;
;;;445    
;;;446    
;;;447        CPU_REG_NVIC_ST_RELOAD = cnts - 1u;
000002  1e4a              SUBS     r2,r1,#1
000004  f04f23e0          MOV      r3,#0xe000e000
000008  615a              STR      r2,[r3,#0x14]
;;;448    
;;;449                                                                /* Set SysTick handler prio.                              */
;;;450        prio  = CPU_REG_NVIC_SHPRI3;
00000a  4a08              LDR      r2,|L11.44|
00000c  6810              LDR      r0,[r2,#0]
;;;451        prio &= DEF_BIT_FIELD(24, 0);
00000e  f020407f          BIC      r0,r0,#0xff000000
;;;452        prio |= DEF_BIT_MASK(OS_CPU_CFG_SYSTICK_PRIO, 24);
000012  bf00              NOP      
;;;453    
;;;454        CPU_REG_NVIC_SHPRI3 = prio;
000014  6010              STR      r0,[r2,#0]
;;;455    
;;;456                                                                /* Enable timer.                                          */
;;;457        CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_CLKSOURCE |
000016  461a              MOV      r2,r3
000018  6912              LDR      r2,[r2,#0x10]
00001a  f0420205          ORR      r2,r2,#5
00001e  611a              STR      r2,[r3,#0x10]
;;;458                                CPU_REG_NVIC_ST_CTRL_ENABLE;
;;;459                                                                /* Enable timer interrupt.                                */
;;;460        CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_TICKINT;
000020  461a              MOV      r2,r3
000022  6912              LDR      r2,[r2,#0x10]
000024  f0420202          ORR      r2,r2,#2
000028  611a              STR      r2,[r3,#0x10]
;;;461    }
00002a  4770              BX       lr
;;;462    
                          ENDP

                  |L11.44|
                          DCD      0xe000ed20

                          AREA ||.data||, DATA, ALIGN=2

                  OS_CPU_ExceptStkBase
                          DCD      0x00000000
