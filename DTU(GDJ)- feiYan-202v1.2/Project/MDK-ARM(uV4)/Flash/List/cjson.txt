; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\cjson.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\cjson.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -I..\..\Malloc -I..\..\User\Modbus -Id:\Keil_v4\ARM\RV31\INC -Id:\Keil_v4\ARM\CMSIS\Include -Id:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Flash\Obj\cjson.crf ..\..\User\cJSON.c]
                          THUMB

                          AREA ||i.cJSON_AddItemReferenceToArray||, CODE, READONLY, ALIGN=1

                  cJSON_AddItemReferenceToArray PROC
;;;675    void   cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (!(item->type&cJSON_StringIsConst) && item->string) cJSON_free(item->string);item->string=(char*)string;item->type|=cJSON_StringIsConst;cJSON_AddItemToArray(object,item);}
;;;676    void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       create_reference
00000c  4606              MOV      r6,r0
00000e  4631              MOV      r1,r6
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       cJSON_AddItemToArray
000016  bd70              POP      {r4-r6,pc}
;;;677    void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}
                          ENDP


                          AREA ||i.cJSON_AddItemReferenceToObject||, CODE, READONLY, ALIGN=1

                  cJSON_AddItemReferenceToObject PROC
;;;676    void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}
;;;677    void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       create_reference
000010  4607              MOV      r7,r0
000012  463a              MOV      r2,r7
000014  4631              MOV      r1,r6
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       cJSON_AddItemToObject
00001c  e8bd81f0          POP      {r4-r8,pc}
;;;678    
                          ENDP


                          AREA ||i.cJSON_AddItemToArray||, CODE, READONLY, ALIGN=1

                  cJSON_AddItemToArray PROC
;;;672    /* Add item to array/object. */
;;;673    void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  68ac              LDR      r4,[r5,#8]
000008  b906              CBNZ     r6,|L3.12|
                  |L3.10|
00000a  bd70              POP      {r4-r6,pc}
                  |L3.12|
00000c  b90c              CBNZ     r4,|L3.18|
00000e  60ae              STR      r6,[r5,#8]
000010  e009              B        |L3.38|
                  |L3.18|
000012  e000              B        |L3.22|
                  |L3.20|
000014  6824              LDR      r4,[r4,#0]
                  |L3.22|
000016  b114              CBZ      r4,|L3.30|
000018  6820              LDR      r0,[r4,#0]
00001a  2800              CMP      r0,#0
00001c  d1fa              BNE      |L3.20|
                  |L3.30|
00001e  4631              MOV      r1,r6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       suffix_object
                  |L3.38|
000026  bf00              NOP      
000028  e7ef              B        |L3.10|
;;;674    void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}
                          ENDP


                          AREA ||i.cJSON_AddItemToObject||, CODE, READONLY, ALIGN=2

                  cJSON_AddItemToObject PROC
;;;673    void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}
;;;674    void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
000008  b904              CBNZ     r4,|L4.12|
                  |L4.10|
00000a  bd70              POP      {r4-r6,pc}
                  |L4.12|
00000c  6a20              LDR      r0,[r4,#0x20]
00000e  b118              CBZ      r0,|L4.24|
000010  4906              LDR      r1,|L4.44|
000012  6a20              LDR      r0,[r4,#0x20]
000014  6809              LDR      r1,[r1,#0]  ; cJSON_free
000016  4788              BLX      r1
                  |L4.24|
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       cJSON_strdup
00001e  6220              STR      r0,[r4,#0x20]
000020  4621              MOV      r1,r4
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       cJSON_AddItemToArray
000028  bf00              NOP      
00002a  e7ee              B        |L4.10|
;;;675    void   cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (!(item->type&cJSON_StringIsConst) && item->string) cJSON_free(item->string);item->string=(char*)string;item->type|=cJSON_StringIsConst;cJSON_AddItemToArray(object,item);}
                          ENDP

                  |L4.44|
                          DCD      cJSON_free

                          AREA ||i.cJSON_AddItemToObjectCS||, CODE, READONLY, ALIGN=2

                  cJSON_AddItemToObjectCS PROC
;;;674    void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}
;;;675    void   cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (!(item->type&cJSON_StringIsConst) && item->string) cJSON_free(item->string);item->string=(char*)string;item->type|=cJSON_StringIsConst;cJSON_AddItemToArray(object,item);}
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
000008  b904              CBNZ     r4,|L5.12|
                  |L5.10|
00000a  bd70              POP      {r4-r6,pc}
                  |L5.12|
00000c  89a0              LDRH     r0,[r4,#0xc]
00000e  f4107f00          TST      r0,#0x200
000012  d105              BNE      |L5.32|
000014  6a20              LDR      r0,[r4,#0x20]
000016  b118              CBZ      r0,|L5.32|
000018  4907              LDR      r1,|L5.56|
00001a  6a20              LDR      r0,[r4,#0x20]
00001c  6809              LDR      r1,[r1,#0]  ; cJSON_free
00001e  4788              BLX      r1
                  |L5.32|
000020  6225              STR      r5,[r4,#0x20]
000022  68e0              LDR      r0,[r4,#0xc]
000024  f4407000          ORR      r0,r0,#0x200
000028  60e0              STR      r0,[r4,#0xc]
00002a  4621              MOV      r1,r4
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       cJSON_AddItemToArray
000032  bf00              NOP      
000034  e7e9              B        |L5.10|
;;;676    void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}
                          ENDP

000036  0000              DCW      0x0000
                  |L5.56|
                          DCD      cJSON_free

                          AREA ||i.cJSON_CreateArray||, CODE, READONLY, ALIGN=1

                  cJSON_CreateArray PROC
;;;699    cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}
;;;700    cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_New_Item
000006  4604              MOV      r4,r0
000008  b10c              CBZ      r4,|L6.14|
00000a  2005              MOVS     r0,#5
00000c  60e0              STR      r0,[r4,#0xc]
                  |L6.14|
00000e  4620              MOV      r0,r4
000010  bd10              POP      {r4,pc}
;;;701    cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}
                          ENDP


                          AREA ||i.cJSON_CreateBool||, CODE, READONLY, ALIGN=1

                  cJSON_CreateBool PROC
;;;696    cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}
;;;697    cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  f7fffffe          BL       cJSON_New_Item
000008  4604              MOV      r4,r0
00000a  b124              CBZ      r4,|L7.22|
00000c  b10d              CBZ      r5,|L7.18|
00000e  2001              MOVS     r0,#1
000010  e000              B        |L7.20|
                  |L7.18|
000012  2000              MOVS     r0,#0
                  |L7.20|
000014  60e0              STR      r0,[r4,#0xc]
                  |L7.22|
000016  4620              MOV      r0,r4
000018  bd70              POP      {r4-r6,pc}
;;;698    cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}
                          ENDP


                          AREA ||i.cJSON_CreateDoubleArray||, CODE, READONLY, ALIGN=1

                  cJSON_CreateDoubleArray PROC
;;;705    cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
;;;706    cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  2500              MOVS     r5,#0
00000a  46a9              MOV      r9,r5
00000c  f7fffffe          BL       cJSON_CreateArray
000010  4606              MOV      r6,r0
000012  2400              MOVS     r4,#0
000014  e010              B        |L8.56|
                  |L8.22|
000016  eb0700c4          ADD      r0,r7,r4,LSL #3
00001a  e9d02100          LDRD     r2,r1,[r0,#0]
00001e  4610              MOV      r0,r2
000020  f7fffffe          BL       cJSON_CreateNumber
000024  4605              MOV      r5,r0
000026  b90c              CBNZ     r4,|L8.44|
000028  60b5              STR      r5,[r6,#8]
00002a  e003              B        |L8.52|
                  |L8.44|
00002c  4629              MOV      r1,r5
00002e  4648              MOV      r0,r9
000030  f7fffffe          BL       suffix_object
                  |L8.52|
000034  46a9              MOV      r9,r5
000036  1c64              ADDS     r4,r4,#1
                  |L8.56|
000038  b10e              CBZ      r6,|L8.62|
00003a  4544              CMP      r4,r8
00003c  dbeb              BLT      |L8.22|
                  |L8.62|
00003e  4630              MOV      r0,r6
000040  e8bd87f0          POP      {r4-r10,pc}
;;;707    cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
                          ENDP


                          AREA ||i.cJSON_CreateFalse||, CODE, READONLY, ALIGN=1

                  cJSON_CreateFalse PROC
;;;695    cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}
;;;696    cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_New_Item
000006  4604              MOV      r4,r0
000008  b10c              CBZ      r4,|L9.14|
00000a  2000              MOVS     r0,#0
00000c  60e0              STR      r0,[r4,#0xc]
                  |L9.14|
00000e  4620              MOV      r0,r4
000010  bd10              POP      {r4,pc}
;;;697    cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}
                          ENDP


                          AREA ||i.cJSON_CreateFloatArray||, CODE, READONLY, ALIGN=1

                  cJSON_CreateFloatArray PROC
;;;704    cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
;;;705    cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  2500              MOVS     r5,#0
00000a  46ab              MOV      r11,r5
00000c  f7fffffe          BL       cJSON_CreateArray
000010  4606              MOV      r6,r0
000012  2400              MOVS     r4,#0
000014  e010              B        |L10.56|
                  |L10.22|
000016  f8590024          LDR      r0,[r9,r4,LSL #2]
00001a  f7fffffe          BL       __aeabi_f2d
00001e  4607              MOV      r7,r0
000020  f7fffffe          BL       cJSON_CreateNumber
000024  4605              MOV      r5,r0
000026  b90c              CBNZ     r4,|L10.44|
000028  60b5              STR      r5,[r6,#8]
00002a  e003              B        |L10.52|
                  |L10.44|
00002c  4629              MOV      r1,r5
00002e  4658              MOV      r0,r11
000030  f7fffffe          BL       suffix_object
                  |L10.52|
000034  46ab              MOV      r11,r5
000036  1c64              ADDS     r4,r4,#1
                  |L10.56|
000038  b10e              CBZ      r6,|L10.62|
00003a  4554              CMP      r4,r10
00003c  dbeb              BLT      |L10.22|
                  |L10.62|
00003e  4630              MOV      r0,r6
000040  e8bd9ff0          POP      {r4-r12,pc}
;;;706    cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
                          ENDP


                          AREA ||i.cJSON_CreateIntArray||, CODE, READONLY, ALIGN=1

                  cJSON_CreateIntArray PROC
;;;703    /* Create Arrays: */
;;;704    cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  2500              MOVS     r5,#0
00000a  46ab              MOV      r11,r5
00000c  f7fffffe          BL       cJSON_CreateArray
000010  4606              MOV      r6,r0
000012  2400              MOVS     r4,#0
000014  e010              B        |L11.56|
                  |L11.22|
000016  f8590024          LDR      r0,[r9,r4,LSL #2]
00001a  f7fffffe          BL       __aeabi_i2d
00001e  4607              MOV      r7,r0
000020  f7fffffe          BL       cJSON_CreateNumber
000024  4605              MOV      r5,r0
000026  b90c              CBNZ     r4,|L11.44|
000028  60b5              STR      r5,[r6,#8]
00002a  e003              B        |L11.52|
                  |L11.44|
00002c  4629              MOV      r1,r5
00002e  4658              MOV      r0,r11
000030  f7fffffe          BL       suffix_object
                  |L11.52|
000034  46ab              MOV      r11,r5
000036  1c64              ADDS     r4,r4,#1
                  |L11.56|
000038  b10e              CBZ      r6,|L11.62|
00003a  4554              CMP      r4,r10
00003c  dbeb              BLT      |L11.22|
                  |L11.62|
00003e  4630              MOV      r0,r6
000040  e8bd9ff0          POP      {r4-r12,pc}
;;;705    cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
                          ENDP


                          AREA ||i.cJSON_CreateNull||, CODE, READONLY, ALIGN=1

                  cJSON_CreateNull PROC
;;;693    /* Create basic types: */
;;;694    cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_New_Item
000006  4604              MOV      r4,r0
000008  b10c              CBZ      r4,|L12.14|
00000a  2002              MOVS     r0,#2
00000c  60e0              STR      r0,[r4,#0xc]
                  |L12.14|
00000e  4620              MOV      r0,r4
000010  bd10              POP      {r4,pc}
;;;695    cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}
                          ENDP


                          AREA ||i.cJSON_CreateNumber||, CODE, READONLY, ALIGN=1

                  cJSON_CreateNumber PROC
;;;697    cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}
;;;698    cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  f7fffffe          BL       cJSON_New_Item
00000a  4604              MOV      r4,r0
00000c  b144              CBZ      r4,|L13.32|
00000e  2003              MOVS     r0,#3
000010  60e0              STR      r0,[r4,#0xc]
000012  e9c45606          STRD     r5,r6,[r4,#0x18]
000016  4628              MOV      r0,r5
000018  4631              MOV      r1,r6
00001a  f7fffffe          BL       __aeabi_d2iz
00001e  6160              STR      r0,[r4,#0x14]
                  |L13.32|
000020  4620              MOV      r0,r4
000022  bd70              POP      {r4-r6,pc}
;;;699    cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}
                          ENDP


                          AREA ||i.cJSON_CreateObject||, CODE, READONLY, ALIGN=1

                  cJSON_CreateObject PROC
;;;700    cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}
;;;701    cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_New_Item
000006  4604              MOV      r4,r0
000008  b10c              CBZ      r4,|L14.14|
00000a  2006              MOVS     r0,#6
00000c  60e0              STR      r0,[r4,#0xc]
                  |L14.14|
00000e  4620              MOV      r0,r4
000010  bd10              POP      {r4,pc}
;;;702    
                          ENDP


                          AREA ||i.cJSON_CreateString||, CODE, READONLY, ALIGN=1

                  cJSON_CreateString PROC
;;;698    cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}
;;;699    cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  f7fffffe          BL       cJSON_New_Item
000008  4604              MOV      r4,r0
00000a  b12c              CBZ      r4,|L15.24|
00000c  2004              MOVS     r0,#4
00000e  60e0              STR      r0,[r4,#0xc]
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       cJSON_strdup
000016  6120              STR      r0,[r4,#0x10]
                  |L15.24|
000018  4620              MOV      r0,r4
00001a  bd70              POP      {r4-r6,pc}
;;;700    cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}
                          ENDP


                          AREA ||i.cJSON_CreateStringArray||, CODE, READONLY, ALIGN=1

                  cJSON_CreateStringArray PROC
;;;706    cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
;;;707    cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  2500              MOVS     r5,#0
00000a  46a9              MOV      r9,r5
00000c  f7fffffe          BL       cJSON_CreateArray
000010  4606              MOV      r6,r0
000012  2400              MOVS     r4,#0
000014  e00d              B        |L16.50|
                  |L16.22|
000016  f8570024          LDR      r0,[r7,r4,LSL #2]
00001a  f7fffffe          BL       cJSON_CreateString
00001e  4605              MOV      r5,r0
000020  b90c              CBNZ     r4,|L16.38|
000022  60b5              STR      r5,[r6,#8]
000024  e003              B        |L16.46|
                  |L16.38|
000026  4629              MOV      r1,r5
000028  4648              MOV      r0,r9
00002a  f7fffffe          BL       suffix_object
                  |L16.46|
00002e  46a9              MOV      r9,r5
000030  1c64              ADDS     r4,r4,#1
                  |L16.50|
000032  b10e              CBZ      r6,|L16.56|
000034  4544              CMP      r4,r8
000036  dbee              BLT      |L16.22|
                  |L16.56|
000038  4630              MOV      r0,r6
00003a  e8bd87f0          POP      {r4-r10,pc}
;;;708    
                          ENDP


                          AREA ||i.cJSON_CreateTrue||, CODE, READONLY, ALIGN=1

                  cJSON_CreateTrue PROC
;;;694    cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}
;;;695    cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_New_Item
000006  4604              MOV      r4,r0
000008  b10c              CBZ      r4,|L17.14|
00000a  2001              MOVS     r0,#1
00000c  60e0              STR      r0,[r4,#0xc]
                  |L17.14|
00000e  4620              MOV      r0,r4
000010  bd10              POP      {r4,pc}
;;;696    cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}
                          ENDP


                          AREA ||i.cJSON_Delete||, CODE, READONLY, ALIGN=2

                  cJSON_Delete PROC
;;;82     /* Delete a cJSON structure. */
;;;83     void cJSON_Delete(cJSON *c)
000000  b570              PUSH     {r4-r6,lr}
;;;84     {
000002  4604              MOV      r4,r0
;;;85     	cJSON *next;
;;;86     	while (c)
000004  e022              B        |L18.76|
                  |L18.6|
;;;87     	{
;;;88     		next=c->next;
000006  6825              LDR      r5,[r4,#0]
;;;89     		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
000008  89a0              LDRH     r0,[r4,#0xc]
00000a  f4107f80          TST      r0,#0x100
00000e  d104              BNE      |L18.26|
000010  68a0              LDR      r0,[r4,#8]
000012  b110              CBZ      r0,|L18.26|
000014  68a0              LDR      r0,[r4,#8]
000016  f7fffffe          BL       cJSON_Delete
                  |L18.26|
;;;90     		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
00001a  89a0              LDRH     r0,[r4,#0xc]
00001c  f4107f80          TST      r0,#0x100
000020  d105              BNE      |L18.46|
000022  6920              LDR      r0,[r4,#0x10]
000024  b118              CBZ      r0,|L18.46|
000026  490b              LDR      r1,|L18.84|
000028  6920              LDR      r0,[r4,#0x10]
00002a  6809              LDR      r1,[r1,#0]  ; cJSON_free
00002c  4788              BLX      r1
                  |L18.46|
;;;91     		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
00002e  89a0              LDRH     r0,[r4,#0xc]
000030  f4107f00          TST      r0,#0x200
000034  d105              BNE      |L18.66|
000036  6a20              LDR      r0,[r4,#0x20]
000038  b118              CBZ      r0,|L18.66|
00003a  4906              LDR      r1,|L18.84|
00003c  6a20              LDR      r0,[r4,#0x20]
00003e  6809              LDR      r1,[r1,#0]  ; cJSON_free
000040  4788              BLX      r1
                  |L18.66|
;;;92     		cJSON_free(c);
000042  4620              MOV      r0,r4
000044  4903              LDR      r1,|L18.84|
000046  6809              LDR      r1,[r1,#0]  ; cJSON_free
000048  4788              BLX      r1
;;;93     		c=next;
00004a  462c              MOV      r4,r5
                  |L18.76|
00004c  2c00              CMP      r4,#0                 ;86
00004e  d1da              BNE      |L18.6|
;;;94     	}
;;;95     }
000050  bd70              POP      {r4-r6,pc}
;;;96     
                          ENDP

000052  0000              DCW      0x0000
                  |L18.84|
                          DCD      cJSON_free

                          AREA ||i.cJSON_DeleteItemFromArray||, CODE, READONLY, ALIGN=1

                  cJSON_DeleteItemFromArray PROC
;;;680    	if (c->prev) c->prev->next=c->next;if (c->next) c->next->prev=c->prev;if (c==array->child) array->child=c->next;c->prev=c->next=0;return c;}
;;;681    void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       cJSON_DetachItemFromArray
00000e  4606              MOV      r6,r0
000010  f7fffffe          BL       cJSON_Delete
000014  bd70              POP      {r4-r6,pc}
;;;682    cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}
                          ENDP


                          AREA ||i.cJSON_DeleteItemFromObject||, CODE, READONLY, ALIGN=1

                  cJSON_DeleteItemFromObject PROC
;;;682    cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}
;;;683    void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       cJSON_DetachItemFromObject
00000e  4606              MOV      r6,r0
000010  f7fffffe          BL       cJSON_Delete
000014  bd70              POP      {r4-r6,pc}
;;;684    
                          ENDP


                          AREA ||i.cJSON_DetachItemFromArray||, CODE, READONLY, ALIGN=1

                  cJSON_DetachItemFromArray PROC
;;;678    
;;;679    cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;
000000  b510              PUSH     {r4,lr}
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
000006  6891              LDR      r1,[r2,#8]
000008  e001              B        |L21.14|
                  |L21.10|
00000a  6809              LDR      r1,[r1,#0]
00000c  1e5b              SUBS     r3,r3,#1
                  |L21.14|
00000e  b109              CBZ      r1,|L21.20|
000010  2b00              CMP      r3,#0
000012  dcfa              BGT      |L21.10|
                  |L21.20|
000014  b909              CBNZ     r1,|L21.26|
000016  2000              MOVS     r0,#0
                  |L21.24|
;;;680    	if (c->prev) c->prev->next=c->next;if (c->next) c->next->prev=c->prev;if (c==array->child) array->child=c->next;c->prev=c->next=0;return c;}
000018  bd10              POP      {r4,pc}
                  |L21.26|
00001a  6848              LDR      r0,[r1,#4]
00001c  b110              CBZ      r0,|L21.36|
00001e  e9d10400          LDRD     r0,r4,[r1,#0]
000022  6020              STR      r0,[r4,#0]
                  |L21.36|
000024  6808              LDR      r0,[r1,#0]
000026  b110              CBZ      r0,|L21.46|
000028  e9d14000          LDRD     r4,r0,[r1,#0]
00002c  6060              STR      r0,[r4,#4]
                  |L21.46|
00002e  6890              LDR      r0,[r2,#8]
000030  4288              CMP      r0,r1
000032  d101              BNE      |L21.56|
000034  6808              LDR      r0,[r1,#0]
000036  6090              STR      r0,[r2,#8]
                  |L21.56|
000038  2000              MOVS     r0,#0
00003a  6008              STR      r0,[r1,#0]
00003c  6048              STR      r0,[r1,#4]
00003e  4608              MOV      r0,r1
000040  e7ea              B        |L21.24|
;;;681    void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}
                          ENDP


                          AREA ||i.cJSON_DetachItemFromObject||, CODE, READONLY, ALIGN=1

                  cJSON_DetachItemFromObject PROC
;;;681    void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}
;;;682    cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  2600              MOVS     r6,#0
00000a  68ac              LDR      r4,[r5,#8]
00000c  e001              B        |L22.18|
                  |L22.14|
00000e  1c76              ADDS     r6,r6,#1
000010  6824              LDR      r4,[r4,#0]
                  |L22.18|
000012  b12c              CBZ      r4,|L22.32|
000014  4639              MOV      r1,r7
000016  6a20              LDR      r0,[r4,#0x20]
000018  f7fffffe          BL       cJSON_strcasecmp
00001c  2800              CMP      r0,#0
00001e  d1f6              BNE      |L22.14|
                  |L22.32|
000020  b12c              CBZ      r4,|L22.46|
000022  4631              MOV      r1,r6
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       cJSON_DetachItemFromArray
                  |L22.42|
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L22.46|
00002e  2000              MOVS     r0,#0
000030  e7fb              B        |L22.42|
;;;683    void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}
                          ENDP


                          AREA ||i.cJSON_Duplicate||, CODE, READONLY, ALIGN=1

                  cJSON_Duplicate PROC
;;;709    /* Duplication */
;;;710    cJSON *cJSON_Duplicate(cJSON *item,int recurse)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;711    {
000004  4605              MOV      r5,r0
000006  4689              MOV      r9,r1
;;;712    	cJSON *newitem,*cptr,*nptr=0,*newchild;
000008  f04f0800          MOV      r8,#0
;;;713    	/* Bail on bad ptr */
;;;714    	if (!item) return 0;
00000c  b915              CBNZ     r5,|L23.20|
00000e  2000              MOVS     r0,#0
                  |L23.16|
;;;715    	/* Create new item */
;;;716    	newitem=cJSON_New_Item();
;;;717    	if (!newitem) return 0;
;;;718    	/* Copy over all vars */
;;;719    	newitem->type=item->type&(~cJSON_IsReference),newitem->valueint=item->valueint,newitem->valuedouble=item->valuedouble;
;;;720    	if (item->valuestring)	{newitem->valuestring=cJSON_strdup(item->valuestring);	if (!newitem->valuestring)	{cJSON_Delete(newitem);return 0;}}
;;;721    	if (item->string)		{newitem->string=cJSON_strdup(item->string);			if (!newitem->string)		{cJSON_Delete(newitem);return 0;}}
;;;722    	/* If non-recursive, then we're done! */
;;;723    	if (!recurse) return newitem;
;;;724    	/* Walk the ->next chain for the child. */
;;;725    	cptr=item->child;
;;;726    	while (cptr)
;;;727    	{
;;;728    		newchild=cJSON_Duplicate(cptr,1);		/* Duplicate (with recurse) each item in the ->next chain */
;;;729    		if (!newchild) {cJSON_Delete(newitem);return 0;}
;;;730    		if (nptr)	{nptr->next=newchild,newchild->prev=nptr;nptr=newchild;}	/* If newitem->child already set, then crosswire ->prev and ->next and move on */
;;;731    		else		{newitem->child=newchild;nptr=newchild;}					/* Set newitem->child and move to it */
;;;732    		cptr=cptr->next;
;;;733    	}
;;;734    	return newitem;
;;;735    }
000010  e8bd87f0          POP      {r4-r10,pc}
                  |L23.20|
000014  f7fffffe          BL       cJSON_New_Item
000018  4604              MOV      r4,r0                 ;716
00001a  b90c              CBNZ     r4,|L23.32|
00001c  2000              MOVS     r0,#0                 ;717
00001e  e7f7              B        |L23.16|
                  |L23.32|
000020  68e8              LDR      r0,[r5,#0xc]          ;719
000022  f4207080          BIC      r0,r0,#0x100          ;719
000026  60e0              STR      r0,[r4,#0xc]          ;719
000028  6968              LDR      r0,[r5,#0x14]         ;719
00002a  6160              STR      r0,[r4,#0x14]         ;719
00002c  e9d50106          LDRD     r0,r1,[r5,#0x18]      ;719
000030  e9c40106          STRD     r0,r1,[r4,#0x18]      ;719
000034  6928              LDR      r0,[r5,#0x10]         ;720
000036  b150              CBZ      r0,|L23.78|
000038  6928              LDR      r0,[r5,#0x10]         ;720
00003a  f7fffffe          BL       cJSON_strdup
00003e  6120              STR      r0,[r4,#0x10]         ;720
000040  6920              LDR      r0,[r4,#0x10]         ;720
000042  b920              CBNZ     r0,|L23.78|
000044  4620              MOV      r0,r4                 ;720
000046  f7fffffe          BL       cJSON_Delete
00004a  2000              MOVS     r0,#0                 ;720
00004c  e7e0              B        |L23.16|
                  |L23.78|
00004e  6a28              LDR      r0,[r5,#0x20]         ;721
000050  b150              CBZ      r0,|L23.104|
000052  6a28              LDR      r0,[r5,#0x20]         ;721
000054  f7fffffe          BL       cJSON_strdup
000058  6220              STR      r0,[r4,#0x20]         ;721
00005a  6a20              LDR      r0,[r4,#0x20]         ;721
00005c  b920              CBNZ     r0,|L23.104|
00005e  4620              MOV      r0,r4                 ;721
000060  f7fffffe          BL       cJSON_Delete
000064  2000              MOVS     r0,#0                 ;721
000066  e7d3              B        |L23.16|
                  |L23.104|
000068  f1b90f00          CMP      r9,#0                 ;723
00006c  d101              BNE      |L23.114|
00006e  4620              MOV      r0,r4                 ;723
000070  e7ce              B        |L23.16|
                  |L23.114|
000072  68af              LDR      r7,[r5,#8]            ;725
000074  e016              B        |L23.164|
                  |L23.118|
000076  2101              MOVS     r1,#1                 ;728
000078  4638              MOV      r0,r7                 ;728
00007a  f7fffffe          BL       cJSON_Duplicate
00007e  4606              MOV      r6,r0                 ;728
000080  b926              CBNZ     r6,|L23.140|
000082  4620              MOV      r0,r4                 ;729
000084  f7fffffe          BL       cJSON_Delete
000088  2000              MOVS     r0,#0                 ;729
00008a  e7c1              B        |L23.16|
                  |L23.140|
00008c  f1b80f00          CMP      r8,#0                 ;730
000090  d005              BEQ      |L23.158|
000092  f8c86000          STR      r6,[r8,#0]            ;730
000096  f8c68004          STR      r8,[r6,#4]            ;730
00009a  46b0              MOV      r8,r6                 ;730
00009c  e001              B        |L23.162|
                  |L23.158|
00009e  60a6              STR      r6,[r4,#8]            ;731
0000a0  46b0              MOV      r8,r6                 ;731
                  |L23.162|
0000a2  683f              LDR      r7,[r7,#0]            ;732
                  |L23.164|
0000a4  2f00              CMP      r7,#0                 ;726
0000a6  d1e6              BNE      |L23.118|
0000a8  4620              MOV      r0,r4                 ;734
0000aa  e7b1              B        |L23.16|
;;;736    
                          ENDP


                          AREA ||i.cJSON_GetArrayItem||, CODE, READONLY, ALIGN=1

                  cJSON_GetArrayItem PROC
;;;663    int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}
;;;664    cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
000000  4602              MOV      r2,r0
000002  6890              LDR      r0,[r2,#8]
000004  e001              B        |L24.10|
                  |L24.6|
000006  1e49              SUBS     r1,r1,#1
000008  6800              LDR      r0,[r0,#0]
                  |L24.10|
00000a  b108              CBZ      r0,|L24.16|
00000c  2900              CMP      r1,#0
00000e  dcfa              BGT      |L24.6|
                  |L24.16|
000010  4770              BX       lr
;;;665    cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
                          ENDP


                          AREA ||i.cJSON_GetArraySize||, CODE, READONLY, ALIGN=1

                  cJSON_GetArraySize PROC
;;;662    /* Get Array size/item / object item. */
;;;663    int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}
000000  4601              MOV      r1,r0
000002  688a              LDR      r2,[r1,#8]
000004  2000              MOVS     r0,#0
000006  e001              B        |L25.12|
                  |L25.8|
000008  1c40              ADDS     r0,r0,#1
00000a  6812              LDR      r2,[r2,#0]
                  |L25.12|
00000c  2a00              CMP      r2,#0
00000e  d1fb              BNE      |L25.8|
000010  4770              BX       lr
;;;664    cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
                          ENDP


                          AREA ||i.cJSON_GetErrorPtr||, CODE, READONLY, ALIGN=2

                  cJSON_GetErrorPtr PROC
;;;36     
;;;37     const char *cJSON_GetErrorPtr(void) {return ep;}
000000  4801              LDR      r0,|L26.8|
000002  6800              LDR      r0,[r0,#0]  ; ep
000004  4770              BX       lr
;;;38     
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      ||ep||

                          AREA ||i.cJSON_GetObjectItem||, CODE, READONLY, ALIGN=1

                  cJSON_GetObjectItem PROC
;;;664    cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
;;;665    cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  68ac              LDR      r4,[r5,#8]
000008  e000              B        |L27.12|
                  |L27.10|
00000a  6824              LDR      r4,[r4,#0]
                  |L27.12|
00000c  b12c              CBZ      r4,|L27.26|
00000e  4631              MOV      r1,r6
000010  6a20              LDR      r0,[r4,#0x20]
000012  f7fffffe          BL       cJSON_strcasecmp
000016  2800              CMP      r0,#0
000018  d1f7              BNE      |L27.10|
                  |L27.26|
00001a  4620              MOV      r0,r4
00001c  bd70              POP      {r4-r6,pc}
;;;666    
                          ENDP


                          AREA ||i.cJSON_InitHooks||, CODE, READONLY, ALIGN=2

                  cJSON_InitHooks PROC
;;;61     
;;;62     void cJSON_InitHooks(cJSON_Hooks* hooks)
000000  b930              CBNZ     r0,|L28.16|
;;;63     {
;;;64         if (!hooks) { /* Reset hooks */
;;;65             cJSON_malloc = malloc;
000002  490b              LDR      r1,|L28.48|
000004  4a0b              LDR      r2,|L28.52|
000006  6011              STR      r1,[r2,#0]  ; cJSON_malloc
;;;66             cJSON_free = free;
000008  490b              LDR      r1,|L28.56|
00000a  4a0c              LDR      r2,|L28.60|
00000c  6011              STR      r1,[r2,#0]  ; cJSON_free
                  |L28.14|
;;;67             return;
;;;68         }
;;;69     
;;;70     	cJSON_malloc = (hooks->malloc_fn)?hooks->malloc_fn:malloc;
;;;71     	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
;;;72     }
00000e  4770              BX       lr
                  |L28.16|
000010  6801              LDR      r1,[r0,#0]            ;70
000012  b109              CBZ      r1,|L28.24|
000014  6801              LDR      r1,[r0,#0]            ;70
000016  e000              B        |L28.26|
                  |L28.24|
000018  4905              LDR      r1,|L28.48|
                  |L28.26|
00001a  4a06              LDR      r2,|L28.52|
00001c  6011              STR      r1,[r2,#0]            ;70  ; cJSON_malloc
00001e  6841              LDR      r1,[r0,#4]            ;71
000020  b109              CBZ      r1,|L28.38|
000022  6841              LDR      r1,[r0,#4]            ;71
000024  e000              B        |L28.40|
                  |L28.38|
000026  4904              LDR      r1,|L28.56|
                  |L28.40|
000028  4a04              LDR      r2,|L28.60|
00002a  6011              STR      r1,[r2,#0]            ;71  ; cJSON_free
00002c  bf00              NOP      
00002e  e7ee              B        |L28.14|
;;;73     
                          ENDP

                  |L28.48|
                          DCD      malloc
                  |L28.52|
                          DCD      cJSON_malloc
                  |L28.56|
                          DCD      free
                  |L28.60|
                          DCD      cJSON_free

                          AREA ||i.cJSON_InsertItemInArray||, CODE, READONLY, ALIGN=1

                  cJSON_InsertItemInArray PROC
;;;685    /* Replace array/object items with new ones. */
;;;686    void   cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) {cJSON_AddItemToArray(array,newitem);return;}
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  68b5              LDR      r5,[r6,#8]
00000c  e001              B        |L29.18|
                  |L29.14|
00000e  682d              LDR      r5,[r5,#0]
000010  1e7f              SUBS     r7,r7,#1
                  |L29.18|
000012  b10d              CBZ      r5,|L29.24|
000014  2f00              CMP      r7,#0
000016  dcfa              BGT      |L29.14|
                  |L29.24|
000018  b92d              CBNZ     r5,|L29.38|
00001a  4621              MOV      r1,r4
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       cJSON_AddItemToArray
                  |L29.34|
;;;687    	newitem->next=c;newitem->prev=c->prev;c->prev=newitem;if (c==array->child) array->child=newitem; else newitem->prev->next=newitem;}
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L29.38|
000026  6025              STR      r5,[r4,#0]
000028  6868              LDR      r0,[r5,#4]
00002a  6060              STR      r0,[r4,#4]
00002c  606c              STR      r4,[r5,#4]
00002e  68b0              LDR      r0,[r6,#8]
000030  42a8              CMP      r0,r5
000032  d101              BNE      |L29.56|
000034  60b4              STR      r4,[r6,#8]
000036  e001              B        |L29.60|
                  |L29.56|
000038  6860              LDR      r0,[r4,#4]
00003a  6004              STR      r4,[r0,#0]
                  |L29.60|
00003c  bf00              NOP      
00003e  e7f0              B        |L29.34|
;;;688    void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;
                          ENDP


                          AREA ||i.cJSON_Minify||, CODE, READONLY, ALIGN=1

                  cJSON_Minify PROC
;;;736    
;;;737    void cJSON_Minify(char *json)
000000  4601              MOV      r1,r0
;;;738    {
;;;739    	char *into=json;
;;;740    	while (*json)
000002  e055              B        |L30.176|
                  |L30.4|
;;;741    	{
;;;742    		if (*json==' ') json++;
000004  7802              LDRB     r2,[r0,#0]
000006  2a20              CMP      r2,#0x20
000008  d101              BNE      |L30.14|
00000a  1c40              ADDS     r0,r0,#1
00000c  e050              B        |L30.176|
                  |L30.14|
;;;743    		else if (*json=='\t') json++;	/* Whitespace characters. */
00000e  7802              LDRB     r2,[r0,#0]
000010  2a09              CMP      r2,#9
000012  d101              BNE      |L30.24|
000014  1c40              ADDS     r0,r0,#1
000016  e04b              B        |L30.176|
                  |L30.24|
;;;744    		else if (*json=='\r') json++;
000018  7802              LDRB     r2,[r0,#0]
00001a  2a0d              CMP      r2,#0xd
00001c  d101              BNE      |L30.34|
00001e  1c40              ADDS     r0,r0,#1
000020  e046              B        |L30.176|
                  |L30.34|
;;;745    		else if (*json=='\n') json++;
000022  7802              LDRB     r2,[r0,#0]
000024  2a0a              CMP      r2,#0xa
000026  d101              BNE      |L30.44|
000028  1c40              ADDS     r0,r0,#1
00002a  e041              B        |L30.176|
                  |L30.44|
;;;746    		else if (*json=='/' && json[1]=='/')  while (*json && *json!='\n') json++;	/* double-slash comments, to end of line. */
00002c  7802              LDRB     r2,[r0,#0]
00002e  2a2f              CMP      r2,#0x2f
000030  d10b              BNE      |L30.74|
000032  7842              LDRB     r2,[r0,#1]
000034  2a2f              CMP      r2,#0x2f
000036  d108              BNE      |L30.74|
000038  e000              B        |L30.60|
                  |L30.58|
00003a  1c40              ADDS     r0,r0,#1
                  |L30.60|
00003c  7802              LDRB     r2,[r0,#0]
00003e  2a00              CMP      r2,#0
000040  d036              BEQ      |L30.176|
000042  7802              LDRB     r2,[r0,#0]
000044  2a0a              CMP      r2,#0xa
000046  d033              BEQ      |L30.176|
000048  e7f7              B        |L30.58|
                  |L30.74|
;;;747    		else if (*json=='/' && json[1]=='*') {while (*json && !(*json=='*' && json[1]=='/')) json++;json+=2;}	/* multiline comments. */
00004a  7802              LDRB     r2,[r0,#0]
00004c  2a2f              CMP      r2,#0x2f
00004e  d10e              BNE      |L30.110|
000050  7842              LDRB     r2,[r0,#1]
000052  2a2a              CMP      r2,#0x2a
000054  d10b              BNE      |L30.110|
000056  e000              B        |L30.90|
                  |L30.88|
000058  1c40              ADDS     r0,r0,#1
                  |L30.90|
00005a  7802              LDRB     r2,[r0,#0]
00005c  b12a              CBZ      r2,|L30.106|
00005e  7802              LDRB     r2,[r0,#0]
000060  2a2a              CMP      r2,#0x2a
000062  d1f9              BNE      |L30.88|
000064  7842              LDRB     r2,[r0,#1]
000066  2a2f              CMP      r2,#0x2f
000068  d1f6              BNE      |L30.88|
                  |L30.106|
00006a  1c80              ADDS     r0,r0,#2
00006c  e020              B        |L30.176|
                  |L30.110|
;;;748    		else if (*json=='\"'){*into++=*json++;while (*json && *json!='\"'){if (*json=='\\') *into++=*json++;*into++=*json++;}*into++=*json++;} /* string literals, which are \" sensitive. */
00006e  7802              LDRB     r2,[r0,#0]
000070  2a22              CMP      r2,#0x22
000072  d119              BNE      |L30.168|
000074  f8102b01          LDRB     r2,[r0],#1
000078  f8012b01          STRB     r2,[r1],#1
00007c  e00a              B        |L30.148|
                  |L30.126|
00007e  7802              LDRB     r2,[r0,#0]
000080  2a5c              CMP      r2,#0x5c
000082  d103              BNE      |L30.140|
000084  f8102b01          LDRB     r2,[r0],#1
000088  f8012b01          STRB     r2,[r1],#1
                  |L30.140|
00008c  f8102b01          LDRB     r2,[r0],#1
000090  f8012b01          STRB     r2,[r1],#1
                  |L30.148|
000094  7802              LDRB     r2,[r0,#0]
000096  b112              CBZ      r2,|L30.158|
000098  7802              LDRB     r2,[r0,#0]
00009a  2a22              CMP      r2,#0x22
00009c  d1ef              BNE      |L30.126|
                  |L30.158|
00009e  f8102b01          LDRB     r2,[r0],#1
0000a2  f8012b01          STRB     r2,[r1],#1
0000a6  e003              B        |L30.176|
                  |L30.168|
;;;749    		else *into++=*json++;			/* All other characters. */
0000a8  f8102b01          LDRB     r2,[r0],#1
0000ac  f8012b01          STRB     r2,[r1],#1
                  |L30.176|
0000b0  7802              LDRB     r2,[r0,#0]            ;740
0000b2  2a00              CMP      r2,#0                 ;740
0000b4  d1a6              BNE      |L30.4|
;;;750    	}
;;;751    	*into=0;	/* and null-terminate. */
0000b6  700a              STRB     r2,[r1,#0]
;;;752    }
0000b8  4770              BX       lr
                          ENDP


                          AREA ||i.cJSON_New_Item||, CODE, READONLY, ALIGN=2

                  cJSON_New_Item PROC
;;;74     /* Internal constructor. */
;;;75     static cJSON *cJSON_New_Item(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77     	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
000002  2028              MOVS     r0,#0x28
000004  4905              LDR      r1,|L31.28|
000006  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
000008  4788              BLX      r1
00000a  4604              MOV      r4,r0
;;;78     	if (node) memset(node,0,sizeof(cJSON));
00000c  b11c              CBZ      r4,|L31.22|
00000e  2128              MOVS     r1,#0x28
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       __aeabi_memclr4
                  |L31.22|
;;;79     	return node;
000016  4620              MOV      r0,r4
;;;80     }
000018  bd10              POP      {r4,pc}
;;;81     
                          ENDP

00001a  0000              DCW      0x0000
                  |L31.28|
                          DCD      cJSON_malloc

                          AREA ||i.cJSON_Parse||, CODE, READONLY, ALIGN=1

                  cJSON_Parse PROC
;;;340    /* Default options for cJSON_Parse */
;;;341    cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       cJSON_ParseWithOpts
00000e  bd10              POP      {r4,pc}
;;;342    
                          ENDP


                          AREA ||i.cJSON_ParseWithOpts||, CODE, READONLY, ALIGN=2

                  cJSON_ParseWithOpts PROC
;;;324    /* Parse an object - create a new root, and populate. */
;;;325    cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;326    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;327    	const char *end=0;
00000a  2400              MOVS     r4,#0
;;;328    	cJSON *c=cJSON_New_Item();
00000c  f7fffffe          BL       cJSON_New_Item
000010  4607              MOV      r7,r0
;;;329    	ep=0;
000012  2000              MOVS     r0,#0
000014  4912              LDR      r1,|L33.96|
000016  6008              STR      r0,[r1,#0]  ; ep
;;;330    	if (!c) return 0;       /* memory fail */
000018  b90f              CBNZ     r7,|L33.30|
                  |L33.26|
;;;331    
;;;332    	end=parse_value(c,skip(value));
;;;333    	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
;;;334    
;;;335    	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
;;;336    	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
;;;337    	if (return_parse_end) *return_parse_end=end;
;;;338    	return c;
;;;339    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L33.30|
00001e  4640              MOV      r0,r8                 ;332
000020  f7fffffe          BL       skip
000024  4681              MOV      r9,r0                 ;332
000026  4649              MOV      r1,r9                 ;332
000028  4638              MOV      r0,r7                 ;332
00002a  f7fffffe          BL       parse_value
00002e  4604              MOV      r4,r0                 ;332
000030  b924              CBNZ     r4,|L33.60|
000032  4638              MOV      r0,r7                 ;333
000034  f7fffffe          BL       cJSON_Delete
000038  2000              MOVS     r0,#0                 ;333
00003a  e7ee              B        |L33.26|
                  |L33.60|
00003c  b166              CBZ      r6,|L33.88|
00003e  4620              MOV      r0,r4                 ;336
000040  f7fffffe          BL       skip
000044  4604              MOV      r4,r0                 ;336
000046  7820              LDRB     r0,[r4,#0]            ;336
000048  b130              CBZ      r0,|L33.88|
00004a  4638              MOV      r0,r7                 ;336
00004c  f7fffffe          BL       cJSON_Delete
000050  4803              LDR      r0,|L33.96|
000052  6004              STR      r4,[r0,#0]            ;336  ; ep
000054  2000              MOVS     r0,#0                 ;336
000056  e7e0              B        |L33.26|
                  |L33.88|
000058  b105              CBZ      r5,|L33.92|
00005a  602c              STR      r4,[r5,#0]            ;337
                  |L33.92|
00005c  4638              MOV      r0,r7                 ;338
00005e  e7dc              B        |L33.26|
;;;340    /* Default options for cJSON_Parse */
                          ENDP

                  |L33.96|
                          DCD      ||ep||

                          AREA ||i.cJSON_Print||, CODE, READONLY, ALIGN=1

                  cJSON_Print PROC
;;;343    /* Render a cJSON item/entity/structure to text. */
;;;344    char *cJSON_Print(cJSON *item)				{return print_value(item,0,1,0);}
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  2300              MOVS     r3,#0
000006  2201              MOVS     r2,#1
000008  4619              MOV      r1,r3
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       print_value
000010  bd10              POP      {r4,pc}
;;;345    char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0,0);}
                          ENDP


                          AREA ||i.cJSON_PrintBuffered||, CODE, READONLY, ALIGN=2

                  cJSON_PrintBuffered PROC
;;;346    
;;;347    char *cJSON_PrintBuffered(cJSON *item,int prebuffer,int fmt)
000000  b5fe              PUSH     {r1-r7,lr}
;;;348    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;349    	printbuffer p;
;;;350    	p.buffer=(char*)cJSON_malloc(prebuffer);
000008  4620              MOV      r0,r4
00000a  4907              LDR      r1,|L35.40|
00000c  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
00000e  4788              BLX      r1
000010  9000              STR      r0,[sp,#0]
;;;351    	p.length=prebuffer;
000012  9401              STR      r4,[sp,#4]
;;;352    	p.offset=0;
000014  2000              MOVS     r0,#0
000016  9002              STR      r0,[sp,#8]
;;;353    	return print_value(item,0,fmt,&p);
000018  466b              MOV      r3,sp
00001a  4632              MOV      r2,r6
00001c  2100              MOVS     r1,#0
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       print_value
;;;354    	return p.buffer;
;;;355    }
000024  bdfe              POP      {r1-r7,pc}
;;;356    
                          ENDP

000026  0000              DCW      0x0000
                  |L35.40|
                          DCD      cJSON_malloc

                          AREA ||i.cJSON_PrintUnformatted||, CODE, READONLY, ALIGN=1

                  cJSON_PrintUnformatted PROC
;;;344    char *cJSON_Print(cJSON *item)				{return print_value(item,0,1,0);}
;;;345    char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0,0);}
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  2300              MOVS     r3,#0
000006  461a              MOV      r2,r3
000008  4619              MOV      r1,r3
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       print_value
000010  bd10              POP      {r4,pc}
;;;346    
                          ENDP


                          AREA ||i.cJSON_ReplaceItemInArray||, CODE, READONLY, ALIGN=1

                  cJSON_ReplaceItemInArray PROC
;;;687    	newitem->next=c;newitem->prev=c->prev;c->prev=newitem;if (c==array->child) array->child=newitem; else newitem->prev->next=newitem;}
;;;688    void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  68b5              LDR      r5,[r6,#8]
00000c  e001              B        |L37.18|
                  |L37.14|
00000e  682d              LDR      r5,[r5,#0]
000010  1e7f              SUBS     r7,r7,#1
                  |L37.18|
000012  b10d              CBZ      r5,|L37.24|
000014  2f00              CMP      r7,#0
000016  dcfa              BGT      |L37.14|
                  |L37.24|
000018  b90d              CBNZ     r5,|L37.30|
                  |L37.26|
;;;689    	newitem->next=c->next;newitem->prev=c->prev;if (newitem->next) newitem->next->prev=newitem;
;;;690    	if (c==array->child) array->child=newitem; else newitem->prev->next=newitem;c->next=c->prev=0;cJSON_Delete(c);}
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L37.30|
00001e  6828              LDR      r0,[r5,#0]            ;689
000020  6020              STR      r0,[r4,#0]            ;689
000022  6868              LDR      r0,[r5,#4]            ;689
000024  6060              STR      r0,[r4,#4]            ;689
000026  6820              LDR      r0,[r4,#0]            ;689
000028  b108              CBZ      r0,|L37.46|
00002a  6820              LDR      r0,[r4,#0]            ;689
00002c  6044              STR      r4,[r0,#4]            ;689
                  |L37.46|
00002e  68b0              LDR      r0,[r6,#8]
000030  42a8              CMP      r0,r5
000032  d101              BNE      |L37.56|
000034  60b4              STR      r4,[r6,#8]
000036  e001              B        |L37.60|
                  |L37.56|
000038  6860              LDR      r0,[r4,#4]
00003a  6004              STR      r4,[r0,#0]
                  |L37.60|
00003c  2000              MOVS     r0,#0
00003e  6068              STR      r0,[r5,#4]
000040  6028              STR      r0,[r5,#0]
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       cJSON_Delete
000048  bf00              NOP      
00004a  e7e6              B        |L37.26|
;;;691    void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}
                          ENDP


                          AREA ||i.cJSON_ReplaceItemInObject||, CODE, READONLY, ALIGN=1

                  cJSON_ReplaceItemInObject PROC
;;;690    	if (c==array->child) array->child=newitem; else newitem->prev->next=newitem;c->next=c->prev=0;cJSON_Delete(c);}
;;;691    void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  f04f0800          MOV      r8,#0
00000e  68ac              LDR      r4,[r5,#8]
000010  e002              B        |L38.24|
                  |L38.18|
000012  f1080801          ADD      r8,r8,#1
000016  6824              LDR      r4,[r4,#0]
                  |L38.24|
000018  b12c              CBZ      r4,|L38.38|
00001a  4631              MOV      r1,r6
00001c  6a20              LDR      r0,[r4,#0x20]
00001e  f7fffffe          BL       cJSON_strcasecmp
000022  2800              CMP      r0,#0
000024  d1f5              BNE      |L38.18|
                  |L38.38|
000026  b144              CBZ      r4,|L38.58|
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       cJSON_strdup
00002e  6238              STR      r0,[r7,#0x20]
000030  463a              MOV      r2,r7
000032  4641              MOV      r1,r8
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       cJSON_ReplaceItemInArray
                  |L38.58|
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;692    
                          ENDP


                          AREA ||i.cJSON_strcasecmp||, CODE, READONLY, ALIGN=1

                  cJSON_strcasecmp PROC
;;;38     
;;;39     static int cJSON_strcasecmp(const char *s1,const char *s2)
000000  b570              PUSH     {r4-r6,lr}
;;;40     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;41     	if (!s1) return (s1==s2)?0:1;if (!s2) return 1;
000006  b92c              CBNZ     r4,|L39.20|
000008  42ac              CMP      r4,r5
00000a  d001              BEQ      |L39.16|
00000c  2001              MOVS     r0,#1
                  |L39.14|
;;;42     	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
;;;43     	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
;;;44     }
00000e  bd70              POP      {r4-r6,pc}
                  |L39.16|
000010  2000              MOVS     r0,#0                 ;41
000012  e7fc              B        |L39.14|
                  |L39.20|
000014  b90d              CBNZ     r5,|L39.26|
000016  2001              MOVS     r0,#1                 ;41
000018  e7f9              B        |L39.14|
                  |L39.26|
00001a  e005              B        |L39.40|
                  |L39.28|
00001c  7820              LDRB     r0,[r4,#0]            ;42
00001e  b908              CBNZ     r0,|L39.36|
000020  2000              MOVS     r0,#0                 ;42
000022  e7f4              B        |L39.14|
                  |L39.36|
000024  1c64              ADDS     r4,r4,#1              ;42
000026  1c6d              ADDS     r5,r5,#1              ;42
                  |L39.40|
000028  7820              LDRB     r0,[r4,#0]            ;42
00002a  f7fffffe          BL       tolower
00002e  4606              MOV      r6,r0                 ;42
000030  7828              LDRB     r0,[r5,#0]            ;42
000032  f7fffffe          BL       tolower
000036  4286              CMP      r6,r0                 ;42
000038  d0f0              BEQ      |L39.28|
00003a  7820              LDRB     r0,[r4,#0]            ;43
00003c  f7fffffe          BL       tolower
000040  4606              MOV      r6,r0                 ;43
000042  7828              LDRB     r0,[r5,#0]            ;43
000044  f7fffffe          BL       tolower
000048  1a30              SUBS     r0,r6,r0              ;43
00004a  e7e0              B        |L39.14|
;;;45     
                          ENDP


                          AREA ||i.cJSON_strdup||, CODE, READONLY, ALIGN=2

                  cJSON_strdup PROC
;;;50     
;;;51     static char* cJSON_strdup(const char* str)
000000  b570              PUSH     {r4-r6,lr}
;;;52     {
000002  4604              MOV      r4,r0
;;;53           size_t len;
;;;54           char* copy;
;;;55     
;;;56           len = strlen(str) + 1;
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       strlen
00000a  1c45              ADDS     r5,r0,#1
;;;57           if (!(copy = (char*)cJSON_malloc(len))) return 0;
00000c  4628              MOV      r0,r5
00000e  4906              LDR      r1,|L40.40|
000010  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
000012  4788              BLX      r1
000014  0006              MOVS     r6,r0
000016  d100              BNE      |L40.26|
                  |L40.24|
;;;58           memcpy(copy,str,len);
;;;59           return copy;
;;;60     }
000018  bd70              POP      {r4-r6,pc}
                  |L40.26|
00001a  462a              MOV      r2,r5                 ;58
00001c  4621              MOV      r1,r4                 ;58
00001e  4630              MOV      r0,r6                 ;58
000020  f7fffffe          BL       __aeabi_memcpy
000024  4630              MOV      r0,r6                 ;59
000026  e7f7              B        |L40.24|
;;;61     
                          ENDP

                  |L40.40|
                          DCD      cJSON_malloc

                          AREA ||i.create_reference||, CODE, READONLY, ALIGN=1

                  create_reference PROC
;;;669    /* Utility for handling references. */
;;;670    static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  f7fffffe          BL       cJSON_New_Item
000008  4604              MOV      r4,r0
00000a  b90c              CBNZ     r4,|L41.16|
00000c  2000              MOVS     r0,#0
                  |L41.14|
00000e  bd70              POP      {r4-r6,pc}
                  |L41.16|
000010  2228              MOVS     r2,#0x28
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       __aeabi_memcpy4
00001a  2000              MOVS     r0,#0
00001c  6220              STR      r0,[r4,#0x20]
00001e  68e0              LDR      r0,[r4,#0xc]
000020  f4407080          ORR      r0,r0,#0x100
000024  60e0              STR      r0,[r4,#0xc]
000026  2000              MOVS     r0,#0
000028  6060              STR      r0,[r4,#4]
00002a  6020              STR      r0,[r4,#0]
00002c  4620              MOV      r0,r4
00002e  e7ee              B        |L41.14|
;;;671    
                          ENDP


                          AREA ||i.ensure||, CODE, READONLY, ALIGN=2

                  ensure PROC
;;;122    
;;;123    static char* ensure(printbuffer *p,int needed)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;124    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;125    	char *newbuffer;int newsize;
;;;126    	if (!p || !p->buffer) return 0;
000008  b10c              CBZ      r4,|L42.14|
00000a  6820              LDR      r0,[r4,#0]
00000c  b910              CBNZ     r0,|L42.20|
                  |L42.14|
00000e  2000              MOVS     r0,#0
                  |L42.16|
;;;127    	needed+=p->offset;
;;;128    	if (needed<=p->length) return p->buffer+p->offset;
;;;129    
;;;130    	newsize=pow2gt(needed);
;;;131    	newbuffer=(char*)cJSON_malloc(newsize);
;;;132    	if (!newbuffer) {cJSON_free(p->buffer);p->length=0,p->buffer=0;return 0;}
;;;133    	if (newbuffer) memcpy(newbuffer,p->buffer,p->length);
;;;134    	cJSON_free(p->buffer);
;;;135    	p->length=newsize;
;;;136    	p->buffer=newbuffer;
;;;137    	return newbuffer+p->offset;
;;;138    }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L42.20|
000014  68a0              LDR      r0,[r4,#8]            ;127
000016  4406              ADD      r6,r6,r0              ;127
000018  6860              LDR      r0,[r4,#4]            ;128
00001a  42b0              CMP      r0,r6                 ;128
00001c  db03              BLT      |L42.38|
00001e  68a1              LDR      r1,[r4,#8]            ;128
000020  6820              LDR      r0,[r4,#0]            ;128
000022  4408              ADD      r0,r0,r1              ;128
000024  e7f4              B        |L42.16|
                  |L42.38|
000026  4630              MOV      r0,r6                 ;130
000028  f7fffffe          BL       pow2gt
00002c  4607              MOV      r7,r0                 ;130
00002e  4638              MOV      r0,r7                 ;131
000030  490d              LDR      r1,|L42.104|
000032  6809              LDR      r1,[r1,#0]            ;131  ; cJSON_malloc
000034  4788              BLX      r1                    ;131
000036  4605              MOV      r5,r0                 ;131
000038  b93d              CBNZ     r5,|L42.74|
00003a  490c              LDR      r1,|L42.108|
00003c  6820              LDR      r0,[r4,#0]            ;132
00003e  6809              LDR      r1,[r1,#0]            ;132  ; cJSON_free
000040  4788              BLX      r1                    ;132
000042  2000              MOVS     r0,#0                 ;132
000044  6060              STR      r0,[r4,#4]            ;132
000046  6020              STR      r0,[r4,#0]            ;132
000048  e7e2              B        |L42.16|
                  |L42.74|
00004a  b125              CBZ      r5,|L42.86|
00004c  4628              MOV      r0,r5                 ;133
00004e  e9d41200          LDRD     r1,r2,[r4,#0]         ;133
000052  f7fffffe          BL       __aeabi_memcpy
                  |L42.86|
000056  4905              LDR      r1,|L42.108|
000058  6820              LDR      r0,[r4,#0]            ;134
00005a  6809              LDR      r1,[r1,#0]            ;134  ; cJSON_free
00005c  4788              BLX      r1                    ;134
00005e  6067              STR      r7,[r4,#4]            ;135
000060  6025              STR      r5,[r4,#0]            ;136
000062  68a0              LDR      r0,[r4,#8]            ;137
000064  4428              ADD      r0,r0,r5              ;137
000066  e7d3              B        |L42.16|
;;;139    
                          ENDP

                  |L42.104|
                          DCD      cJSON_malloc
                  |L42.108|
                          DCD      cJSON_free

                          AREA ||i.parse_array||, CODE, READONLY, ALIGN=2

                  parse_array PROC
;;;407    /* Build an array from input text. */
;;;408    static const char *parse_array(cJSON *item,const char *value)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;409    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;410    	cJSON *child;
;;;411    	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
000008  7820              LDRB     r0,[r4,#0]
00000a  285b              CMP      r0,#0x5b
00000c  d004              BEQ      |L43.24|
00000e  4826              LDR      r0,|L43.168|
000010  6004              STR      r4,[r0,#0]  ; ep
000012  2000              MOVS     r0,#0
                  |L43.20|
;;;412    
;;;413    	item->type=cJSON_Array;
;;;414    	value=skip(value+1);
;;;415    	if (*value==']') return value+1;	/* empty array. */
;;;416    
;;;417    	item->child=child=cJSON_New_Item();
;;;418    	if (!item->child) return 0;		 /* memory fail */
;;;419    	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
;;;420    	if (!value) return 0;
;;;421    
;;;422    	while (*value==',')
;;;423    	{
;;;424    		cJSON *new_item;
;;;425    		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
;;;426    		child->next=new_item;new_item->prev=child;child=new_item;
;;;427    		value=skip(parse_value(child,skip(value+1)));
;;;428    		if (!value) return 0;	/* memory fail */
;;;429    	}
;;;430    
;;;431    	if (*value==']') return value+1;	/* end of array */
;;;432    	ep=value;return 0;	/* malformed. */
;;;433    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L43.24|
000018  2005              MOVS     r0,#5                 ;413
00001a  60e8              STR      r0,[r5,#0xc]          ;413
00001c  1c60              ADDS     r0,r4,#1              ;414
00001e  f7fffffe          BL       skip
000022  4604              MOV      r4,r0                 ;414
000024  7820              LDRB     r0,[r4,#0]            ;415
000026  285d              CMP      r0,#0x5d              ;415
000028  d101              BNE      |L43.46|
00002a  1c60              ADDS     r0,r4,#1              ;415
00002c  e7f2              B        |L43.20|
                  |L43.46|
00002e  f7fffffe          BL       cJSON_New_Item
000032  4606              MOV      r6,r0                 ;417
000034  60a8              STR      r0,[r5,#8]            ;417
000036  68a8              LDR      r0,[r5,#8]            ;418
000038  b908              CBNZ     r0,|L43.62|
00003a  2000              MOVS     r0,#0                 ;418
00003c  e7ea              B        |L43.20|
                  |L43.62|
00003e  4620              MOV      r0,r4                 ;419
000040  f7fffffe          BL       skip
000044  4680              MOV      r8,r0                 ;419
000046  4641              MOV      r1,r8                 ;419
000048  4630              MOV      r0,r6                 ;419
00004a  f7fffffe          BL       parse_value
00004e  4607              MOV      r7,r0                 ;419
000050  f7fffffe          BL       skip
000054  4604              MOV      r4,r0                 ;419
000056  b90c              CBNZ     r4,|L43.92|
000058  2000              MOVS     r0,#0                 ;420
00005a  e7db              B        |L43.20|
                  |L43.92|
00005c  e017              B        |L43.142|
                  |L43.94|
00005e  f7fffffe          BL       cJSON_New_Item
000062  0007              MOVS     r7,r0                 ;425
000064  d100              BNE      |L43.104|
000066  e7d5              B        |L43.20|
                  |L43.104|
000068  6037              STR      r7,[r6,#0]            ;426
00006a  607e              STR      r6,[r7,#4]            ;426
00006c  463e              MOV      r6,r7                 ;426
00006e  1c60              ADDS     r0,r4,#1              ;427
000070  f7fffffe          BL       skip
000074  4681              MOV      r9,r0                 ;427
000076  4649              MOV      r1,r9                 ;427
000078  4630              MOV      r0,r6                 ;427
00007a  f7fffffe          BL       parse_value
00007e  4680              MOV      r8,r0                 ;427
000080  f7fffffe          BL       skip
000084  4604              MOV      r4,r0                 ;427
000086  b90c              CBNZ     r4,|L43.140|
000088  2000              MOVS     r0,#0                 ;428
00008a  e7c3              B        |L43.20|
                  |L43.140|
00008c  bf00              NOP                            ;429
                  |L43.142|
00008e  7820              LDRB     r0,[r4,#0]            ;422
000090  282c              CMP      r0,#0x2c              ;422
000092  d0e4              BEQ      |L43.94|
000094  7820              LDRB     r0,[r4,#0]            ;431
000096  285d              CMP      r0,#0x5d              ;431
000098  d101              BNE      |L43.158|
00009a  1c60              ADDS     r0,r4,#1              ;431
00009c  e7ba              B        |L43.20|
                  |L43.158|
00009e  4802              LDR      r0,|L43.168|
0000a0  6004              STR      r4,[r0,#0]            ;432  ; ep
0000a2  2000              MOVS     r0,#0                 ;432
0000a4  e7b6              B        |L43.20|
;;;434    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L43.168|
                          DCD      ||ep||

                          AREA ||i.parse_hex4||, CODE, READONLY, ALIGN=1

                  parse_hex4 PROC
;;;178    
;;;179    static unsigned parse_hex4(const char *str)
000000  4601              MOV      r1,r0
;;;180    {
;;;181    	unsigned h=0;
000002  2200              MOVS     r2,#0
;;;182    	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
000004  7808              LDRB     r0,[r1,#0]
000006  2830              CMP      r0,#0x30
000008  db06              BLT      |L44.24|
00000a  7808              LDRB     r0,[r1,#0]
00000c  2839              CMP      r0,#0x39
00000e  dc03              BGT      |L44.24|
000010  7808              LDRB     r0,[r1,#0]
000012  3830              SUBS     r0,r0,#0x30
000014  4402              ADD      r2,r2,r0
000016  e015              B        |L44.68|
                  |L44.24|
000018  7808              LDRB     r0,[r1,#0]
00001a  2841              CMP      r0,#0x41
00001c  db06              BLT      |L44.44|
00001e  7808              LDRB     r0,[r1,#0]
000020  2846              CMP      r0,#0x46
000022  dc03              BGT      |L44.44|
000024  7808              LDRB     r0,[r1,#0]
000026  3837              SUBS     r0,r0,#0x37
000028  4402              ADD      r2,r2,r0
00002a  e00b              B        |L44.68|
                  |L44.44|
00002c  7808              LDRB     r0,[r1,#0]
00002e  2861              CMP      r0,#0x61
000030  db06              BLT      |L44.64|
000032  7808              LDRB     r0,[r1,#0]
000034  2866              CMP      r0,#0x66
000036  dc03              BGT      |L44.64|
000038  7808              LDRB     r0,[r1,#0]
00003a  3857              SUBS     r0,r0,#0x57
00003c  4402              ADD      r2,r2,r0
00003e  e001              B        |L44.68|
                  |L44.64|
000040  2000              MOVS     r0,#0
                  |L44.66|
;;;183    	h=h<<4;str++;
;;;184    	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
;;;185    	h=h<<4;str++;
;;;186    	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
;;;187    	h=h<<4;str++;
;;;188    	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
;;;189    	return h;
;;;190    }
000042  4770              BX       lr
                  |L44.68|
000044  0112              LSLS     r2,r2,#4              ;183
000046  1c49              ADDS     r1,r1,#1              ;183
000048  7808              LDRB     r0,[r1,#0]            ;184
00004a  2830              CMP      r0,#0x30              ;184
00004c  db06              BLT      |L44.92|
00004e  7808              LDRB     r0,[r1,#0]            ;184
000050  2839              CMP      r0,#0x39              ;184
000052  dc03              BGT      |L44.92|
000054  7808              LDRB     r0,[r1,#0]            ;184
000056  3830              SUBS     r0,r0,#0x30           ;184
000058  4402              ADD      r2,r2,r0              ;184
00005a  e015              B        |L44.136|
                  |L44.92|
00005c  7808              LDRB     r0,[r1,#0]            ;184
00005e  2841              CMP      r0,#0x41              ;184
000060  db06              BLT      |L44.112|
000062  7808              LDRB     r0,[r1,#0]            ;184
000064  2846              CMP      r0,#0x46              ;184
000066  dc03              BGT      |L44.112|
000068  7808              LDRB     r0,[r1,#0]            ;184
00006a  3837              SUBS     r0,r0,#0x37           ;184
00006c  4402              ADD      r2,r2,r0              ;184
00006e  e00b              B        |L44.136|
                  |L44.112|
000070  7808              LDRB     r0,[r1,#0]            ;184
000072  2861              CMP      r0,#0x61              ;184
000074  db06              BLT      |L44.132|
000076  7808              LDRB     r0,[r1,#0]            ;184
000078  2866              CMP      r0,#0x66              ;184
00007a  dc03              BGT      |L44.132|
00007c  7808              LDRB     r0,[r1,#0]            ;184
00007e  3857              SUBS     r0,r0,#0x57           ;184
000080  4402              ADD      r2,r2,r0              ;184
000082  e001              B        |L44.136|
                  |L44.132|
000084  2000              MOVS     r0,#0                 ;184
000086  e7dc              B        |L44.66|
                  |L44.136|
000088  0112              LSLS     r2,r2,#4              ;185
00008a  1c49              ADDS     r1,r1,#1              ;185
00008c  7808              LDRB     r0,[r1,#0]            ;186
00008e  2830              CMP      r0,#0x30              ;186
000090  db06              BLT      |L44.160|
000092  7808              LDRB     r0,[r1,#0]            ;186
000094  2839              CMP      r0,#0x39              ;186
000096  dc03              BGT      |L44.160|
000098  7808              LDRB     r0,[r1,#0]            ;186
00009a  3830              SUBS     r0,r0,#0x30           ;186
00009c  4402              ADD      r2,r2,r0              ;186
00009e  e015              B        |L44.204|
                  |L44.160|
0000a0  7808              LDRB     r0,[r1,#0]            ;186
0000a2  2841              CMP      r0,#0x41              ;186
0000a4  db06              BLT      |L44.180|
0000a6  7808              LDRB     r0,[r1,#0]            ;186
0000a8  2846              CMP      r0,#0x46              ;186
0000aa  dc03              BGT      |L44.180|
0000ac  7808              LDRB     r0,[r1,#0]            ;186
0000ae  3837              SUBS     r0,r0,#0x37           ;186
0000b0  4402              ADD      r2,r2,r0              ;186
0000b2  e00b              B        |L44.204|
                  |L44.180|
0000b4  7808              LDRB     r0,[r1,#0]            ;186
0000b6  2861              CMP      r0,#0x61              ;186
0000b8  db06              BLT      |L44.200|
0000ba  7808              LDRB     r0,[r1,#0]            ;186
0000bc  2866              CMP      r0,#0x66              ;186
0000be  dc03              BGT      |L44.200|
0000c0  7808              LDRB     r0,[r1,#0]            ;186
0000c2  3857              SUBS     r0,r0,#0x57           ;186
0000c4  4402              ADD      r2,r2,r0              ;186
0000c6  e001              B        |L44.204|
                  |L44.200|
0000c8  2000              MOVS     r0,#0                 ;186
0000ca  e7ba              B        |L44.66|
                  |L44.204|
0000cc  0112              LSLS     r2,r2,#4              ;187
0000ce  1c49              ADDS     r1,r1,#1              ;187
0000d0  7808              LDRB     r0,[r1,#0]            ;188
0000d2  2830              CMP      r0,#0x30              ;188
0000d4  db06              BLT      |L44.228|
0000d6  7808              LDRB     r0,[r1,#0]            ;188
0000d8  2839              CMP      r0,#0x39              ;188
0000da  dc03              BGT      |L44.228|
0000dc  7808              LDRB     r0,[r1,#0]            ;188
0000de  3830              SUBS     r0,r0,#0x30           ;188
0000e0  4402              ADD      r2,r2,r0              ;188
0000e2  e015              B        |L44.272|
                  |L44.228|
0000e4  7808              LDRB     r0,[r1,#0]            ;188
0000e6  2841              CMP      r0,#0x41              ;188
0000e8  db06              BLT      |L44.248|
0000ea  7808              LDRB     r0,[r1,#0]            ;188
0000ec  2846              CMP      r0,#0x46              ;188
0000ee  dc03              BGT      |L44.248|
0000f0  7808              LDRB     r0,[r1,#0]            ;188
0000f2  3837              SUBS     r0,r0,#0x37           ;188
0000f4  4402              ADD      r2,r2,r0              ;188
0000f6  e00b              B        |L44.272|
                  |L44.248|
0000f8  7808              LDRB     r0,[r1,#0]            ;188
0000fa  2861              CMP      r0,#0x61              ;188
0000fc  db06              BLT      |L44.268|
0000fe  7808              LDRB     r0,[r1,#0]            ;188
000100  2866              CMP      r0,#0x66              ;188
000102  dc03              BGT      |L44.268|
000104  7808              LDRB     r0,[r1,#0]            ;188
000106  3857              SUBS     r0,r0,#0x57           ;188
000108  4402              ADD      r2,r2,r0              ;188
00010a  e001              B        |L44.272|
                  |L44.268|
00010c  2000              MOVS     r0,#0                 ;188
00010e  e798              B        |L44.66|
                  |L44.272|
000110  4610              MOV      r0,r2                 ;189
000112  e796              B        |L44.66|
;;;191    
                          ENDP


                          AREA ||i.parse_number||, CODE, READONLY, ALIGN=2

                  parse_number PROC
;;;97     /* Parse the input text to generate a number, and populate the result into item. */
;;;98     static const char *parse_number(cJSON *item,const char *num)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;99     {
000004  b08b              SUB      sp,sp,#0x2c
000006  4683              MOV      r11,r0
000008  468a              MOV      r10,r1
;;;100    	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
00000a  2000              MOVS     r0,#0
00000c  4604              MOV      r4,r0
00000e  4605              MOV      r5,r0
000010  2600              MOVS     r6,#0
000012  4f67              LDR      r7,|L45.432|
000014  2100              MOVS     r1,#0
000016  4688              MOV      r8,r1
000018  4689              MOV      r9,r1
00001a  9009              STR      r0,[sp,#0x24]
00001c  2001              MOVS     r0,#1
00001e  9008              STR      r0,[sp,#0x20]
;;;101    
;;;102    	if (*num=='-') sign=-1,num++;	/* Has sign? */
000020  f89a0000          LDRB     r0,[r10,#0]
000024  282d              CMP      r0,#0x2d
000026  d102              BNE      |L45.46|
000028  4f62              LDR      r7,|L45.436|
00002a  f10a0a01          ADD      r10,r10,#1
                  |L45.46|
;;;103    	if (*num=='0') num++;			/* is zero */
00002e  f89a0000          LDRB     r0,[r10,#0]
000032  2830              CMP      r0,#0x30
000034  d101              BNE      |L45.58|
000036  f10a0a01          ADD      r10,r10,#1
                  |L45.58|
;;;104    	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
00003a  f89a0000          LDRB     r0,[r10,#0]
00003e  2831              CMP      r0,#0x31
000040  db22              BLT      |L45.136|
000042  f89a0000          LDRB     r0,[r10,#0]
000046  2839              CMP      r0,#0x39
000048  dc1e              BGT      |L45.136|
00004a  bf00              NOP      
                  |L45.76|
00004c  f81a1b01          LDRB     r1,[r10],#1
000050  f1a10030          SUB      r0,r1,#0x30
000054  f7fffffe          BL       __aeabi_i2d
000058  2200              MOVS     r2,#0
00005a  4b57              LDR      r3,|L45.440|
00005c  e9cd0106          STRD     r0,r1,[sp,#0x18]
000060  4620              MOV      r0,r4
000062  4629              MOV      r1,r5
000064  f7fffffe          BL       __aeabi_dmul
000068  e9cd0104          STRD     r0,r1,[sp,#0x10]
00006c  e9dd2306          LDRD     r2,r3,[sp,#0x18]
000070  f7fffffe          BL       __aeabi_dadd
000074  4604              MOV      r4,r0
000076  460d              MOV      r5,r1
000078  f89a0000          LDRB     r0,[r10,#0]
00007c  2830              CMP      r0,#0x30
00007e  db03              BLT      |L45.136|
000080  f89a0000          LDRB     r0,[r10,#0]
000084  2839              CMP      r0,#0x39
000086  dde1              BLE      |L45.76|
                  |L45.136|
;;;105    	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
000088  f89a0000          LDRB     r0,[r10,#0]
00008c  282e              CMP      r0,#0x2e
00008e  d130              BNE      |L45.242|
000090  f89a0001          LDRB     r0,[r10,#1]
000094  2830              CMP      r0,#0x30
000096  db2c              BLT      |L45.242|
000098  f89a0001          LDRB     r0,[r10,#1]
00009c  2839              CMP      r0,#0x39
00009e  dc28              BGT      |L45.242|
0000a0  f10a0a01          ADD      r10,r10,#1
0000a4  bf00              NOP      
                  |L45.166|
0000a6  f81a1b01          LDRB     r1,[r10],#1
0000aa  f1a10030          SUB      r0,r1,#0x30
0000ae  f7fffffe          BL       __aeabi_i2d
0000b2  2200              MOVS     r2,#0
0000b4  4b40              LDR      r3,|L45.440|
0000b6  e9cd0106          STRD     r0,r1,[sp,#0x18]
0000ba  4620              MOV      r0,r4
0000bc  4629              MOV      r1,r5
0000be  f7fffffe          BL       __aeabi_dmul
0000c2  e9cd0104          STRD     r0,r1,[sp,#0x10]
0000c6  e9dd2306          LDRD     r2,r3,[sp,#0x18]
0000ca  f7fffffe          BL       __aeabi_dadd
0000ce  4604              MOV      r4,r0
0000d0  460d              MOV      r5,r1
0000d2  2200              MOVS     r2,#0
0000d4  4b36              LDR      r3,|L45.432|
0000d6  4640              MOV      r0,r8
0000d8  4649              MOV      r1,r9
0000da  f7fffffe          BL       __aeabi_dsub
0000de  4680              MOV      r8,r0
0000e0  4689              MOV      r9,r1
0000e2  f89a0000          LDRB     r0,[r10,#0]
0000e6  2830              CMP      r0,#0x30
0000e8  db03              BLT      |L45.242|
0000ea  f89a0000          LDRB     r0,[r10,#0]
0000ee  2839              CMP      r0,#0x39
0000f0  ddd9              BLE      |L45.166|
                  |L45.242|
;;;106    	if (*num=='e' || *num=='E')		/* Exponent? */
0000f2  f89a0000          LDRB     r0,[r10,#0]
0000f6  2865              CMP      r0,#0x65
0000f8  d003              BEQ      |L45.258|
0000fa  f89a0000          LDRB     r0,[r10,#0]
0000fe  2845              CMP      r0,#0x45
000100  d123              BNE      |L45.330|
                  |L45.258|
;;;107    	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
000102  f10a0a01          ADD      r10,r10,#1
000106  f89a0000          LDRB     r0,[r10,#0]
00010a  282b              CMP      r0,#0x2b
00010c  d102              BNE      |L45.276|
00010e  f10a0a01          ADD      r10,r10,#1
000112  e008              B        |L45.294|
                  |L45.276|
000114  f89a0000          LDRB     r0,[r10,#0]
000118  282d              CMP      r0,#0x2d
00011a  d104              BNE      |L45.294|
00011c  f04f30ff          MOV      r0,#0xffffffff
000120  9008              STR      r0,[sp,#0x20]
000122  f10a0a01          ADD      r10,r10,#1
                  |L45.294|
;;;108    		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
000126  e008              B        |L45.314|
                  |L45.296|
000128  f81a0b01          LDRB     r0,[r10],#1
00012c  3830              SUBS     r0,r0,#0x30
00012e  9909              LDR      r1,[sp,#0x24]
000130  eb010181          ADD      r1,r1,r1,LSL #2
000134  eb000041          ADD      r0,r0,r1,LSL #1
000138  9009              STR      r0,[sp,#0x24]
                  |L45.314|
00013a  f89a0000          LDRB     r0,[r10,#0]
00013e  2830              CMP      r0,#0x30
000140  db03              BLT      |L45.330|
000142  f89a0000          LDRB     r0,[r10,#0]
000146  2839              CMP      r0,#0x39
000148  ddee              BLE      |L45.296|
                  |L45.330|
;;;109    	}
;;;110    
;;;111    	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
00014a  e9dd2108          LDRD     r2,r1,[sp,#0x20]
00014e  fb01f002          MUL      r0,r1,r2
000152  f7fffffe          BL       __aeabi_i2d
000156  4642              MOV      r2,r8
000158  464b              MOV      r3,r9
00015a  e9cd0100          STRD     r0,r1,[sp,#0]
00015e  f7fffffe          BL       __aeabi_dadd
000162  4602              MOV      r2,r0
000164  460b              MOV      r3,r1
000166  e9cd0102          STRD     r0,r1,[sp,#8]
00016a  2000              MOVS     r0,#0
00016c  4912              LDR      r1,|L45.440|
00016e  f7fffffe          BL       pow
000172  4622              MOV      r2,r4
000174  462b              MOV      r3,r5
000176  e9cd0106          STRD     r0,r1,[sp,#0x18]
00017a  4630              MOV      r0,r6
00017c  4639              MOV      r1,r7
00017e  f7fffffe          BL       __aeabi_dmul
000182  e9cd0104          STRD     r0,r1,[sp,#0x10]
000186  e9dd2306          LDRD     r2,r3,[sp,#0x18]
00018a  f7fffffe          BL       __aeabi_dmul
00018e  4604              MOV      r4,r0
000190  460d              MOV      r5,r1
;;;112    	
;;;113    	item->valuedouble=n;
000192  e9cb4506          STRD     r4,r5,[r11,#0x18]
;;;114    	item->valueint=(int)n;
000196  4620              MOV      r0,r4
000198  4629              MOV      r1,r5
00019a  f7fffffe          BL       __aeabi_d2iz
00019e  f8cb0014          STR      r0,[r11,#0x14]
;;;115    	item->type=cJSON_Number;
0001a2  2003              MOVS     r0,#3
0001a4  f8cb000c          STR      r0,[r11,#0xc]
;;;116    	return num;
0001a8  4650              MOV      r0,r10
;;;117    }
0001aa  b00b              ADD      sp,sp,#0x2c
0001ac  e8bd8ff0          POP      {r4-r11,pc}
;;;118    
                          ENDP

                  |L45.432|
                          DCD      0x3ff00000
                  |L45.436|
                          DCD      0xbff00000
                  |L45.440|
                          DCD      0x40240000

                          AREA ||i.parse_object||, CODE, READONLY, ALIGN=2

                  parse_object PROC
;;;515    /* Build an object from the text. */
;;;516    static const char *parse_object(cJSON *item,const char *value)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;517    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
;;;518    	cJSON *child;
;;;519    	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
000008  7820              LDRB     r0,[r4,#0]
00000a  287b              CMP      r0,#0x7b
00000c  d004              BEQ      |L46.24|
00000e  4840              LDR      r0,|L46.272|
000010  6004              STR      r4,[r0,#0]  ; ep
000012  2000              MOVS     r0,#0
                  |L46.20|
;;;520    	
;;;521    	item->type=cJSON_Object;
;;;522    	value=skip(value+1);
;;;523    	if (*value=='}') return value+1;	/* empty array. */
;;;524    	
;;;525    	item->child=child=cJSON_New_Item();
;;;526    	if (!item->child) return 0;
;;;527    	value=skip(parse_string(child,skip(value)));
;;;528    	if (!value) return 0;
;;;529    	child->string=child->valuestring;child->valuestring=0;
;;;530    	if (*value!=':') {ep=value;return 0;}	/* fail! */
;;;531    	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
;;;532    	if (!value) return 0;
;;;533    	
;;;534    	while (*value==',')
;;;535    	{
;;;536    		cJSON *new_item;
;;;537    		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
;;;538    		child->next=new_item;new_item->prev=child;child=new_item;
;;;539    		value=skip(parse_string(child,skip(value+1)));
;;;540    		if (!value) return 0;
;;;541    		child->string=child->valuestring;child->valuestring=0;
;;;542    		if (*value!=':') {ep=value;return 0;}	/* fail! */
;;;543    		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
;;;544    		if (!value) return 0;
;;;545    	}
;;;546    	
;;;547    	if (*value=='}') return value+1;	/* end of array */
;;;548    	ep=value;return 0;	/* malformed. */
;;;549    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L46.24|
000018  2006              MOVS     r0,#6                 ;521
00001a  60f0              STR      r0,[r6,#0xc]          ;521
00001c  1c60              ADDS     r0,r4,#1              ;522
00001e  f7fffffe          BL       skip
000022  4604              MOV      r4,r0                 ;522
000024  7820              LDRB     r0,[r4,#0]            ;523
000026  287d              CMP      r0,#0x7d              ;523
000028  d101              BNE      |L46.46|
00002a  1c60              ADDS     r0,r4,#1              ;523
00002c  e7f2              B        |L46.20|
                  |L46.46|
00002e  f7fffffe          BL       cJSON_New_Item
000032  4605              MOV      r5,r0                 ;525
000034  60b0              STR      r0,[r6,#8]            ;525
000036  68b0              LDR      r0,[r6,#8]            ;526
000038  b908              CBNZ     r0,|L46.62|
00003a  2000              MOVS     r0,#0                 ;526
00003c  e7ea              B        |L46.20|
                  |L46.62|
00003e  4620              MOV      r0,r4                 ;527
000040  f7fffffe          BL       skip
000044  4680              MOV      r8,r0                 ;527
000046  4641              MOV      r1,r8                 ;527
000048  4628              MOV      r0,r5                 ;527
00004a  f7fffffe          BL       parse_string
00004e  4607              MOV      r7,r0                 ;527
000050  f7fffffe          BL       skip
000054  4604              MOV      r4,r0                 ;527
000056  b90c              CBNZ     r4,|L46.92|
000058  2000              MOVS     r0,#0                 ;528
00005a  e7db              B        |L46.20|
                  |L46.92|
00005c  6928              LDR      r0,[r5,#0x10]         ;529
00005e  6228              STR      r0,[r5,#0x20]         ;529
000060  2000              MOVS     r0,#0                 ;529
000062  6128              STR      r0,[r5,#0x10]         ;529
000064  7820              LDRB     r0,[r4,#0]            ;530
000066  283a              CMP      r0,#0x3a              ;530
000068  d003              BEQ      |L46.114|
00006a  4829              LDR      r0,|L46.272|
00006c  6004              STR      r4,[r0,#0]            ;530  ; ep
00006e  2000              MOVS     r0,#0                 ;530
000070  e7d0              B        |L46.20|
                  |L46.114|
000072  1c60              ADDS     r0,r4,#1              ;531
000074  f7fffffe          BL       skip
000078  4680              MOV      r8,r0                 ;531
00007a  4641              MOV      r1,r8                 ;531
00007c  4628              MOV      r0,r5                 ;531
00007e  f7fffffe          BL       parse_value
000082  4607              MOV      r7,r0                 ;531
000084  f7fffffe          BL       skip
000088  4604              MOV      r4,r0                 ;531
00008a  b90c              CBNZ     r4,|L46.144|
00008c  2000              MOVS     r0,#0                 ;532
00008e  e7c1              B        |L46.20|
                  |L46.144|
000090  e031              B        |L46.246|
                  |L46.146|
000092  f7fffffe          BL       cJSON_New_Item
000096  0007              MOVS     r7,r0                 ;537
000098  d100              BNE      |L46.156|
00009a  e7bb              B        |L46.20|
                  |L46.156|
00009c  602f              STR      r7,[r5,#0]            ;538
00009e  607d              STR      r5,[r7,#4]            ;538
0000a0  463d              MOV      r5,r7                 ;538
0000a2  1c60              ADDS     r0,r4,#1              ;539
0000a4  f7fffffe          BL       skip
0000a8  4681              MOV      r9,r0                 ;539
0000aa  4649              MOV      r1,r9                 ;539
0000ac  4628              MOV      r0,r5                 ;539
0000ae  f7fffffe          BL       parse_string
0000b2  4680              MOV      r8,r0                 ;539
0000b4  f7fffffe          BL       skip
0000b8  4604              MOV      r4,r0                 ;539
0000ba  b90c              CBNZ     r4,|L46.192|
0000bc  2000              MOVS     r0,#0                 ;540
0000be  e7a9              B        |L46.20|
                  |L46.192|
0000c0  6928              LDR      r0,[r5,#0x10]         ;541
0000c2  6228              STR      r0,[r5,#0x20]         ;541
0000c4  2000              MOVS     r0,#0                 ;541
0000c6  6128              STR      r0,[r5,#0x10]         ;541
0000c8  7820              LDRB     r0,[r4,#0]            ;542
0000ca  283a              CMP      r0,#0x3a              ;542
0000cc  d003              BEQ      |L46.214|
0000ce  4810              LDR      r0,|L46.272|
0000d0  6004              STR      r4,[r0,#0]            ;542  ; ep
0000d2  2000              MOVS     r0,#0                 ;542
0000d4  e79e              B        |L46.20|
                  |L46.214|
0000d6  1c60              ADDS     r0,r4,#1              ;543
0000d8  f7fffffe          BL       skip
0000dc  4681              MOV      r9,r0                 ;543
0000de  4649              MOV      r1,r9                 ;543
0000e0  4628              MOV      r0,r5                 ;543
0000e2  f7fffffe          BL       parse_value
0000e6  4680              MOV      r8,r0                 ;543
0000e8  f7fffffe          BL       skip
0000ec  4604              MOV      r4,r0                 ;543
0000ee  b90c              CBNZ     r4,|L46.244|
0000f0  2000              MOVS     r0,#0                 ;544
0000f2  e78f              B        |L46.20|
                  |L46.244|
0000f4  bf00              NOP                            ;545
                  |L46.246|
0000f6  7820              LDRB     r0,[r4,#0]            ;534
0000f8  282c              CMP      r0,#0x2c              ;534
0000fa  d0ca              BEQ      |L46.146|
0000fc  7820              LDRB     r0,[r4,#0]            ;547
0000fe  287d              CMP      r0,#0x7d              ;547
000100  d101              BNE      |L46.262|
000102  1c60              ADDS     r0,r4,#1              ;547
000104  e786              B        |L46.20|
                  |L46.262|
000106  4802              LDR      r0,|L46.272|
000108  6004              STR      r4,[r0,#0]            ;548  ; ep
00010a  2000              MOVS     r0,#0                 ;548
00010c  e782              B        |L46.20|
;;;550    
                          ENDP

00010e  0000              DCW      0x0000
                  |L46.272|
                          DCD      ||ep||

                          AREA ||i.parse_string||, CODE, READONLY, ALIGN=2

                  parse_string PROC
;;;193    static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
;;;194    static const char *parse_string(cJSON *item,const char *str)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;195    {
000004  4683              MOV      r11,r0
000006  4688              MOV      r8,r1
;;;196    	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
000008  f1080401          ADD      r4,r8,#1
00000c  2700              MOVS     r7,#0
;;;197    	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
00000e  f8980000          LDRB     r0,[r8,#0]
000012  2822              CMP      r0,#0x22
000014  d005              BEQ      |L47.34|
000016  486a              LDR      r0,|L47.448|
000018  f8c08000          STR      r8,[r0,#0]  ; ep
00001c  2000              MOVS     r0,#0
                  |L47.30|
;;;198    	
;;;199    	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
;;;200    	
;;;201    	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
;;;202    	if (!out) return 0;
;;;203    	
;;;204    	ptr=str+1;ptr2=out;
;;;205    	while (*ptr!='\"' && *ptr)
;;;206    	{
;;;207    		if (*ptr!='\\') *ptr2++=*ptr++;
;;;208    		else
;;;209    		{
;;;210    			ptr++;
;;;211    			switch (*ptr)
;;;212    			{
;;;213    				case 'b': *ptr2++='\b';	break;
;;;214    				case 'f': *ptr2++='\f';	break;
;;;215    				case 'n': *ptr2++='\n';	break;
;;;216    				case 'r': *ptr2++='\r';	break;
;;;217    				case 't': *ptr2++='\t';	break;
;;;218    				case 'u':	 /* transcode utf16 to utf8. */
;;;219    					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
;;;220    
;;;221    					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
;;;222    
;;;223    					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
;;;224    					{
;;;225    						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
;;;226    						uc2=parse_hex4(ptr+3);ptr+=6;
;;;227    						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
;;;228    						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
;;;229    					}
;;;230    
;;;231    					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
;;;232    					
;;;233    					switch (len) {
;;;234    						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
;;;235    						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
;;;236    						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
;;;237    						case 1: *--ptr2 =(uc | firstByteMark[len]);
;;;238    					}
;;;239    					ptr2+=len;
;;;240    					break;
;;;241    				default:  *ptr2++=*ptr; break;
;;;242    			}
;;;243    			ptr++;
;;;244    		}
;;;245    	}
;;;246    	*ptr2=0;
;;;247    	if (*ptr=='\"') ptr++;
;;;248    	item->valuestring=out;
;;;249    	item->type=cJSON_String;
;;;250    	return ptr;
;;;251    }
00001e  e8bd9ff0          POP      {r4-r12,pc}
                  |L47.34|
000022  e004              B        |L47.46|
                  |L47.36|
000024  f8141b01          LDRB     r1,[r4],#1            ;199
000028  295c              CMP      r1,#0x5c              ;199
00002a  d100              BNE      |L47.46|
00002c  1c64              ADDS     r4,r4,#1              ;199
                  |L47.46|
00002e  7820              LDRB     r0,[r4,#0]            ;199
000030  2822              CMP      r0,#0x22              ;199
000032  d004              BEQ      |L47.62|
000034  7820              LDRB     r0,[r4,#0]            ;199
000036  b110              CBZ      r0,|L47.62|
000038  1c78              ADDS     r0,r7,#1              ;199
00003a  0007              MOVS     r7,r0                 ;199
00003c  d1f2              BNE      |L47.36|
                  |L47.62|
00003e  1c78              ADDS     r0,r7,#1              ;201
000040  4960              LDR      r1,|L47.452|
000042  6809              LDR      r1,[r1,#0]            ;201  ; cJSON_malloc
000044  4788              BLX      r1                    ;201
000046  4681              MOV      r9,r0                 ;201
000048  f1b90f00          CMP      r9,#0                 ;202
00004c  d101              BNE      |L47.82|
00004e  2000              MOVS     r0,#0                 ;202
000050  e7e5              B        |L47.30|
                  |L47.82|
000052  f1080401          ADD      r4,r8,#1              ;204
000056  464d              MOV      r5,r9                 ;204
000058  e09e              B        |L47.408|
                  |L47.90|
00005a  7820              LDRB     r0,[r4,#0]            ;207
00005c  285c              CMP      r0,#0x5c              ;207
00005e  d004              BEQ      |L47.106|
000060  f8140b01          LDRB     r0,[r4],#1            ;207
000064  f8050b01          STRB     r0,[r5],#1            ;207
000068  e096              B        |L47.408|
                  |L47.106|
00006a  1c64              ADDS     r4,r4,#1              ;210
00006c  7820              LDRB     r0,[r4,#0]            ;211
00006e  2872              CMP      r0,#0x72              ;211
000070  d018              BEQ      |L47.164|
000072  dc06              BGT      |L47.130|
000074  2862              CMP      r0,#0x62              ;211
000076  d009              BEQ      |L47.140|
000078  2866              CMP      r0,#0x66              ;211
00007a  d00b              BEQ      |L47.148|
00007c  286e              CMP      r0,#0x6e              ;211
                  |L47.126|
00007e  d17d              BNE      |L47.380|
000080  e00c              B        |L47.156|
                  |L47.130|
000082  2874              CMP      r0,#0x74              ;211
000084  d012              BEQ      |L47.172|
000086  2875              CMP      r0,#0x75              ;211
000088  d1f9              BNE      |L47.126|
00008a  e013              B        |L47.180|
                  |L47.140|
00008c  2008              MOVS     r0,#8                 ;213
00008e  f8050b01          STRB     r0,[r5],#1            ;213
000092  e07f              B        |L47.404|
                  |L47.148|
000094  200c              MOVS     r0,#0xc               ;214
000096  f8050b01          STRB     r0,[r5],#1            ;214
00009a  e07b              B        |L47.404|
                  |L47.156|
00009c  200a              MOVS     r0,#0xa               ;215
00009e  f8050b01          STRB     r0,[r5],#1            ;215
0000a2  e077              B        |L47.404|
                  |L47.164|
0000a4  200d              MOVS     r0,#0xd               ;216
0000a6  f8050b01          STRB     r0,[r5],#1            ;216
0000aa  e073              B        |L47.404|
                  |L47.172|
0000ac  2009              MOVS     r0,#9                 ;217
0000ae  f8050b01          STRB     r0,[r5],#1            ;217
0000b2  e06f              B        |L47.404|
                  |L47.180|
0000b4  1c60              ADDS     r0,r4,#1              ;219
0000b6  f7fffffe          BL       parse_hex4
0000ba  4606              MOV      r6,r0                 ;219
0000bc  1d24              ADDS     r4,r4,#4              ;219
0000be  f5b64f5c          CMP      r6,#0xdc00            ;221
0000c2  d302              BCC      |L47.202|
0000c4  f5b64f60          CMP      r6,#0xe000            ;221
0000c8  d300              BCC      |L47.204|
                  |L47.202|
0000ca  b906              CBNZ     r6,|L47.206|
                  |L47.204|
0000cc  e062              B        |L47.404|
                  |L47.206|
0000ce  f5b64f58          CMP      r6,#0xd800            ;223
0000d2  d31c              BCC      |L47.270|
0000d4  f5b64f5c          CMP      r6,#0xdc00            ;223
0000d8  d219              BCS      |L47.270|
0000da  7860              LDRB     r0,[r4,#1]            ;225
0000dc  285c              CMP      r0,#0x5c              ;225
0000de  d102              BNE      |L47.230|
0000e0  78a0              LDRB     r0,[r4,#2]            ;225
0000e2  2875              CMP      r0,#0x75              ;225
0000e4  d000              BEQ      |L47.232|
                  |L47.230|
0000e6  e055              B        |L47.404|
                  |L47.232|
0000e8  1ce0              ADDS     r0,r4,#3              ;226
0000ea  f7fffffe          BL       parse_hex4
0000ee  4682              MOV      r10,r0                ;226
0000f0  1da4              ADDS     r4,r4,#6              ;226
0000f2  f5ba4f5c          CMP      r10,#0xdc00           ;227
0000f6  d302              BCC      |L47.254|
0000f8  f5ba4f60          CMP      r10,#0xe000           ;227
0000fc  d300              BCC      |L47.256|
                  |L47.254|
0000fe  e049              B        |L47.404|
                  |L47.256|
000100  f3c60109          UBFX     r1,r6,#0,#10          ;228
000104  4650              MOV      r0,r10                ;228
000106  f361209f          BFI      r0,r1,#10,#22         ;228
00010a  f5003680          ADD      r6,r0,#0x10000        ;228
                  |L47.270|
00010e  2704              MOVS     r7,#4                 ;231
000110  2e80              CMP      r6,#0x80              ;231
000112  d201              BCS      |L47.280|
000114  2701              MOVS     r7,#1                 ;231
000116  e008              B        |L47.298|
                  |L47.280|
000118  f5b66f00          CMP      r6,#0x800             ;231
00011c  d201              BCS      |L47.290|
00011e  2702              MOVS     r7,#2                 ;231
000120  e003              B        |L47.298|
                  |L47.290|
000122  f5b63f80          CMP      r6,#0x10000           ;231
000126  d200              BCS      |L47.298|
000128  2703              MOVS     r7,#3                 ;231
                  |L47.298|
00012a  443d              ADD      r5,r5,r7              ;231
00012c  2f01              CMP      r7,#1                 ;233
00012e  d020              BEQ      |L47.370|
000130  2f02              CMP      r7,#2                 ;233
000132  d015              BEQ      |L47.352|
000134  2f03              CMP      r7,#3                 ;233
000136  d00a              BEQ      |L47.334|
000138  2f04              CMP      r7,#4                 ;233
00013a  d124              BNE      |L47.390|
00013c  f00600bf          AND      r0,r6,#0xbf           ;234
000140  f0400180          ORR      r1,r0,#0x80           ;234
000144  1e68              SUBS     r0,r5,#1              ;234
000146  4605              MOV      r5,r0                 ;234
000148  7001              STRB     r1,[r0,#0]            ;234
00014a  09b6              LSRS     r6,r6,#6              ;234
00014c  bf00              NOP                            ;235
                  |L47.334|
00014e  f00600bf          AND      r0,r6,#0xbf           ;235
000152  f0400180          ORR      r1,r0,#0x80           ;235
000156  1e68              SUBS     r0,r5,#1              ;235
000158  4605              MOV      r5,r0                 ;235
00015a  7001              STRB     r1,[r0,#0]            ;235
00015c  09b6              LSRS     r6,r6,#6              ;235
00015e  bf00              NOP                            ;236
                  |L47.352|
000160  f00600bf          AND      r0,r6,#0xbf           ;236
000164  f0400180          ORR      r1,r0,#0x80           ;236
000168  1e68              SUBS     r0,r5,#1              ;236
00016a  4605              MOV      r5,r0                 ;236
00016c  7001              STRB     r1,[r0,#0]            ;236
00016e  09b6              LSRS     r6,r6,#6              ;236
000170  bf00              NOP                            ;237
                  |L47.370|
000172  4815              LDR      r0,|L47.456|
000174  5dc0              LDRB     r0,[r0,r7]            ;237
000176  4330              ORRS     r0,r0,r6              ;237
000178  b2c1              UXTB     r1,r0                 ;237
00017a  e000              B        |L47.382|
                  |L47.380|
00017c  e006              B        |L47.396|
                  |L47.382|
00017e  1e68              SUBS     r0,r5,#1              ;237
000180  4605              MOV      r5,r0                 ;237
000182  7001              STRB     r1,[r0,#0]            ;237
000184  bf00              NOP                            ;233
                  |L47.390|
000186  bf00              NOP                            ;233
000188  443d              ADD      r5,r5,r7              ;239
00018a  e003              B        |L47.404|
                  |L47.396|
00018c  7820              LDRB     r0,[r4,#0]            ;241
00018e  f8050b01          STRB     r0,[r5],#1            ;241
000192  bf00              NOP                            ;241
                  |L47.404|
000194  bf00              NOP                            ;213
000196  1c64              ADDS     r4,r4,#1              ;243
                  |L47.408|
000198  7820              LDRB     r0,[r4,#0]            ;205
00019a  2822              CMP      r0,#0x22              ;205
00019c  d003              BEQ      |L47.422|
00019e  7820              LDRB     r0,[r4,#0]            ;205
0001a0  2800              CMP      r0,#0                 ;205
0001a2  f47faf5a          BNE      |L47.90|
                  |L47.422|
0001a6  2000              MOVS     r0,#0                 ;246
0001a8  7028              STRB     r0,[r5,#0]            ;246
0001aa  7820              LDRB     r0,[r4,#0]            ;247
0001ac  2822              CMP      r0,#0x22              ;247
0001ae  d100              BNE      |L47.434|
0001b0  1c64              ADDS     r4,r4,#1              ;247
                  |L47.434|
0001b2  f8cb9010          STR      r9,[r11,#0x10]        ;248
0001b6  2004              MOVS     r0,#4                 ;249
0001b8  f8cb000c          STR      r0,[r11,#0xc]         ;249
0001bc  4620              MOV      r0,r4                 ;250
0001be  e72e              B        |L47.30|
;;;252    
                          ENDP

                  |L47.448|
                          DCD      ||ep||
                  |L47.452|
                          DCD      cJSON_malloc
                  |L47.456|
                          DCD      firstByteMark

                          AREA ||i.parse_value||, CODE, READONLY, ALIGN=2

                  parse_value PROC
;;;358    /* Parser core - when encountering text, process appropriately. */
;;;359    static const char *parse_value(cJSON *item,const char *value)
000000  b570              PUSH     {r4-r6,lr}
;;;360    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;361    	if (!value)						return 0;	/* Fail on null. */
000006  b90c              CBNZ     r4,|L48.12|
000008  2000              MOVS     r0,#0
                  |L48.10|
;;;362    	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
;;;363    	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
;;;364    	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
;;;365    	if (*value=='\"')				{ return parse_string(item,value); }
;;;366    	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
;;;367    	if (*value=='[')				{ return parse_array(item,value); }
;;;368    	if (*value=='{')				{ return parse_object(item,value); }
;;;369    
;;;370    	ep=value;return 0;	/* failure. */
;;;371    }
00000a  bd70              POP      {r4-r6,pc}
                  |L48.12|
00000c  2204              MOVS     r2,#4                 ;362
00000e  a124              ADR      r1,|L48.160|
000010  4620              MOV      r0,r4                 ;362
000012  f7fffffe          BL       strncmp
000016  b918              CBNZ     r0,|L48.32|
000018  2002              MOVS     r0,#2                 ;362
00001a  60e8              STR      r0,[r5,#0xc]          ;362
00001c  1d20              ADDS     r0,r4,#4              ;362
00001e  e7f4              B        |L48.10|
                  |L48.32|
000020  2205              MOVS     r2,#5                 ;363
000022  a121              ADR      r1,|L48.168|
000024  4620              MOV      r0,r4                 ;363
000026  f7fffffe          BL       strncmp
00002a  b918              CBNZ     r0,|L48.52|
00002c  2000              MOVS     r0,#0                 ;363
00002e  60e8              STR      r0,[r5,#0xc]          ;363
000030  1d60              ADDS     r0,r4,#5              ;363
000032  e7ea              B        |L48.10|
                  |L48.52|
000034  2204              MOVS     r2,#4                 ;364
000036  a11e              ADR      r1,|L48.176|
000038  4620              MOV      r0,r4                 ;364
00003a  f7fffffe          BL       strncmp
00003e  b920              CBNZ     r0,|L48.74|
000040  2001              MOVS     r0,#1                 ;364
000042  60e8              STR      r0,[r5,#0xc]          ;364
000044  6168              STR      r0,[r5,#0x14]         ;364
000046  1d20              ADDS     r0,r4,#4              ;364
000048  e7df              B        |L48.10|
                  |L48.74|
00004a  7820              LDRB     r0,[r4,#0]            ;365
00004c  2822              CMP      r0,#0x22              ;365
00004e  d104              BNE      |L48.90|
000050  4621              MOV      r1,r4                 ;365
000052  4628              MOV      r0,r5                 ;365
000054  f7fffffe          BL       parse_string
000058  e7d7              B        |L48.10|
                  |L48.90|
00005a  7820              LDRB     r0,[r4,#0]            ;366
00005c  282d              CMP      r0,#0x2d              ;366
00005e  d005              BEQ      |L48.108|
000060  7820              LDRB     r0,[r4,#0]            ;366
000062  2830              CMP      r0,#0x30              ;366
000064  db07              BLT      |L48.118|
000066  7820              LDRB     r0,[r4,#0]            ;366
000068  2839              CMP      r0,#0x39              ;366
00006a  dc04              BGT      |L48.118|
                  |L48.108|
00006c  4621              MOV      r1,r4                 ;366
00006e  4628              MOV      r0,r5                 ;366
000070  f7fffffe          BL       parse_number
000074  e7c9              B        |L48.10|
                  |L48.118|
000076  7820              LDRB     r0,[r4,#0]            ;367
000078  285b              CMP      r0,#0x5b              ;367
00007a  d104              BNE      |L48.134|
00007c  4621              MOV      r1,r4                 ;367
00007e  4628              MOV      r0,r5                 ;367
000080  f7fffffe          BL       parse_array
000084  e7c1              B        |L48.10|
                  |L48.134|
000086  7820              LDRB     r0,[r4,#0]            ;368
000088  287b              CMP      r0,#0x7b              ;368
00008a  d104              BNE      |L48.150|
00008c  4621              MOV      r1,r4                 ;368
00008e  4628              MOV      r0,r5                 ;368
000090  f7fffffe          BL       parse_object
000094  e7b9              B        |L48.10|
                  |L48.150|
000096  4808              LDR      r0,|L48.184|
000098  6004              STR      r4,[r0,#0]            ;370  ; ep
00009a  2000              MOVS     r0,#0                 ;370
00009c  e7b5              B        |L48.10|
;;;372    
                          ENDP

00009e  0000              DCW      0x0000
                  |L48.160|
0000a0  6e756c6c          DCB      "null",0
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L48.168|
0000a8  66616c73          DCB      "false",0
0000ac  6500    
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L48.176|
0000b0  74727565          DCB      "true",0
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L48.184|
                          DCD      ||ep||

                          AREA ||i.pow2gt||, CODE, READONLY, ALIGN=1

                  pow2gt PROC
;;;118    
;;;119    static int pow2gt (int x)	{	--x;	x|=x>>1;	x|=x>>2;	x|=x>>4;	x|=x>>8;	x|=x>>16;	return x+1;	}
000000  4601              MOV      r1,r0
000002  1e49              SUBS     r1,r1,#1
000004  ea410161          ORR      r1,r1,r1,ASR #1
000008  ea4101a1          ORR      r1,r1,r1,ASR #2
00000c  ea411121          ORR      r1,r1,r1,ASR #4
000010  ea412121          ORR      r1,r1,r1,ASR #8
000014  ea414121          ORR      r1,r1,r1,ASR #16
000018  1c48              ADDS     r0,r1,#1
00001a  4770              BX       lr
;;;120    
                          ENDP


                          AREA ||i.print_array||, CODE, READONLY, ALIGN=2

                  print_array PROC
;;;435    /* Render an array to text */
;;;436    static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;437    {
000004  b085              SUB      sp,sp,#0x14
000006  4692              MOV      r10,r2
000008  461e              MOV      r6,r3
;;;438    	char **entries;
;;;439    	char *out=0,*ptr,*ret;int len=5;
00000a  f04f0b00          MOV      r11,#0
00000e  2005              MOVS     r0,#5
000010  9003              STR      r0,[sp,#0xc]
;;;440    	cJSON *child=item->child;
000012  9805              LDR      r0,[sp,#0x14]
000014  f8d08008          LDR      r8,[r0,#8]
;;;441    	int numentries=0,i=0,fail=0;
000018  46d9              MOV      r9,r11
00001a  2500              MOVS     r5,#0
00001c  2000              MOVS     r0,#0
00001e  9002              STR      r0,[sp,#8]
;;;442    	size_t tmplen=0;
000020  9001              STR      r0,[sp,#4]
;;;443    	
;;;444    	/* How many entries in the array? */
;;;445    	while (child) numentries++,child=child->next;
000022  e003              B        |L50.44|
                  |L50.36|
000024  f1090901          ADD      r9,r9,#1
000028  f8d88000          LDR      r8,[r8,#0]
                  |L50.44|
00002c  f1b80f00          CMP      r8,#0
000030  d1f8              BNE      |L50.36|
;;;446    	/* Explicitly handle numentries==0 */
;;;447    	if (!numentries)
000032  f1b90f00          CMP      r9,#0
000036  d116              BNE      |L50.102|
;;;448    	{
;;;449    		if (p)	out=ensure(p,3);
000038  b12e              CBZ      r6,|L50.70|
00003a  2103              MOVS     r1,#3
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       ensure
000042  4683              MOV      r11,r0
000044  e004              B        |L50.80|
                  |L50.70|
;;;450    		else	out=(char*)cJSON_malloc(3);
000046  2003              MOVS     r0,#3
000048  497e              LDR      r1,|L50.580|
00004a  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
00004c  4788              BLX      r1
00004e  4683              MOV      r11,r0
                  |L50.80|
;;;451    		if (out) strcpy(out,"[]");
000050  f1bb0f00          CMP      r11,#0
000054  d003              BEQ      |L50.94|
000056  a17c              ADR      r1,|L50.584|
000058  4658              MOV      r0,r11
00005a  f7fffffe          BL       strcpy
                  |L50.94|
;;;452    		return out;
00005e  4658              MOV      r0,r11
                  |L50.96|
;;;453    	}
;;;454    
;;;455    	if (p)
;;;456    	{
;;;457    		/* Compose the output array. */
;;;458    		i=p->offset;
;;;459    		ptr=ensure(p,1);if (!ptr) return 0;	*ptr='[';	p->offset++;
;;;460    		child=item->child;
;;;461    		while (child && !fail)
;;;462    		{
;;;463    			print_value(child,depth+1,fmt,p);
;;;464    			p->offset=update(p);
;;;465    			if (child->next) {len=fmt?2:1;ptr=ensure(p,len+1);if (!ptr) return 0;*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;p->offset+=len;}
;;;466    			child=child->next;
;;;467    		}
;;;468    		ptr=ensure(p,2);if (!ptr) return 0;	*ptr++=']';*ptr=0;
;;;469    		out=(p->buffer)+i;
;;;470    	}
;;;471    	else
;;;472    	{
;;;473    		/* Allocate an array to hold the values for each */
;;;474    		entries=(char**)cJSON_malloc(numentries*sizeof(char*));
;;;475    		if (!entries) return 0;
;;;476    		memset(entries,0,numentries*sizeof(char*));
;;;477    		/* Retrieve all the results: */
;;;478    		child=item->child;
;;;479    		while (child && !fail)
;;;480    		{
;;;481    			ret=print_value(child,depth+1,fmt,0);
;;;482    			entries[i++]=ret;
;;;483    			if (ret) len+=strlen(ret)+2+(fmt?1:0); else fail=1;
;;;484    			child=child->next;
;;;485    		}
;;;486    		
;;;487    		/* If we didn't fail, try to malloc the output string */
;;;488    		if (!fail)	out=(char*)cJSON_malloc(len);
;;;489    		/* If that fails, we fail. */
;;;490    		if (!out) fail=1;
;;;491    
;;;492    		/* Handle failure. */
;;;493    		if (fail)
;;;494    		{
;;;495    			for (i=0;i<numentries;i++) if (entries[i]) cJSON_free(entries[i]);
;;;496    			cJSON_free(entries);
;;;497    			return 0;
;;;498    		}
;;;499    		
;;;500    		/* Compose the output array. */
;;;501    		*out='[';
;;;502    		ptr=out+1;*ptr=0;
;;;503    		for (i=0;i<numentries;i++)
;;;504    		{
;;;505    			tmplen=strlen(entries[i]);memcpy(ptr,entries[i],tmplen);ptr+=tmplen;
;;;506    			if (i!=numentries-1) {*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;}
;;;507    			cJSON_free(entries[i]);
;;;508    		}
;;;509    		cJSON_free(entries);
;;;510    		*ptr++=']';*ptr++=0;
;;;511    	}
;;;512    	return out;	
;;;513    }
000060  b009              ADD      sp,sp,#0x24
000062  e8bd8ff0          POP      {r4-r11,pc}
                  |L50.102|
000066  2e00              CMP      r6,#0                 ;455
000068  d057              BEQ      |L50.282|
00006a  68b5              LDR      r5,[r6,#8]            ;458
00006c  2101              MOVS     r1,#1                 ;459
00006e  4630              MOV      r0,r6                 ;459
000070  f7fffffe          BL       ensure
000074  4604              MOV      r4,r0                 ;459
000076  b90c              CBNZ     r4,|L50.124|
000078  2000              MOVS     r0,#0                 ;459
00007a  e7f1              B        |L50.96|
                  |L50.124|
00007c  205b              MOVS     r0,#0x5b              ;459
00007e  7020              STRB     r0,[r4,#0]            ;459
000080  68b0              LDR      r0,[r6,#8]            ;459
000082  1c40              ADDS     r0,r0,#1              ;459
000084  60b0              STR      r0,[r6,#8]            ;459
000086  9805              LDR      r0,[sp,#0x14]         ;460
000088  f8d08008          LDR      r8,[r0,#8]            ;460
00008c  e02e              B        |L50.236|
                  |L50.142|
00008e  4633              MOV      r3,r6                 ;463
000090  4652              MOV      r2,r10                ;463
000092  9906              LDR      r1,[sp,#0x18]         ;463
000094  1c49              ADDS     r1,r1,#1              ;463
000096  4640              MOV      r0,r8                 ;463
000098  f7fffffe          BL       print_value
00009c  4630              MOV      r0,r6                 ;464
00009e  f7fffffe          BL       update
0000a2  60b0              STR      r0,[r6,#8]            ;464
0000a4  f8d80000          LDR      r0,[r8,#0]            ;465
0000a8  b1f0              CBZ      r0,|L50.232|
0000aa  f1ba0f00          CMP      r10,#0                ;465
0000ae  d001              BEQ      |L50.180|
0000b0  2002              MOVS     r0,#2                 ;465
0000b2  e000              B        |L50.182|
                  |L50.180|
0000b4  2001              MOVS     r0,#1                 ;465
                  |L50.182|
0000b6  9003              STR      r0,[sp,#0xc]          ;465
0000b8  9903              LDR      r1,[sp,#0xc]          ;465
0000ba  1c49              ADDS     r1,r1,#1              ;465
0000bc  4630              MOV      r0,r6                 ;465
0000be  f7fffffe          BL       ensure
0000c2  4604              MOV      r4,r0                 ;465
0000c4  b90c              CBNZ     r4,|L50.202|
0000c6  2000              MOVS     r0,#0                 ;465
0000c8  e7ca              B        |L50.96|
                  |L50.202|
0000ca  202c              MOVS     r0,#0x2c              ;465
0000cc  f8040b01          STRB     r0,[r4],#1            ;465
0000d0  f1ba0f00          CMP      r10,#0                ;465
0000d4  d002              BEQ      |L50.220|
0000d6  2020              MOVS     r0,#0x20              ;465
0000d8  f8040b01          STRB     r0,[r4],#1            ;465
                  |L50.220|
0000dc  2000              MOVS     r0,#0                 ;465
0000de  7020              STRB     r0,[r4,#0]            ;465
0000e0  68b1              LDR      r1,[r6,#8]            ;465
0000e2  9803              LDR      r0,[sp,#0xc]          ;465
0000e4  4408              ADD      r0,r0,r1              ;465
0000e6  60b0              STR      r0,[r6,#8]            ;465
                  |L50.232|
0000e8  f8d88000          LDR      r8,[r8,#0]            ;466
                  |L50.236|
0000ec  f1b80f00          CMP      r8,#0                 ;461
0000f0  d002              BEQ      |L50.248|
0000f2  9802              LDR      r0,[sp,#8]            ;461
0000f4  2800              CMP      r0,#0                 ;461
0000f6  d0ca              BEQ      |L50.142|
                  |L50.248|
0000f8  2102              MOVS     r1,#2                 ;468
0000fa  4630              MOV      r0,r6                 ;468
0000fc  f7fffffe          BL       ensure
000100  4604              MOV      r4,r0                 ;468
000102  b90c              CBNZ     r4,|L50.264|
000104  2000              MOVS     r0,#0                 ;468
000106  e7ab              B        |L50.96|
                  |L50.264|
000108  205d              MOVS     r0,#0x5d              ;468
00010a  f8040b01          STRB     r0,[r4],#1            ;468
00010e  2000              MOVS     r0,#0                 ;468
000110  7020              STRB     r0,[r4,#0]            ;468
000112  6830              LDR      r0,[r6,#0]            ;469
000114  eb000b05          ADD      r11,r0,r5             ;469
000118  e091              B        |L50.574|
                  |L50.282|
00011a  ea4f0089          LSL      r0,r9,#2              ;474
00011e  4949              LDR      r1,|L50.580|
000120  6809              LDR      r1,[r1,#0]            ;474  ; cJSON_malloc
000122  4788              BLX      r1                    ;474
000124  4607              MOV      r7,r0                 ;474
000126  b90f              CBNZ     r7,|L50.300|
000128  2000              MOVS     r0,#0                 ;475
00012a  e799              B        |L50.96|
                  |L50.300|
00012c  ea4f0189          LSL      r1,r9,#2              ;476
000130  4638              MOV      r0,r7                 ;476
000132  f7fffffe          BL       __aeabi_memclr4
000136  9805              LDR      r0,[sp,#0x14]         ;478
000138  f8d08008          LDR      r8,[r0,#8]            ;478
00013c  e021              B        |L50.386|
                  |L50.318|
00013e  2300              MOVS     r3,#0                 ;481
000140  4652              MOV      r2,r10                ;481
000142  9906              LDR      r1,[sp,#0x18]         ;481
000144  1c49              ADDS     r1,r1,#1              ;481
000146  4640              MOV      r0,r8                 ;481
000148  f7fffffe          BL       print_value
00014c  9004              STR      r0,[sp,#0x10]         ;481
00014e  4629              MOV      r1,r5                 ;482
000150  1c6d              ADDS     r5,r5,#1              ;482
000152  9804              LDR      r0,[sp,#0x10]         ;482
000154  f8470021          STR      r0,[r7,r1,LSL #2]     ;482
000158  9804              LDR      r0,[sp,#0x10]         ;483
00015a  b170              CBZ      r0,|L50.378|
00015c  9804              LDR      r0,[sp,#0x10]         ;483
00015e  f7fffffe          BL       strlen
000162  1c80              ADDS     r0,r0,#2              ;483
000164  f1ba0f00          CMP      r10,#0                ;483
000168  d001              BEQ      |L50.366|
00016a  2101              MOVS     r1,#1                 ;483
00016c  e000              B        |L50.368|
                  |L50.366|
00016e  2100              MOVS     r1,#0                 ;483
                  |L50.368|
000170  4401              ADD      r1,r1,r0              ;483
000172  9803              LDR      r0,[sp,#0xc]          ;483
000174  4408              ADD      r0,r0,r1              ;483
000176  9003              STR      r0,[sp,#0xc]          ;483
000178  e001              B        |L50.382|
                  |L50.378|
00017a  2001              MOVS     r0,#1                 ;483
00017c  9002              STR      r0,[sp,#8]            ;483
                  |L50.382|
00017e  f8d88000          LDR      r8,[r8,#0]            ;484
                  |L50.386|
000182  f1b80f00          CMP      r8,#0                 ;479
000186  d002              BEQ      |L50.398|
000188  9802              LDR      r0,[sp,#8]            ;479
00018a  2800              CMP      r0,#0                 ;479
00018c  d0d7              BEQ      |L50.318|
                  |L50.398|
00018e  9802              LDR      r0,[sp,#8]            ;488
000190  b920              CBNZ     r0,|L50.412|
000192  492c              LDR      r1,|L50.580|
000194  9803              LDR      r0,[sp,#0xc]          ;488
000196  6809              LDR      r1,[r1,#0]            ;488  ; cJSON_malloc
000198  4788              BLX      r1                    ;488
00019a  4683              MOV      r11,r0                ;488
                  |L50.412|
00019c  f1bb0f00          CMP      r11,#0                ;490
0001a0  d101              BNE      |L50.422|
0001a2  2001              MOVS     r0,#1                 ;490
0001a4  9002              STR      r0,[sp,#8]            ;490
                  |L50.422|
0001a6  9802              LDR      r0,[sp,#8]            ;493
0001a8  b190              CBZ      r0,|L50.464|
0001aa  2500              MOVS     r5,#0                 ;495
0001ac  e008              B        |L50.448|
                  |L50.430|
0001ae  f8570025          LDR      r0,[r7,r5,LSL #2]     ;495
0001b2  b120              CBZ      r0,|L50.446|
0001b4  f8570025          LDR      r0,[r7,r5,LSL #2]     ;495
0001b8  4924              LDR      r1,|L50.588|
0001ba  6809              LDR      r1,[r1,#0]            ;495  ; cJSON_free
0001bc  4788              BLX      r1                    ;495
                  |L50.446|
0001be  1c6d              ADDS     r5,r5,#1              ;495
                  |L50.448|
0001c0  454d              CMP      r5,r9                 ;495
0001c2  dbf4              BLT      |L50.430|
0001c4  4638              MOV      r0,r7                 ;496
0001c6  4921              LDR      r1,|L50.588|
0001c8  6809              LDR      r1,[r1,#0]            ;496  ; cJSON_free
0001ca  4788              BLX      r1                    ;496
0001cc  2000              MOVS     r0,#0                 ;497
0001ce  e747              B        |L50.96|
                  |L50.464|
0001d0  205b              MOVS     r0,#0x5b              ;501
0001d2  f88b0000          STRB     r0,[r11,#0]           ;501
0001d6  f10b0401          ADD      r4,r11,#1             ;502
0001da  2000              MOVS     r0,#0                 ;502
0001dc  7020              STRB     r0,[r4,#0]            ;502
0001de  2500              MOVS     r5,#0                 ;503
0001e0  e021              B        |L50.550|
                  |L50.482|
0001e2  f8570025          LDR      r0,[r7,r5,LSL #2]     ;505
0001e6  f7fffffe          BL       strlen
0001ea  9001              STR      r0,[sp,#4]            ;505
0001ec  f8571025          LDR      r1,[r7,r5,LSL #2]     ;505
0001f0  4620              MOV      r0,r4                 ;505
0001f2  9a01              LDR      r2,[sp,#4]            ;505
0001f4  f7fffffe          BL       __aeabi_memcpy
0001f8  9801              LDR      r0,[sp,#4]            ;505
0001fa  4404              ADD      r4,r4,r0              ;505
0001fc  f1a90001          SUB      r0,r9,#1              ;506
000200  42a8              CMP      r0,r5                 ;506
000202  d00a              BEQ      |L50.538|
000204  202c              MOVS     r0,#0x2c              ;506
000206  f8040b01          STRB     r0,[r4],#1            ;506
00020a  f1ba0f00          CMP      r10,#0                ;506
00020e  d002              BEQ      |L50.534|
000210  2020              MOVS     r0,#0x20              ;506
000212  f8040b01          STRB     r0,[r4],#1            ;506
                  |L50.534|
000216  2000              MOVS     r0,#0                 ;506
000218  7020              STRB     r0,[r4,#0]            ;506
                  |L50.538|
00021a  f8570025          LDR      r0,[r7,r5,LSL #2]     ;507
00021e  490b              LDR      r1,|L50.588|
000220  6809              LDR      r1,[r1,#0]            ;507  ; cJSON_free
000222  4788              BLX      r1                    ;507
000224  1c6d              ADDS     r5,r5,#1              ;503
                  |L50.550|
000226  454d              CMP      r5,r9                 ;503
000228  dbdb              BLT      |L50.482|
00022a  4638              MOV      r0,r7                 ;509
00022c  4907              LDR      r1,|L50.588|
00022e  6809              LDR      r1,[r1,#0]            ;509  ; cJSON_free
000230  4788              BLX      r1                    ;509
000232  205d              MOVS     r0,#0x5d              ;510
000234  f8040b01          STRB     r0,[r4],#1            ;510
000238  2000              MOVS     r0,#0                 ;510
00023a  f8040b01          STRB     r0,[r4],#1            ;510
                  |L50.574|
00023e  4658              MOV      r0,r11                ;512
000240  e70e              B        |L50.96|
;;;514    
                          ENDP

000242  0000              DCW      0x0000
                  |L50.580|
                          DCD      cJSON_malloc
                  |L50.584|
000248  5b5d00            DCB      "[]",0
00024b  00                DCB      0
                  |L50.588|
                          DCD      cJSON_free

                          AREA ||i.print_number||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_e
                  print_number PROC
;;;148    /* Render the number nicely from the given item into a string. */
;;;149    static char *print_number(cJSON *item,printbuffer *p)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;150    {
000004  4682              MOV      r10,r0
000006  460e              MOV      r6,r1
;;;151    	char *str=0;
000008  f04f0900          MOV      r9,#0
;;;152    	double d=item->valuedouble;
00000c  e9da4506          LDRD     r4,r5,[r10,#0x18]
;;;153    	if (d==0)
000010  2200              MOVS     r2,#0
000012  4613              MOV      r3,r2
000014  4620              MOV      r0,r4
000016  4629              MOV      r1,r5
000018  f7fffffe          BL       __aeabi_cdcmpeq
00001c  d113              BNE      |L51.70|
;;;154    	{
;;;155    		if (p)	str=ensure(p,2);
00001e  b12e              CBZ      r6,|L51.44|
000020  2102              MOVS     r1,#2
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       ensure
000028  4681              MOV      r9,r0
00002a  e004              B        |L51.54|
                  |L51.44|
;;;156    		else	str=(char*)cJSON_malloc(2);	/* special case for 0. */
00002c  2002              MOVS     r0,#2
00002e  494a              LDR      r1,|L51.344|
000030  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
000032  4788              BLX      r1
000034  4681              MOV      r9,r0
                  |L51.54|
;;;157    		if (str) strcpy(str,"0");
000036  f1b90f00          CMP      r9,#0
00003a  d003              BEQ      |L51.68|
00003c  a047              ADR      r0,|L51.348|
00003e  8800              LDRH     r0,[r0,#0]
000040  f8a90000          STRH     r0,[r9,#0]
                  |L51.68|
000044  e084              B        |L51.336|
                  |L51.70|
;;;158    	}
;;;159    	else if (fabs(((double)item->valueint)-d)<=DBL_EPSILON && d<=INT_MAX && d>=INT_MIN)
000046  f8da0014          LDR      r0,[r10,#0x14]
00004a  f7fffffe          BL       __aeabi_i2d
00004e  4607              MOV      r7,r0
000050  4622              MOV      r2,r4
000052  462b              MOV      r3,r5
000054  f7fffffe          BL       __aeabi_dsub
000058  f0214100          BIC      r1,r1,#0x80000000
00005c  2200              MOVS     r2,#0
00005e  4b40              LDR      r3,|L51.352|
000060  e9cd0100          STRD     r0,r1,[sp,#0]
000064  f7fffffe          BL       __aeabi_cdcmple
000068  d823              BHI      |L51.178|
00006a  4a3e              LDR      r2,|L51.356|
00006c  4b3e              LDR      r3,|L51.360|
00006e  4620              MOV      r0,r4
000070  4629              MOV      r1,r5
000072  f7fffffe          BL       __aeabi_cdcmple
000076  d81c              BHI      |L51.178|
000078  2200              MOVS     r2,#0
00007a  4b3c              LDR      r3,|L51.364|
00007c  4620              MOV      r0,r4
00007e  4629              MOV      r1,r5
000080  f7fffffe          BL       __aeabi_cdrcmple
000084  d815              BHI      |L51.178|
;;;160    	{
;;;161    		if (p)	str=ensure(p,21);
000086  b12e              CBZ      r6,|L51.148|
000088  2115              MOVS     r1,#0x15
00008a  4630              MOV      r0,r6
00008c  f7fffffe          BL       ensure
000090  4681              MOV      r9,r0
000092  e004              B        |L51.158|
                  |L51.148|
;;;162    		else	str=(char*)cJSON_malloc(21);	/* 2^64+1 can be represented in 21 chars. */
000094  2015              MOVS     r0,#0x15
000096  4930              LDR      r1,|L51.344|
000098  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
00009a  4788              BLX      r1
00009c  4681              MOV      r9,r0
                  |L51.158|
;;;163    		if (str)	sprintf(str,"%d",item->valueint);
00009e  f1b90f00          CMP      r9,#0
0000a2  d055              BEQ      |L51.336|
0000a4  a132              ADR      r1,|L51.368|
0000a6  4648              MOV      r0,r9
0000a8  f8da2014          LDR      r2,[r10,#0x14]
0000ac  f7fffffe          BL       __2sprintf
0000b0  e04e              B        |L51.336|
                  |L51.178|
;;;164    	}
;;;165    	else
;;;166    	{
;;;167    		if (p)	str=ensure(p,64);
0000b2  b12e              CBZ      r6,|L51.192|
0000b4  2140              MOVS     r1,#0x40
0000b6  4630              MOV      r0,r6
0000b8  f7fffffe          BL       ensure
0000bc  4681              MOV      r9,r0
0000be  e004              B        |L51.202|
                  |L51.192|
;;;168    		else	str=(char*)cJSON_malloc(64);	/* This is a nice tradeoff. */
0000c0  2040              MOVS     r0,#0x40
0000c2  4925              LDR      r1,|L51.344|
0000c4  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
0000c6  4788              BLX      r1
0000c8  4681              MOV      r9,r0
                  |L51.202|
;;;169    		if (str)
0000ca  f1b90f00          CMP      r9,#0
0000ce  d03f              BEQ      |L51.336|
;;;170    		{
;;;171    			if (fabs(floor(d)-d)<=DBL_EPSILON && fabs(d)<1.0e60)sprintf(str,"%.0f",d);
0000d0  4620              MOV      r0,r4
0000d2  4629              MOV      r1,r5
0000d4  f7fffffe          BL       floor
0000d8  4607              MOV      r7,r0
0000da  4622              MOV      r2,r4
0000dc  462b              MOV      r3,r5
0000de  f7fffffe          BL       __aeabi_dsub
0000e2  f0214100          BIC      r1,r1,#0x80000000
0000e6  2200              MOVS     r2,#0
0000e8  4b1d              LDR      r3,|L51.352|
0000ea  e9cd0100          STRD     r0,r1,[sp,#0]
0000ee  f7fffffe          BL       __aeabi_cdcmple
0000f2  d80f              BHI      |L51.276|
0000f4  f0254100          BIC      r1,r5,#0x80000000
0000f8  4627              MOV      r7,r4
0000fa  4a1e              LDR      r2,|L51.372|
0000fc  4b1e              LDR      r3,|L51.376|
0000fe  4638              MOV      r0,r7
000100  f7fffffe          BL       __aeabi_cdcmple
000104  d206              BCS      |L51.276|
000106  4622              MOV      r2,r4
000108  462b              MOV      r3,r5
00010a  a11c              ADR      r1,|L51.380|
00010c  4648              MOV      r0,r9
00010e  f7fffffe          BL       __2sprintf
000112  e01d              B        |L51.336|
                  |L51.276|
;;;172    			else if (fabs(d)<1.0e-6 || fabs(d)>1.0e9)			sprintf(str,"%e",d);
000114  f0254100          BIC      r1,r5,#0x80000000
000118  4627              MOV      r7,r4
00011a  4a1a              LDR      r2,|L51.388|
00011c  4b1a              LDR      r3,|L51.392|
00011e  4638              MOV      r0,r7
000120  f7fffffe          BL       __aeabi_cdcmple
000124  d307              BCC      |L51.310|
000126  f0254100          BIC      r1,r5,#0x80000000
00012a  2200              MOVS     r2,#0
00012c  4b17              LDR      r3,|L51.396|
00012e  4638              MOV      r0,r7
000130  f7fffffe          BL       __aeabi_cdrcmple
000134  d206              BCS      |L51.324|
                  |L51.310|
000136  4622              MOV      r2,r4
000138  462b              MOV      r3,r5
00013a  a115              ADR      r1,|L51.400|
00013c  4648              MOV      r0,r9
00013e  f7fffffe          BL       __2sprintf
000142  e005              B        |L51.336|
                  |L51.324|
;;;173    			else												sprintf(str,"%f",d);
000144  4622              MOV      r2,r4
000146  462b              MOV      r3,r5
000148  a112              ADR      r1,|L51.404|
00014a  4648              MOV      r0,r9
00014c  f7fffffe          BL       __2sprintf
                  |L51.336|
;;;174    		}
;;;175    	}
;;;176    	return str;
000150  4648              MOV      r0,r9
;;;177    }
000152  e8bd87fc          POP      {r2-r10,pc}
;;;178    
                          ENDP

000156  0000              DCW      0x0000
                  |L51.344|
                          DCD      cJSON_malloc
                  |L51.348|
00015c  3000              DCB      "0",0
00015e  00                DCB      0
00015f  00                DCB      0
                  |L51.352|
                          DCD      0x3cb00000
                  |L51.356|
                          DCD      0xffc00000
                  |L51.360|
                          DCD      0x41dfffff
                  |L51.364|
                          DCD      0xc1e00000
                  |L51.368|
000170  256400            DCB      "%d",0
000173  00                DCB      0
                  |L51.372|
                          DCD      0xe4c2f344
                  |L51.376|
                          DCD      0x4c63e9e4
                  |L51.380|
00017c  252e3066          DCB      "%.0f",0
000180  00      
000181  00                DCB      0
000182  00                DCB      0
000183  00                DCB      0
                  |L51.388|
                          DCD      0xa0b5ed8d
                  |L51.392|
                          DCD      0x3eb0c6f7
                  |L51.396|
                          DCD      0x41cdcd65
                  |L51.400|
000190  256500            DCB      "%e",0
000193  00                DCB      0
                  |L51.404|
000194  256600            DCB      "%f",0
000197  00                DCB      0

                          AREA ||i.print_object||, CODE, READONLY, ALIGN=2

                  print_object PROC
;;;551    /* Render an object to text. */
;;;552    static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;553    {
000004  b089              SUB      sp,sp,#0x24
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;554    	char **entries=0,**names=0;
00000c  2000              MOVS     r0,#0
00000e  9008              STR      r0,[sp,#0x20]
000010  9007              STR      r0,[sp,#0x1c]
;;;555    	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;
000012  9006              STR      r0,[sp,#0x18]
000014  f04f0a07          MOV      r10,#7
000018  2500              MOVS     r5,#0
;;;556    	cJSON *child=item->child;
00001a  9809              LDR      r0,[sp,#0x24]
00001c  f8d09008          LDR      r9,[r0,#8]
;;;557    	int numentries=0,fail=0;
000020  2000              MOVS     r0,#0
000022  9002              STR      r0,[sp,#8]
000024  9001              STR      r0,[sp,#4]
;;;558    	size_t tmplen=0;
000026  9000              STR      r0,[sp,#0]
;;;559    	/* Count the number of entries. */
;;;560    	while (child) numentries++,child=child->next;
000028  e004              B        |L52.52|
                  |L52.42|
00002a  9802              LDR      r0,[sp,#8]
00002c  1c40              ADDS     r0,r0,#1
00002e  9002              STR      r0,[sp,#8]
000030  f8d99000          LDR      r9,[r9,#0]
                  |L52.52|
000034  f1b90f00          CMP      r9,#0
000038  d1f7              BNE      |L52.42|
;;;561    	/* Explicitly handle empty object case */
;;;562    	if (!numentries)
00003a  9802              LDR      r0,[sp,#8]
00003c  2800              CMP      r0,#0
00003e  d135              BNE      |L52.172|
;;;563    	{
;;;564    		if (p) out=ensure(p,fmt?depth+4:3);
000040  b157              CBZ      r7,|L52.88|
000042  b116              CBZ      r6,|L52.74|
000044  f1080004          ADD      r0,r8,#4
000048  e000              B        |L52.76|
                  |L52.74|
00004a  2003              MOVS     r0,#3
                  |L52.76|
00004c  4601              MOV      r1,r0
00004e  4638              MOV      r0,r7
000050  f7fffffe          BL       ensure
000054  9006              STR      r0,[sp,#0x18]
000056  e009              B        |L52.108|
                  |L52.88|
;;;565    		else	out=(char*)cJSON_malloc(fmt?depth+4:3);
000058  b116              CBZ      r6,|L52.96|
00005a  f1080104          ADD      r1,r8,#4
00005e  e000              B        |L52.98|
                  |L52.96|
000060  2103              MOVS     r1,#3
                  |L52.98|
000062  4608              MOV      r0,r1
000064  49ea              LDR      r1,|L52.1040|
000066  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
000068  4788              BLX      r1
00006a  9006              STR      r0,[sp,#0x18]
                  |L52.108|
;;;566    		if (!out)	return 0;
00006c  9806              LDR      r0,[sp,#0x18]
00006e  b918              CBNZ     r0,|L52.120|
000070  2000              MOVS     r0,#0
                  |L52.114|
;;;567    		ptr=out;*ptr++='{';
;;;568    		if (fmt) {*ptr++='\n';for (i=0;i<depth-1;i++) *ptr++='\t';}
;;;569    		*ptr++='}';*ptr++=0;
;;;570    		return out;
;;;571    	}
;;;572    	if (p)
;;;573    	{
;;;574    		/* Compose the output: */
;;;575    		i=p->offset;
;;;576    		len=fmt?2:1;	ptr=ensure(p,len+1);	if (!ptr) return 0;
;;;577    		*ptr++='{';	if (fmt) *ptr++='\n';	*ptr=0;	p->offset+=len;
;;;578    		child=item->child;depth++;
;;;579    		while (child)
;;;580    		{
;;;581    			if (fmt)
;;;582    			{
;;;583    				ptr=ensure(p,depth);	if (!ptr) return 0;
;;;584    				for (j=0;j<depth;j++) *ptr++='\t';
;;;585    				p->offset+=depth;
;;;586    			}
;;;587    			print_string_ptr(child->string,p);
;;;588    			p->offset=update(p);
;;;589    			
;;;590    			len=fmt?2:1;
;;;591    			ptr=ensure(p,len);	if (!ptr) return 0;
;;;592    			*ptr++=':';if (fmt) *ptr++='\t';
;;;593    			p->offset+=len;
;;;594    			
;;;595    			print_value(child,depth,fmt,p);
;;;596    			p->offset=update(p);
;;;597    
;;;598    			len=(fmt?1:0)+(child->next?1:0);
;;;599    			ptr=ensure(p,len+1); if (!ptr) return 0;
;;;600    			if (child->next) *ptr++=',';
;;;601    			if (fmt) *ptr++='\n';*ptr=0;
;;;602    			p->offset+=len;
;;;603    			child=child->next;
;;;604    		}
;;;605    		ptr=ensure(p,fmt?(depth+1):2);	 if (!ptr) return 0;
;;;606    		if (fmt)	for (i=0;i<depth-1;i++) *ptr++='\t';
;;;607    		*ptr++='}';*ptr=0;
;;;608    		out=(p->buffer)+i;
;;;609    	}
;;;610    	else
;;;611    	{
;;;612    		/* Allocate space for the names and the objects */
;;;613    		entries=(char**)cJSON_malloc(numentries*sizeof(char*));
;;;614    		if (!entries) return 0;
;;;615    		names=(char**)cJSON_malloc(numentries*sizeof(char*));
;;;616    		if (!names) {cJSON_free(entries);return 0;}
;;;617    		memset(entries,0,sizeof(char*)*numentries);
;;;618    		memset(names,0,sizeof(char*)*numentries);
;;;619    
;;;620    		/* Collect all the results into our arrays: */
;;;621    		child=item->child;depth++;if (fmt) len+=depth;
;;;622    		while (child)
;;;623    		{
;;;624    			names[i]=str=print_string_ptr(child->string,0);
;;;625    			entries[i++]=ret=print_value(child,depth,fmt,0);
;;;626    			if (str && ret) len+=strlen(ret)+strlen(str)+2+(fmt?2+depth:0); else fail=1;
;;;627    			child=child->next;
;;;628    		}
;;;629    		
;;;630    		/* Try to allocate the output string */
;;;631    		if (!fail)	out=(char*)cJSON_malloc(len);
;;;632    		if (!out) fail=1;
;;;633    
;;;634    		/* Handle failure */
;;;635    		if (fail)
;;;636    		{
;;;637    			for (i=0;i<numentries;i++) {if (names[i]) cJSON_free(names[i]);if (entries[i]) cJSON_free(entries[i]);}
;;;638    			cJSON_free(names);cJSON_free(entries);
;;;639    			return 0;
;;;640    		}
;;;641    		
;;;642    		/* Compose the output: */
;;;643    		*out='{';ptr=out+1;if (fmt)*ptr++='\n';*ptr=0;
;;;644    		for (i=0;i<numentries;i++)
;;;645    		{
;;;646    			if (fmt) for (j=0;j<depth;j++) *ptr++='\t';
;;;647    			tmplen=strlen(names[i]);memcpy(ptr,names[i],tmplen);ptr+=tmplen;
;;;648    			*ptr++=':';if (fmt) *ptr++='\t';
;;;649    			strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);
;;;650    			if (i!=numentries-1) *ptr++=',';
;;;651    			if (fmt) *ptr++='\n';*ptr=0;
;;;652    			cJSON_free(names[i]);cJSON_free(entries[i]);
;;;653    		}
;;;654    		
;;;655    		cJSON_free(names);cJSON_free(entries);
;;;656    		if (fmt) for (i=0;i<depth-1;i++) *ptr++='\t';
;;;657    		*ptr++='}';*ptr++=0;
;;;658    	}
;;;659    	return out;	
;;;660    }
000072  b00d              ADD      sp,sp,#0x34
000074  e8bd8ff0          POP      {r4-r11,pc}
                  |L52.120|
000078  9c06              LDR      r4,[sp,#0x18]         ;567
00007a  207b              MOVS     r0,#0x7b              ;567
00007c  f8040b01          STRB     r0,[r4],#1            ;567
000080  b166              CBZ      r6,|L52.156|
000082  200a              MOVS     r0,#0xa               ;568
000084  f8040b01          STRB     r0,[r4],#1            ;568
000088  2500              MOVS     r5,#0                 ;568
00008a  e003              B        |L52.148|
                  |L52.140|
00008c  2009              MOVS     r0,#9                 ;568
00008e  f8040b01          STRB     r0,[r4],#1            ;568
000092  1c6d              ADDS     r5,r5,#1              ;568
                  |L52.148|
000094  f1a80001          SUB      r0,r8,#1              ;568
000098  42a8              CMP      r0,r5                 ;568
00009a  dcf7              BGT      |L52.140|
                  |L52.156|
00009c  207d              MOVS     r0,#0x7d              ;569
00009e  f8040b01          STRB     r0,[r4],#1            ;569
0000a2  2000              MOVS     r0,#0                 ;569
0000a4  f8040b01          STRB     r0,[r4],#1            ;569
0000a8  9806              LDR      r0,[sp,#0x18]         ;570
0000aa  e7e2              B        |L52.114|
                  |L52.172|
0000ac  2f00              CMP      r7,#0                 ;572
0000ae  d077              BEQ      |L52.416|
0000b0  68bd              LDR      r5,[r7,#8]            ;575
0000b2  b10e              CBZ      r6,|L52.184|
0000b4  2002              MOVS     r0,#2                 ;576
0000b6  e000              B        |L52.186|
                  |L52.184|
0000b8  2001              MOVS     r0,#1                 ;576
                  |L52.186|
0000ba  4682              MOV      r10,r0                ;576
0000bc  f10a0101          ADD      r1,r10,#1             ;576
0000c0  4638              MOV      r0,r7                 ;576
0000c2  f7fffffe          BL       ensure
0000c6  4604              MOV      r4,r0                 ;576
0000c8  b90c              CBNZ     r4,|L52.206|
0000ca  2000              MOVS     r0,#0                 ;576
0000cc  e7d1              B        |L52.114|
                  |L52.206|
0000ce  207b              MOVS     r0,#0x7b              ;577
0000d0  f8040b01          STRB     r0,[r4],#1            ;577
0000d4  b116              CBZ      r6,|L52.220|
0000d6  200a              MOVS     r0,#0xa               ;577
0000d8  f8040b01          STRB     r0,[r4],#1            ;577
                  |L52.220|
0000dc  2000              MOVS     r0,#0                 ;577
0000de  7020              STRB     r0,[r4,#0]            ;577
0000e0  68b8              LDR      r0,[r7,#8]            ;577
0000e2  4450              ADD      r0,r0,r10             ;577
0000e4  60b8              STR      r0,[r7,#8]            ;577
0000e6  9809              LDR      r0,[sp,#0x24]         ;578
0000e8  f8d09008          LDR      r9,[r0,#8]            ;578
0000ec  f1080801          ADD      r8,r8,#1              ;578
0000f0  e068              B        |L52.452|
                  |L52.242|
0000f2  b1b6              CBZ      r6,|L52.290|
0000f4  4641              MOV      r1,r8                 ;583
0000f6  4638              MOV      r0,r7                 ;583
0000f8  f7fffffe          BL       ensure
0000fc  4604              MOV      r4,r0                 ;583
0000fe  b90c              CBNZ     r4,|L52.260|
000100  2000              MOVS     r0,#0                 ;583
000102  e7b6              B        |L52.114|
                  |L52.260|
000104  2000              MOVS     r0,#0                 ;584
000106  9003              STR      r0,[sp,#0xc]          ;584
000108  e005              B        |L52.278|
                  |L52.266|
00010a  2009              MOVS     r0,#9                 ;584
00010c  f8040b01          STRB     r0,[r4],#1            ;584
000110  9803              LDR      r0,[sp,#0xc]          ;584
000112  1c40              ADDS     r0,r0,#1              ;584
000114  9003              STR      r0,[sp,#0xc]          ;584
                  |L52.278|
000116  9803              LDR      r0,[sp,#0xc]          ;584
000118  4540              CMP      r0,r8                 ;584
00011a  dbf6              BLT      |L52.266|
00011c  68b8              LDR      r0,[r7,#8]            ;585
00011e  4440              ADD      r0,r0,r8              ;585
000120  60b8              STR      r0,[r7,#8]            ;585
                  |L52.290|
000122  4639              MOV      r1,r7                 ;587
000124  f8d90020          LDR      r0,[r9,#0x20]         ;587
000128  f7fffffe          BL       print_string_ptr
00012c  4638              MOV      r0,r7                 ;588
00012e  f7fffffe          BL       update
000132  60b8              STR      r0,[r7,#8]            ;588
000134  b10e              CBZ      r6,|L52.314|
000136  2002              MOVS     r0,#2                 ;590
000138  e000              B        |L52.316|
                  |L52.314|
00013a  2001              MOVS     r0,#1                 ;590
                  |L52.316|
00013c  4682              MOV      r10,r0                ;590
00013e  4651              MOV      r1,r10                ;591
000140  4638              MOV      r0,r7                 ;591
000142  f7fffffe          BL       ensure
000146  4604              MOV      r4,r0                 ;591
000148  b90c              CBNZ     r4,|L52.334|
00014a  2000              MOVS     r0,#0                 ;591
00014c  e791              B        |L52.114|
                  |L52.334|
00014e  203a              MOVS     r0,#0x3a              ;592
000150  f8040b01          STRB     r0,[r4],#1            ;592
000154  b116              CBZ      r6,|L52.348|
000156  2009              MOVS     r0,#9                 ;592
000158  f8040b01          STRB     r0,[r4],#1            ;592
                  |L52.348|
00015c  68b8              LDR      r0,[r7,#8]            ;593
00015e  4450              ADD      r0,r0,r10             ;593
000160  60b8              STR      r0,[r7,#8]            ;593
000162  463b              MOV      r3,r7                 ;595
000164  4632              MOV      r2,r6                 ;595
000166  4641              MOV      r1,r8                 ;595
000168  4648              MOV      r0,r9                 ;595
00016a  f7fffffe          BL       print_value
00016e  4638              MOV      r0,r7                 ;596
000170  f7fffffe          BL       update
000174  60b8              STR      r0,[r7,#8]            ;596
000176  b10e              CBZ      r6,|L52.380|
000178  2001              MOVS     r0,#1                 ;598
00017a  e000              B        |L52.382|
                  |L52.380|
00017c  2000              MOVS     r0,#0                 ;598
                  |L52.382|
00017e  f8d91000          LDR      r1,[r9,#0]            ;598
000182  b109              CBZ      r1,|L52.392|
000184  2101              MOVS     r1,#1                 ;598
000186  e000              B        |L52.394|
                  |L52.392|
000188  2100              MOVS     r1,#0                 ;598
                  |L52.394|
00018a  eb000a01          ADD      r10,r0,r1             ;598
00018e  f10a0101          ADD      r1,r10,#1             ;599
000192  4638              MOV      r0,r7                 ;599
000194  f7fffffe          BL       ensure
000198  4604              MOV      r4,r0                 ;599
00019a  b914              CBNZ     r4,|L52.418|
00019c  2000              MOVS     r0,#0                 ;599
00019e  e768              B        |L52.114|
                  |L52.416|
0001a0  e034              B        |L52.524|
                  |L52.418|
0001a2  f8d90000          LDR      r0,[r9,#0]            ;600
0001a6  b110              CBZ      r0,|L52.430|
0001a8  202c              MOVS     r0,#0x2c              ;600
0001aa  f8040b01          STRB     r0,[r4],#1            ;600
                  |L52.430|
0001ae  b116              CBZ      r6,|L52.438|
0001b0  200a              MOVS     r0,#0xa               ;601
0001b2  f8040b01          STRB     r0,[r4],#1            ;601
                  |L52.438|
0001b6  2000              MOVS     r0,#0                 ;601
0001b8  7020              STRB     r0,[r4,#0]            ;601
0001ba  68b8              LDR      r0,[r7,#8]            ;602
0001bc  4450              ADD      r0,r0,r10             ;602
0001be  60b8              STR      r0,[r7,#8]            ;602
0001c0  f8d99000          LDR      r9,[r9,#0]            ;603
                  |L52.452|
0001c4  f1b90f00          CMP      r9,#0                 ;579
0001c8  d193              BNE      |L52.242|
0001ca  b116              CBZ      r6,|L52.466|
0001cc  f1080001          ADD      r0,r8,#1              ;605
0001d0  e000              B        |L52.468|
                  |L52.466|
0001d2  2002              MOVS     r0,#2                 ;605
                  |L52.468|
0001d4  4601              MOV      r1,r0                 ;605
0001d6  4638              MOV      r0,r7                 ;605
0001d8  f7fffffe          BL       ensure
0001dc  4604              MOV      r4,r0                 ;605
0001de  b90c              CBNZ     r4,|L52.484|
0001e0  2000              MOVS     r0,#0                 ;605
0001e2  e746              B        |L52.114|
                  |L52.484|
0001e4  b14e              CBZ      r6,|L52.506|
0001e6  2500              MOVS     r5,#0                 ;606
0001e8  e003              B        |L52.498|
                  |L52.490|
0001ea  2009              MOVS     r0,#9                 ;606
0001ec  f8040b01          STRB     r0,[r4],#1            ;606
0001f0  1c6d              ADDS     r5,r5,#1              ;606
                  |L52.498|
0001f2  f1a80001          SUB      r0,r8,#1              ;606
0001f6  42a8              CMP      r0,r5                 ;606
0001f8  dcf7              BGT      |L52.490|
                  |L52.506|
0001fa  207d              MOVS     r0,#0x7d              ;607
0001fc  f8040b01          STRB     r0,[r4],#1            ;607
000200  2000              MOVS     r0,#0                 ;607
000202  7020              STRB     r0,[r4,#0]            ;607
000204  6838              LDR      r0,[r7,#0]            ;608
000206  4428              ADD      r0,r0,r5              ;608
000208  9006              STR      r0,[sp,#0x18]         ;608
00020a  e0fe              B        |L52.1034|
                  |L52.524|
00020c  9902              LDR      r1,[sp,#8]            ;613
00020e  0088              LSLS     r0,r1,#2              ;613
000210  497f              LDR      r1,|L52.1040|
000212  6809              LDR      r1,[r1,#0]            ;613  ; cJSON_malloc
000214  4788              BLX      r1                    ;613
000216  9008              STR      r0,[sp,#0x20]         ;613
000218  9808              LDR      r0,[sp,#0x20]         ;614
00021a  b908              CBNZ     r0,|L52.544|
00021c  2000              MOVS     r0,#0                 ;614
00021e  e728              B        |L52.114|
                  |L52.544|
000220  9902              LDR      r1,[sp,#8]            ;615
000222  0088              LSLS     r0,r1,#2              ;615
000224  497a              LDR      r1,|L52.1040|
000226  6809              LDR      r1,[r1,#0]            ;615  ; cJSON_malloc
000228  4788              BLX      r1                    ;615
00022a  9007              STR      r0,[sp,#0x1c]         ;615
00022c  9807              LDR      r0,[sp,#0x1c]         ;616
00022e  b928              CBNZ     r0,|L52.572|
000230  4978              LDR      r1,|L52.1044|
000232  9808              LDR      r0,[sp,#0x20]         ;616
000234  6809              LDR      r1,[r1,#0]            ;616  ; cJSON_free
000236  4788              BLX      r1                    ;616
000238  2000              MOVS     r0,#0                 ;616
00023a  e71a              B        |L52.114|
                  |L52.572|
00023c  9802              LDR      r0,[sp,#8]            ;617
00023e  0081              LSLS     r1,r0,#2              ;617
000240  9808              LDR      r0,[sp,#0x20]         ;617
000242  f7fffffe          BL       __aeabi_memclr4
000246  9802              LDR      r0,[sp,#8]            ;618
000248  0081              LSLS     r1,r0,#2              ;618
00024a  9807              LDR      r0,[sp,#0x1c]         ;618
00024c  f7fffffe          BL       __aeabi_memclr4
000250  9809              LDR      r0,[sp,#0x24]         ;621
000252  f8d09008          LDR      r9,[r0,#8]            ;621
000256  f1080801          ADD      r8,r8,#1              ;621
00025a  b106              CBZ      r6,|L52.606|
00025c  44c2              ADD      r10,r10,r8            ;621
                  |L52.606|
00025e  e02e              B        |L52.702|
                  |L52.608|
000260  2100              MOVS     r1,#0                 ;624
000262  f8d90020          LDR      r0,[r9,#0x20]         ;624
000266  f7fffffe          BL       print_string_ptr
00026a  9004              STR      r0,[sp,#0x10]         ;624
00026c  9907              LDR      r1,[sp,#0x1c]         ;624
00026e  f8410025          STR      r0,[r1,r5,LSL #2]     ;624
000272  2300              MOVS     r3,#0                 ;625
000274  4632              MOV      r2,r6                 ;625
000276  4641              MOV      r1,r8                 ;625
000278  4648              MOV      r0,r9                 ;625
00027a  f7fffffe          BL       print_value
00027e  4629              MOV      r1,r5                 ;625
000280  1c6d              ADDS     r5,r5,#1              ;625
000282  9005              STR      r0,[sp,#0x14]         ;625
000284  9a08              LDR      r2,[sp,#0x20]         ;625
000286  f8420021          STR      r0,[r2,r1,LSL #2]     ;625
00028a  9804              LDR      r0,[sp,#0x10]         ;626
00028c  b198              CBZ      r0,|L52.694|
00028e  9805              LDR      r0,[sp,#0x14]         ;626
000290  b188              CBZ      r0,|L52.694|
000292  9805              LDR      r0,[sp,#0x14]         ;626
000294  f7fffffe          BL       strlen
000298  4683              MOV      r11,r0                ;626
00029a  9804              LDR      r0,[sp,#0x10]         ;626
00029c  f7fffffe          BL       strlen
0002a0  eb0b0100          ADD      r1,r11,r0             ;626
0002a4  1c89              ADDS     r1,r1,#2              ;626
0002a6  b116              CBZ      r6,|L52.686|
0002a8  f1080002          ADD      r0,r8,#2              ;626
0002ac  e000              B        |L52.688|
                  |L52.686|
0002ae  2000              MOVS     r0,#0                 ;626
                  |L52.688|
0002b0  4408              ADD      r0,r0,r1              ;626
0002b2  4482              ADD      r10,r10,r0            ;626
0002b4  e001              B        |L52.698|
                  |L52.694|
0002b6  2001              MOVS     r0,#1                 ;626
0002b8  9001              STR      r0,[sp,#4]            ;626
                  |L52.698|
0002ba  f8d99000          LDR      r9,[r9,#0]            ;627
                  |L52.702|
0002be  f1b90f00          CMP      r9,#0                 ;622
0002c2  d1cd              BNE      |L52.608|
0002c4  9801              LDR      r0,[sp,#4]            ;631
0002c6  b920              CBNZ     r0,|L52.722|
0002c8  4650              MOV      r0,r10                ;631
0002ca  4951              LDR      r1,|L52.1040|
0002cc  6809              LDR      r1,[r1,#0]            ;631  ; cJSON_malloc
0002ce  4788              BLX      r1                    ;631
0002d0  9006              STR      r0,[sp,#0x18]         ;631
                  |L52.722|
0002d2  9806              LDR      r0,[sp,#0x18]         ;632
0002d4  b908              CBNZ     r0,|L52.730|
0002d6  2001              MOVS     r0,#1                 ;632
0002d8  9001              STR      r0,[sp,#4]            ;632
                  |L52.730|
0002da  9801              LDR      r0,[sp,#4]            ;635
0002dc  b318              CBZ      r0,|L52.806|
0002de  2500              MOVS     r5,#0                 ;637
0002e0  e014              B        |L52.780|
                  |L52.738|
0002e2  9807              LDR      r0,[sp,#0x1c]         ;637
0002e4  f8500025          LDR      r0,[r0,r5,LSL #2]     ;637
0002e8  b128              CBZ      r0,|L52.758|
0002ea  9907              LDR      r1,[sp,#0x1c]         ;637
0002ec  f8510025          LDR      r0,[r1,r5,LSL #2]     ;637
0002f0  4948              LDR      r1,|L52.1044|
0002f2  6809              LDR      r1,[r1,#0]            ;637  ; cJSON_free
0002f4  4788              BLX      r1                    ;637
                  |L52.758|
0002f6  9808              LDR      r0,[sp,#0x20]         ;637
0002f8  f8500025          LDR      r0,[r0,r5,LSL #2]     ;637
0002fc  b128              CBZ      r0,|L52.778|
0002fe  9908              LDR      r1,[sp,#0x20]         ;637
000300  f8510025          LDR      r0,[r1,r5,LSL #2]     ;637
000304  4943              LDR      r1,|L52.1044|
000306  6809              LDR      r1,[r1,#0]            ;637  ; cJSON_free
000308  4788              BLX      r1                    ;637
                  |L52.778|
00030a  1c6d              ADDS     r5,r5,#1              ;637
                  |L52.780|
00030c  9802              LDR      r0,[sp,#8]            ;637
00030e  4285              CMP      r5,r0                 ;637
000310  dbe7              BLT      |L52.738|
000312  4940              LDR      r1,|L52.1044|
000314  9807              LDR      r0,[sp,#0x1c]         ;638
000316  6809              LDR      r1,[r1,#0]            ;638  ; cJSON_free
000318  4788              BLX      r1                    ;638
00031a  493e              LDR      r1,|L52.1044|
00031c  9808              LDR      r0,[sp,#0x20]         ;638
00031e  6809              LDR      r1,[r1,#0]            ;638  ; cJSON_free
000320  4788              BLX      r1                    ;638
000322  2000              MOVS     r0,#0                 ;639
000324  e6a5              B        |L52.114|
                  |L52.806|
000326  217b              MOVS     r1,#0x7b              ;643
000328  9806              LDR      r0,[sp,#0x18]         ;643
00032a  7001              STRB     r1,[r0,#0]            ;643
00032c  9806              LDR      r0,[sp,#0x18]         ;643
00032e  1c44              ADDS     r4,r0,#1              ;643
000330  b116              CBZ      r6,|L52.824|
000332  200a              MOVS     r0,#0xa               ;643
000334  f8040b01          STRB     r0,[r4],#1            ;643
                  |L52.824|
000338  2000              MOVS     r0,#0                 ;643
00033a  7020              STRB     r0,[r4,#0]            ;643
00033c  2500              MOVS     r5,#0                 ;644
00033e  e048              B        |L52.978|
                  |L52.832|
000340  b15e              CBZ      r6,|L52.858|
000342  2000              MOVS     r0,#0                 ;646
000344  9003              STR      r0,[sp,#0xc]          ;646
000346  e005              B        |L52.852|
                  |L52.840|
000348  2009              MOVS     r0,#9                 ;646
00034a  f8040b01          STRB     r0,[r4],#1            ;646
00034e  9803              LDR      r0,[sp,#0xc]          ;646
000350  1c40              ADDS     r0,r0,#1              ;646
000352  9003              STR      r0,[sp,#0xc]          ;646
                  |L52.852|
000354  9803              LDR      r0,[sp,#0xc]          ;646
000356  4540              CMP      r0,r8                 ;646
000358  dbf6              BLT      |L52.840|
                  |L52.858|
00035a  9907              LDR      r1,[sp,#0x1c]         ;647
00035c  f8510025          LDR      r0,[r1,r5,LSL #2]     ;647
000360  f7fffffe          BL       strlen
000364  9000              STR      r0,[sp,#0]            ;647
000366  9807              LDR      r0,[sp,#0x1c]         ;647
000368  f8501025          LDR      r1,[r0,r5,LSL #2]     ;647
00036c  4620              MOV      r0,r4                 ;647
00036e  9a00              LDR      r2,[sp,#0]            ;647
000370  f7fffffe          BL       __aeabi_memcpy
000374  9800              LDR      r0,[sp,#0]            ;647
000376  4404              ADD      r4,r4,r0              ;647
000378  203a              MOVS     r0,#0x3a              ;648
00037a  f8040b01          STRB     r0,[r4],#1            ;648
00037e  b116              CBZ      r6,|L52.902|
000380  2009              MOVS     r0,#9                 ;648
000382  f8040b01          STRB     r0,[r4],#1            ;648
                  |L52.902|
000386  9808              LDR      r0,[sp,#0x20]         ;649
000388  f8501025          LDR      r1,[r0,r5,LSL #2]     ;649
00038c  4620              MOV      r0,r4                 ;649
00038e  f7fffffe          BL       strcpy
000392  9908              LDR      r1,[sp,#0x20]         ;649
000394  f8510025          LDR      r0,[r1,r5,LSL #2]     ;649
000398  f7fffffe          BL       strlen
00039c  4404              ADD      r4,r4,r0              ;649
00039e  9802              LDR      r0,[sp,#8]            ;650
0003a0  1e40              SUBS     r0,r0,#1              ;650
0003a2  42a8              CMP      r0,r5                 ;650
0003a4  d002              BEQ      |L52.940|
0003a6  202c              MOVS     r0,#0x2c              ;650
0003a8  f8040b01          STRB     r0,[r4],#1            ;650
                  |L52.940|
0003ac  b116              CBZ      r6,|L52.948|
0003ae  200a              MOVS     r0,#0xa               ;651
0003b0  f8040b01          STRB     r0,[r4],#1            ;651
                  |L52.948|
0003b4  2000              MOVS     r0,#0                 ;651
0003b6  7020              STRB     r0,[r4,#0]            ;651
0003b8  9907              LDR      r1,[sp,#0x1c]         ;652
0003ba  f8510025          LDR      r0,[r1,r5,LSL #2]     ;652
0003be  4915              LDR      r1,|L52.1044|
0003c0  6809              LDR      r1,[r1,#0]            ;652  ; cJSON_free
0003c2  4788              BLX      r1                    ;652
0003c4  9908              LDR      r1,[sp,#0x20]         ;652
0003c6  f8510025          LDR      r0,[r1,r5,LSL #2]     ;652
0003ca  4912              LDR      r1,|L52.1044|
0003cc  6809              LDR      r1,[r1,#0]            ;652  ; cJSON_free
0003ce  4788              BLX      r1                    ;652
0003d0  1c6d              ADDS     r5,r5,#1              ;644
                  |L52.978|
0003d2  9802              LDR      r0,[sp,#8]            ;644
0003d4  4285              CMP      r5,r0                 ;644
0003d6  dbb3              BLT      |L52.832|
0003d8  490e              LDR      r1,|L52.1044|
0003da  9807              LDR      r0,[sp,#0x1c]         ;655
0003dc  6809              LDR      r1,[r1,#0]            ;655  ; cJSON_free
0003de  4788              BLX      r1                    ;655
0003e0  490c              LDR      r1,|L52.1044|
0003e2  9808              LDR      r0,[sp,#0x20]         ;655
0003e4  6809              LDR      r1,[r1,#0]            ;655  ; cJSON_free
0003e6  4788              BLX      r1                    ;655
0003e8  b14e              CBZ      r6,|L52.1022|
0003ea  2500              MOVS     r5,#0                 ;656
0003ec  e003              B        |L52.1014|
                  |L52.1006|
0003ee  2009              MOVS     r0,#9                 ;656
0003f0  f8040b01          STRB     r0,[r4],#1            ;656
0003f4  1c6d              ADDS     r5,r5,#1              ;656
                  |L52.1014|
0003f6  f1a80001          SUB      r0,r8,#1              ;656
0003fa  42a8              CMP      r0,r5                 ;656
0003fc  dcf7              BGT      |L52.1006|
                  |L52.1022|
0003fe  207d              MOVS     r0,#0x7d              ;657
000400  f8040b01          STRB     r0,[r4],#1            ;657
000404  2000              MOVS     r0,#0                 ;657
000406  f8040b01          STRB     r0,[r4],#1            ;657
                  |L52.1034|
00040a  9806              LDR      r0,[sp,#0x18]         ;659
00040c  e631              B        |L52.114|
;;;661    
                          ENDP

00040e  0000              DCW      0x0000
                  |L52.1040|
                          DCD      cJSON_malloc
                  |L52.1044|
                          DCD      cJSON_free

                          AREA ||i.print_string||, CODE, READONLY, ALIGN=1

                  print_string PROC
;;;310    /* Invote print_string_ptr (which is useful) on an item. */
;;;311    static char *print_string(cJSON *item,printbuffer *p)	{return print_string_ptr(item->valuestring,p);}
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  6920              LDR      r0,[r4,#0x10]
00000a  f7fffffe          BL       print_string_ptr
00000e  bd70              POP      {r4-r6,pc}
;;;312    
                          ENDP


                          AREA ||i.print_string_ptr||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  print_string_ptr PROC
;;;253    /* Render the cstring provided to an escaped version that can be printed. */
;;;254    static char *print_string_ptr(const char *str,printbuffer *p)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;255    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
;;;256    	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;
000008  2700              MOVS     r7,#0
00000a  46bb              MOV      r11,r7
;;;257    	
;;;258    	for (ptr=str;*ptr;ptr++) flag|=((*ptr>0 && *ptr<32)||(*ptr=='\"')||(*ptr=='\\'))?1:0;
00000c  4645              MOV      r5,r8
00000e  e011              B        |L54.52|
                  |L54.16|
000010  7828              LDRB     r0,[r5,#0]
000012  2800              CMP      r0,#0
000014  dd02              BLE      |L54.28|
000016  7828              LDRB     r0,[r5,#0]
000018  2820              CMP      r0,#0x20
00001a  db05              BLT      |L54.40|
                  |L54.28|
00001c  7828              LDRB     r0,[r5,#0]
00001e  2822              CMP      r0,#0x22
000020  d002              BEQ      |L54.40|
000022  7828              LDRB     r0,[r5,#0]
000024  285c              CMP      r0,#0x5c
000026  d101              BNE      |L54.44|
                  |L54.40|
000028  2001              MOVS     r0,#1
00002a  e000              B        |L54.46|
                  |L54.44|
00002c  2000              MOVS     r0,#0
                  |L54.46|
00002e  ea400b0b          ORR      r11,r0,r11
000032  1c6d              ADDS     r5,r5,#1
                  |L54.52|
000034  7828              LDRB     r0,[r5,#0]
000036  2800              CMP      r0,#0
000038  d1ea              BNE      |L54.16|
;;;259    	if (!flag)
00003a  f1bb0f00          CMP      r11,#0
00003e  d122              BNE      |L54.134|
;;;260    	{
;;;261    		len=ptr-str;
000040  eba50708          SUB      r7,r5,r8
;;;262    		if (p) out=ensure(p,len+3);
000044  f1b90f00          CMP      r9,#0
000048  d005              BEQ      |L54.86|
00004a  1cf9              ADDS     r1,r7,#3
00004c  4648              MOV      r0,r9
00004e  f7fffffe          BL       ensure
000052  4606              MOV      r6,r0
000054  e004              B        |L54.96|
                  |L54.86|
;;;263    		else		out=(char*)cJSON_malloc(len+3);
000056  1cf8              ADDS     r0,r7,#3
000058  4958              LDR      r1,|L54.444|
00005a  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
00005c  4788              BLX      r1
00005e  4606              MOV      r6,r0
                  |L54.96|
;;;264    		if (!out) return 0;
000060  b916              CBNZ     r6,|L54.104|
000062  2000              MOVS     r0,#0
                  |L54.100|
;;;265    		ptr2=out;*ptr2++='\"';
;;;266    		strcpy(ptr2,str);
;;;267    		ptr2[len]='\"';
;;;268    		ptr2[len+1]=0;
;;;269    		return out;
;;;270    	}
;;;271    	
;;;272    	if (!str)
;;;273    	{
;;;274    		if (p)	out=ensure(p,3);
;;;275    		else	out=(char*)cJSON_malloc(3);
;;;276    		if (!out) return 0;
;;;277    		strcpy(out,"\"\"");
;;;278    		return out;
;;;279    	}
;;;280    	ptr=str;while ((token=*ptr) && ++len) {if (strchr("\"\\\b\f\n\r\t",token)) len++; else if (token<32) len+=5;ptr++;}
;;;281    	
;;;282    	if (p)	out=ensure(p,len+3);
;;;283    	else	out=(char*)cJSON_malloc(len+3);
;;;284    	if (!out) return 0;
;;;285    
;;;286    	ptr2=out;ptr=str;
;;;287    	*ptr2++='\"';
;;;288    	while (*ptr)
;;;289    	{
;;;290    		if ((unsigned char)*ptr>31 && *ptr!='\"' && *ptr!='\\') *ptr2++=*ptr++;
;;;291    		else
;;;292    		{
;;;293    			*ptr2++='\\';
;;;294    			switch (token=*ptr++)
;;;295    			{
;;;296    				case '\\':	*ptr2++='\\';	break;
;;;297    				case '\"':	*ptr2++='\"';	break;
;;;298    				case '\b':	*ptr2++='b';	break;
;;;299    				case '\f':	*ptr2++='f';	break;
;;;300    				case '\n':	*ptr2++='n';	break;
;;;301    				case '\r':	*ptr2++='r';	break;
;;;302    				case '\t':	*ptr2++='t';	break;
;;;303    				default: sprintf(ptr2,"u%04x",token);ptr2+=5;	break;	/* escape and print */
;;;304    			}
;;;305    		}
;;;306    	}
;;;307    	*ptr2++='\"';*ptr2++=0;
;;;308    	return out;
;;;309    }
000064  e8bd9ff0          POP      {r4-r12,pc}
                  |L54.104|
000068  4634              MOV      r4,r6                 ;265
00006a  2022              MOVS     r0,#0x22              ;265
00006c  f8040b01          STRB     r0,[r4],#1            ;265
000070  4641              MOV      r1,r8                 ;266
000072  4620              MOV      r0,r4                 ;266
000074  f7fffffe          BL       strcpy
000078  2022              MOVS     r0,#0x22              ;267
00007a  55e0              STRB     r0,[r4,r7]            ;267
00007c  2100              MOVS     r1,#0                 ;268
00007e  1c78              ADDS     r0,r7,#1              ;268
000080  5421              STRB     r1,[r4,r0]            ;268
000082  4630              MOV      r0,r6                 ;269
000084  e7ee              B        |L54.100|
                  |L54.134|
000086  f1b80f00          CMP      r8,#0                 ;272
00008a  d116              BNE      |L54.186|
00008c  f1b90f00          CMP      r9,#0                 ;274
000090  d005              BEQ      |L54.158|
000092  2103              MOVS     r1,#3                 ;274
000094  4648              MOV      r0,r9                 ;274
000096  f7fffffe          BL       ensure
00009a  4606              MOV      r6,r0                 ;274
00009c  e004              B        |L54.168|
                  |L54.158|
00009e  2003              MOVS     r0,#3                 ;275
0000a0  4946              LDR      r1,|L54.444|
0000a2  6809              LDR      r1,[r1,#0]            ;275  ; cJSON_malloc
0000a4  4788              BLX      r1                    ;275
0000a6  4606              MOV      r6,r0                 ;275
                  |L54.168|
0000a8  b90e              CBNZ     r6,|L54.174|
0000aa  2000              MOVS     r0,#0                 ;276
0000ac  e7da              B        |L54.100|
                  |L54.174|
0000ae  a144              ADR      r1,|L54.448|
0000b0  4630              MOV      r0,r6                 ;277
0000b2  f7fffffe          BL       strcpy
0000b6  4630              MOV      r0,r6                 ;278
0000b8  e7d4              B        |L54.100|
                  |L54.186|
0000ba  4645              MOV      r5,r8                 ;280
0000bc  e00b              B        |L54.214|
                  |L54.190|
0000be  4651              MOV      r1,r10                ;280
0000c0  a040              ADR      r0,|L54.452|
0000c2  f7fffffe          BL       strchr
0000c6  b108              CBZ      r0,|L54.204|
0000c8  1c7f              ADDS     r7,r7,#1              ;280
0000ca  e003              B        |L54.212|
                  |L54.204|
0000cc  f1ba0f20          CMP      r10,#0x20             ;280
0000d0  da00              BGE      |L54.212|
0000d2  1d7f              ADDS     r7,r7,#5              ;280
                  |L54.212|
0000d4  1c6d              ADDS     r5,r5,#1              ;280
                  |L54.214|
0000d6  f895a000          LDRB     r10,[r5,#0]           ;280
0000da  f1ba0f00          CMP      r10,#0                ;280
0000de  d002              BEQ      |L54.230|
0000e0  1c78              ADDS     r0,r7,#1              ;280
0000e2  0007              MOVS     r7,r0                 ;280
0000e4  d1eb              BNE      |L54.190|
                  |L54.230|
0000e6  f1b90f00          CMP      r9,#0                 ;282
0000ea  d005              BEQ      |L54.248|
0000ec  1cf9              ADDS     r1,r7,#3              ;282
0000ee  4648              MOV      r0,r9                 ;282
0000f0  f7fffffe          BL       ensure
0000f4  4606              MOV      r6,r0                 ;282
0000f6  e004              B        |L54.258|
                  |L54.248|
0000f8  1cf8              ADDS     r0,r7,#3              ;283
0000fa  4930              LDR      r1,|L54.444|
0000fc  6809              LDR      r1,[r1,#0]            ;283  ; cJSON_malloc
0000fe  4788              BLX      r1                    ;283
000100  4606              MOV      r6,r0                 ;283
                  |L54.258|
000102  b90e              CBNZ     r6,|L54.264|
000104  2000              MOVS     r0,#0                 ;284
000106  e7ad              B        |L54.100|
                  |L54.264|
000108  4634              MOV      r4,r6                 ;286
00010a  4645              MOV      r5,r8                 ;286
00010c  2022              MOVS     r0,#0x22              ;287
00010e  f8040b01          STRB     r0,[r4],#1            ;287
000112  e047              B        |L54.420|
                  |L54.276|
000114  7828              LDRB     r0,[r5,#0]            ;290
000116  281f              CMP      r0,#0x1f              ;290
000118  dd0a              BLE      |L54.304|
00011a  7828              LDRB     r0,[r5,#0]            ;290
00011c  2822              CMP      r0,#0x22              ;290
00011e  d007              BEQ      |L54.304|
000120  7828              LDRB     r0,[r5,#0]            ;290
000122  285c              CMP      r0,#0x5c              ;290
000124  d004              BEQ      |L54.304|
000126  f8150b01          LDRB     r0,[r5],#1            ;290
00012a  f8040b01          STRB     r0,[r4],#1            ;290
00012e  e039              B        |L54.420|
                  |L54.304|
000130  205c              MOVS     r0,#0x5c              ;293
000132  f8040b01          STRB     r0,[r4],#1            ;293
000136  f8151b01          LDRB     r1,[r5],#1            ;294
00013a  468a              MOV      r10,r1                ;294
00013c  290c              CMP      r1,#0xc               ;294
00013e  d019              BEQ      |L54.372|
000140  dc06              BGT      |L54.336|
000142  2908              CMP      r1,#8                 ;294
000144  d012              BEQ      |L54.364|
000146  2909              CMP      r1,#9                 ;294
000148  d020              BEQ      |L54.396|
00014a  290a              CMP      r1,#0xa               ;294
00014c  d122              BNE      |L54.404|
00014e  e015              B        |L54.380|
                  |L54.336|
000150  290d              CMP      r1,#0xd               ;294
000152  d017              BEQ      |L54.388|
000154  2922              CMP      r1,#0x22              ;294
000156  d005              BEQ      |L54.356|
000158  295c              CMP      r1,#0x5c              ;294
00015a  d11b              BNE      |L54.404|
00015c  205c              MOVS     r0,#0x5c              ;296
00015e  f8040b01          STRB     r0,[r4],#1            ;296
000162  e01e              B        |L54.418|
                  |L54.356|
000164  2022              MOVS     r0,#0x22              ;297
000166  f8040b01          STRB     r0,[r4],#1            ;297
00016a  e01a              B        |L54.418|
                  |L54.364|
00016c  2062              MOVS     r0,#0x62              ;298
00016e  f8040b01          STRB     r0,[r4],#1            ;298
000172  e016              B        |L54.418|
                  |L54.372|
000174  2066              MOVS     r0,#0x66              ;299
000176  f8040b01          STRB     r0,[r4],#1            ;299
00017a  e012              B        |L54.418|
                  |L54.380|
00017c  206e              MOVS     r0,#0x6e              ;300
00017e  f8040b01          STRB     r0,[r4],#1            ;300
000182  e00e              B        |L54.418|
                  |L54.388|
000184  2072              MOVS     r0,#0x72              ;301
000186  f8040b01          STRB     r0,[r4],#1            ;301
00018a  e00a              B        |L54.418|
                  |L54.396|
00018c  2074              MOVS     r0,#0x74              ;302
00018e  f8040b01          STRB     r0,[r4],#1            ;302
000192  e006              B        |L54.418|
                  |L54.404|
000194  4652              MOV      r2,r10                ;303
000196  a10d              ADR      r1,|L54.460|
000198  4620              MOV      r0,r4                 ;303
00019a  f7fffffe          BL       __2sprintf
00019e  1d64              ADDS     r4,r4,#5              ;303
0001a0  bf00              NOP                            ;303
                  |L54.418|
0001a2  bf00              NOP                            ;296
                  |L54.420|
0001a4  7828              LDRB     r0,[r5,#0]            ;288
0001a6  2800              CMP      r0,#0                 ;288
0001a8  d1b4              BNE      |L54.276|
0001aa  2022              MOVS     r0,#0x22              ;307
0001ac  f8040b01          STRB     r0,[r4],#1            ;307
0001b0  2000              MOVS     r0,#0                 ;307
0001b2  f8040b01          STRB     r0,[r4],#1            ;307
0001b6  4630              MOV      r0,r6                 ;308
0001b8  e754              B        |L54.100|
;;;310    /* Invote print_string_ptr (which is useful) on an item. */
                          ENDP

0001ba  0000              DCW      0x0000
                  |L54.444|
                          DCD      cJSON_malloc
                  |L54.448|
0001c0  222200            DCB      """""",0
0001c3  00                DCB      0
                  |L54.452|
0001c4  225c080c          DCB      """\\\b\f\n\r\t",0
0001c8  0a0d0900
                  |L54.460|
0001cc  75253034          DCB      "u%04x",0
0001d0  7800    
0001d2  00                DCB      0
0001d3  00                DCB      0

                          AREA ||i.print_value||, CODE, READONLY, ALIGN=2

                  print_value PROC
;;;373    /* Render a value to text. */
;;;374    static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;375    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461d              MOV      r5,r3
;;;376    	char *out=0;
00000c  2600              MOVS     r6,#0
;;;377    	if (!item) return 0;
00000e  b914              CBNZ     r4,|L55.22|
000010  2000              MOVS     r0,#0
                  |L55.18|
;;;378    	if (p)
;;;379    	{
;;;380    		switch ((item->type)&255)
;;;381    		{
;;;382    			case cJSON_NULL:	{out=ensure(p,5);	if (out) strcpy(out,"null");	break;}
;;;383    			case cJSON_False:	{out=ensure(p,6);	if (out) strcpy(out,"false");	break;}
;;;384    			case cJSON_True:	{out=ensure(p,5);	if (out) strcpy(out,"true");	break;}
;;;385    			case cJSON_Number:	out=print_number(item,p);break;
;;;386    			case cJSON_String:	out=print_string(item,p);break;
;;;387    			case cJSON_Array:	out=print_array(item,depth,fmt,p);break;
;;;388    			case cJSON_Object:	out=print_object(item,depth,fmt,p);break;
;;;389    		}
;;;390    	}
;;;391    	else
;;;392    	{
;;;393    		switch ((item->type)&255)
;;;394    		{
;;;395    			case cJSON_NULL:	out=cJSON_strdup("null");	break;
;;;396    			case cJSON_False:	out=cJSON_strdup("false");break;
;;;397    			case cJSON_True:	out=cJSON_strdup("true"); break;
;;;398    			case cJSON_Number:	out=print_number(item,0);break;
;;;399    			case cJSON_String:	out=print_string(item,0);break;
;;;400    			case cJSON_Array:	out=print_array(item,depth,fmt,0);break;
;;;401    			case cJSON_Object:	out=print_object(item,depth,fmt,0);break;
;;;402    		}
;;;403    	}
;;;404    	return out;
;;;405    }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L55.22|
000016  2d00              CMP      r5,#0                 ;378
000018  d046              BEQ      |L55.168|
00001a  7b20              LDRB     r0,[r4,#0xc]          ;380
00001c  2807              CMP      r0,#7                 ;380
00001e  d242              BCS      |L55.166|
000020  e8dff000          TBB      [pc,r0]               ;380
000024  0f1a0425          DCB      0x0f,0x1a,0x04,0x25
000028  2b313900          DCB      0x2b,0x31,0x39,0x00
00002c  2105              MOVS     r1,#5                 ;382
00002e  4628              MOV      r0,r5                 ;382
000030  f7fffffe          BL       ensure
000034  4606              MOV      r6,r0                 ;382
000036  b11e              CBZ      r6,|L55.64|
000038  a137              ADR      r1,|L55.280|
00003a  4630              MOV      r0,r6                 ;382
00003c  f7fffffe          BL       strcpy
                  |L55.64|
000040  e031              B        |L55.166|
000042  2106              MOVS     r1,#6                 ;383
000044  4628              MOV      r0,r5                 ;383
000046  f7fffffe          BL       ensure
00004a  4606              MOV      r6,r0                 ;383
00004c  b11e              CBZ      r6,|L55.86|
00004e  a134              ADR      r1,|L55.288|
000050  4630              MOV      r0,r6                 ;383
000052  f7fffffe          BL       strcpy
                  |L55.86|
000056  e026              B        |L55.166|
000058  2105              MOVS     r1,#5                 ;384
00005a  4628              MOV      r0,r5                 ;384
00005c  f7fffffe          BL       ensure
000060  4606              MOV      r6,r0                 ;384
000062  b11e              CBZ      r6,|L55.108|
000064  a130              ADR      r1,|L55.296|
000066  4630              MOV      r0,r6                 ;384
000068  f7fffffe          BL       strcpy
                  |L55.108|
00006c  e01b              B        |L55.166|
00006e  4629              MOV      r1,r5                 ;385
000070  4620              MOV      r0,r4                 ;385
000072  f7fffffe          BL       print_number
000076  4606              MOV      r6,r0                 ;385
000078  e015              B        |L55.166|
00007a  4629              MOV      r1,r5                 ;386
00007c  4620              MOV      r0,r4                 ;386
00007e  f7fffffe          BL       print_string
000082  4606              MOV      r6,r0                 ;386
000084  e00f              B        |L55.166|
000086  462b              MOV      r3,r5                 ;387
000088  4642              MOV      r2,r8                 ;387
00008a  4639              MOV      r1,r7                 ;387
00008c  4620              MOV      r0,r4                 ;387
00008e  f7fffffe          BL       print_array
000092  4606              MOV      r6,r0                 ;387
000094  e007              B        |L55.166|
000096  462b              MOV      r3,r5                 ;388
000098  4642              MOV      r2,r8                 ;388
00009a  4639              MOV      r1,r7                 ;388
00009c  4620              MOV      r0,r4                 ;388
00009e  f7fffffe          BL       print_object
0000a2  4606              MOV      r6,r0                 ;388
0000a4  bf00              NOP                            ;388
                  |L55.166|
0000a6  e034              B        |L55.274|
                  |L55.168|
0000a8  7b20              LDRB     r0,[r4,#0xc]          ;393
0000aa  2807              CMP      r0,#7                 ;393
0000ac  d230              BCS      |L55.272|
0000ae  e8dff000          TBB      [pc,r0]               ;393
0000b2  090e              DCB      0x09,0x0e
0000b4  0413191f          DCB      0x04,0x13,0x19,0x1f
0000b8  2700              DCB      0x27,0x00
0000ba  a017              ADR      r0,|L55.280|
0000bc  f7fffffe          BL       cJSON_strdup
0000c0  4606              MOV      r6,r0                 ;395
0000c2  e025              B        |L55.272|
0000c4  a016              ADR      r0,|L55.288|
0000c6  f7fffffe          BL       cJSON_strdup
0000ca  4606              MOV      r6,r0                 ;396
0000cc  e020              B        |L55.272|
0000ce  a016              ADR      r0,|L55.296|
0000d0  f7fffffe          BL       cJSON_strdup
0000d4  4606              MOV      r6,r0                 ;397
0000d6  e01b              B        |L55.272|
0000d8  2100              MOVS     r1,#0                 ;398
0000da  4620              MOV      r0,r4                 ;398
0000dc  f7fffffe          BL       print_number
0000e0  4606              MOV      r6,r0                 ;398
0000e2  e015              B        |L55.272|
0000e4  2100              MOVS     r1,#0                 ;399
0000e6  4620              MOV      r0,r4                 ;399
0000e8  f7fffffe          BL       print_string
0000ec  4606              MOV      r6,r0                 ;399
0000ee  e00f              B        |L55.272|
0000f0  2300              MOVS     r3,#0                 ;400
0000f2  4642              MOV      r2,r8                 ;400
0000f4  4639              MOV      r1,r7                 ;400
0000f6  4620              MOV      r0,r4                 ;400
0000f8  f7fffffe          BL       print_array
0000fc  4606              MOV      r6,r0                 ;400
0000fe  e007              B        |L55.272|
000100  2300              MOVS     r3,#0                 ;401
000102  4642              MOV      r2,r8                 ;401
000104  4639              MOV      r1,r7                 ;401
000106  4620              MOV      r0,r4                 ;401
000108  f7fffffe          BL       print_object
00010c  4606              MOV      r6,r0                 ;401
00010e  bf00              NOP                            ;401
                  |L55.272|
000110  bf00              NOP                            ;395
                  |L55.274|
000112  4630              MOV      r0,r6                 ;404
000114  e77d              B        |L55.18|
;;;406    
                          ENDP

000116  0000              DCW      0x0000
                  |L55.280|
000118  6e756c6c          DCB      "null",0
00011c  00      
00011d  00                DCB      0
00011e  00                DCB      0
00011f  00                DCB      0
                  |L55.288|
000120  66616c73          DCB      "false",0
000124  6500    
000126  00                DCB      0
000127  00                DCB      0
                  |L55.296|
000128  74727565          DCB      "true",0
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0

                          AREA ||i.skip||, CODE, READONLY, ALIGN=1

                  skip PROC
;;;321    /* Utility to jump whitespace and cr/lf */
;;;322    static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
000000  e000              B        |L56.4|
                  |L56.2|
000002  1c40              ADDS     r0,r0,#1
                  |L56.4|
000004  b120              CBZ      r0,|L56.16|
000006  7801              LDRB     r1,[r0,#0]
000008  b111              CBZ      r1,|L56.16|
00000a  7801              LDRB     r1,[r0,#0]
00000c  2920              CMP      r1,#0x20
00000e  ddf8              BLE      |L56.2|
                  |L56.16|
000010  4770              BX       lr
;;;323    
                          ENDP


                          AREA ||i.suffix_object||, CODE, READONLY, ALIGN=1

                  suffix_object PROC
;;;667    /* Utility for array list handling. */
;;;668    static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}
000000  6001              STR      r1,[r0,#0]
000002  6048              STR      r0,[r1,#4]
000004  4770              BX       lr
;;;669    /* Utility for handling references. */
                          ENDP


                          AREA ||i.update||, CODE, READONLY, ALIGN=1

                  update PROC
;;;139    
;;;140    static int update(printbuffer *p)
000000  b570              PUSH     {r4-r6,lr}
;;;141    {
000002  4604              MOV      r4,r0
;;;142    	char *str;
;;;143    	if (!p || !p->buffer) return 0;
000004  b10c              CBZ      r4,|L58.10|
000006  6820              LDR      r0,[r4,#0]
000008  b908              CBNZ     r0,|L58.14|
                  |L58.10|
00000a  2000              MOVS     r0,#0
                  |L58.12|
;;;144    	str=p->buffer+p->offset;
;;;145    	return p->offset+strlen(str);
;;;146    }
00000c  bd70              POP      {r4-r6,pc}
                  |L58.14|
00000e  68a1              LDR      r1,[r4,#8]            ;144
000010  6820              LDR      r0,[r4,#0]            ;144
000012  1845              ADDS     r5,r0,r1              ;144
000014  4628              MOV      r0,r5                 ;145
000016  f7fffffe          BL       strlen
00001a  68a1              LDR      r1,[r4,#8]            ;145
00001c  4408              ADD      r0,r0,r1              ;145
00001e  e7f5              B        |L58.12|
;;;147    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  firstByteMark
000000  0000c0e0          DCB      0x00,0x00,0xc0,0xe0
000004  f0f8fc            DCB      0xf0,0xf8,0xfc

                          AREA ||.data||, DATA, ALIGN=2

                  cJSON_malloc
                          DCD      malloc
                  cJSON_free
                          DCD      free
                  ||ep||
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\cJSON.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_cJSON_c_c832ded2____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_cJSON_c_c832ded2____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_cJSON_c_c832ded2____REVSH|
#line 128
|__asm___7_cJSON_c_c832ded2____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
