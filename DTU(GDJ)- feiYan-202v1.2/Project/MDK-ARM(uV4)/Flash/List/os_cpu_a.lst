


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ;                                                uC/OS-I
                       II
    4 00000000         ;                                          The Real-Time
                        Kernel
    5 00000000         ;
    6 00000000         ;
    7 00000000         ;                           (c) Copyright 2009-2015; Mic
                       rium, Inc.; Weston, FL
    8 00000000         ;                    All rights reserved.  Protected by 
                       international copyright laws.
    9 00000000         ;
   10 00000000         ;                                           ARM Cortex-M
                       3 Port
   11 00000000         ;
   12 00000000         ; File      : OS_CPU_A.ASM
   13 00000000         ; Version   : V3.05.00
   14 00000000         ; By        : JJL
   15 00000000         ;             BAN
   16 00000000         ;
   17 00000000         ; For       : ARMv7M Cortex-M3
   18 00000000         ; Mode      : Thumb2
   19 00000000         ; Toolchain : RealView Development Suite
   20 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   21 00000000         ;             ARM Developer Suite (ADS)
   22 00000000         ;             Keil uVision
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;
   25 00000000         
   26 00000000         ;*******************************************************
                       *************************************************
   27 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   28 00000000         ;*******************************************************
                       *************************************************
   29 00000000         
   30 00000000                 IMPORT           OSRunning   ; External referenc
                                                            es
   31 00000000                 IMPORT           OSPrioCur
   32 00000000                 IMPORT           OSPrioHighRdy
   33 00000000                 IMPORT           OSTCBCurPtr
   34 00000000                 IMPORT           OSTCBHighRdyPtr
   35 00000000                 IMPORT           OSIntExit
   36 00000000                 IMPORT           OSTaskSwHook
   37 00000000                 IMPORT           OS_CPU_ExceptStkBase
   38 00000000         
   39 00000000         
   40 00000000                 EXPORT           OSStartHighRdy ; Functions decl
                                                            ared in this file
   41 00000000                 EXPORT           OS_CPU_PendSVHandler
   42 00000000         
   43 00000000         ;PAGE
   44 00000000         ;*******************************************************
                       *************************************************
   45 00000000         ;                                               EQUATES



ARM Macro Assembler    Page 2 


   46 00000000         ;*******************************************************
                       *************************************************
   47 00000000         
   48 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   49 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   50 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   51 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   52 00000000         
   53 00000000         
   54 00000000         ;*******************************************************
                       *************************************************
   55 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   56 00000000         ;*******************************************************
                       *************************************************
   57 00000000         
   58 00000000                 PRESERVE8
   59 00000000                 THUMB
   60 00000000         
   61 00000000                 AREA             CODE, CODE, READONLY
   62 00000000         
   63 00000000         
   64 00000000         ;PAGE
   65 00000000         ;*******************************************************
                       *************************************************
   66 00000000         ;                                         START MULTITAS
                       KING
   67 00000000         ;                                      void OSStartHighR
                       dy(void)
   68 00000000         ;
   69 00000000         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
   70 00000000         ;              the first task to start.
   71 00000000         ;
   72 00000000         ;           2) OSStartHighRdy() MUST:
   73 00000000         ;              a) Setup PendSV exception priority to low
                       est;
   74 00000000         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
   75 00000000         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
   76 00000000         ;              d) Trigger PendSV exception;
   77 00000000         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
   78 00000000         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 3 


   79 00000000         
   80 00000000         OSStartHighRdy
   81 00000000 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
   82 00000002 F64E 5022 
              F2CE 0000        MOV32            R0, NVIC_SYSPRI14 ; Set the Pen
                                                            dSV exception prior
                                                            ity
   83 0000000A F240 01FF 
              F2C0 0100        MOV32            R1, NVIC_PENDSV_PRI
   84 00000012 7001            STRB             R1, [R0]
   85 00000014         
   86 00000014 F240 0000 
              F2C0 0000        MOV32            R0, OS_CPU_ExceptStkBase ; Init
                                                            ialize the MSP to t
                                                            he OS_CPU_ExceptStk
                                                            Base
   87 0000001C 6801            LDR              R1, [R0]
   88 0000001E F381 8808       MSR              MSP, R1
   89 00000022         
   90 00000022 F240 0000 
              F2C0 0000        MOV32            R0, OSPrioCur ; OSPrioCur   = O
                                                            SPrioHighRdy;
   91 0000002A F240 0100 
              F2C0 0100        MOV32            R1, OSPrioHighRdy
   92 00000032 780A            LDRB             R2, [R1]
   93 00000034 7002            STRB             R2, [R0]
   94 00000036         
   95 00000036 F240 0500 
              F2C0 0500        MOV32            R5, OSTCBCurPtr
   96 0000003E F240 0100 
              F2C0 0100        MOV32            R1, OSTCBHighRdyPtr ; OSTCBCurP
                                                            tr = OSTCBHighRdyPt
                                                            r;
   97 00000046 680A            LDR              R2, [R1]
   98 00000048 602A            STR              R2, [R5]
   99 0000004A         
  100 0000004A 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            RdyPtr->StkPtr;
  101 0000004C F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  102 00000050         
  103 00000050 F3EF 8014       MRS              R0, CONTROL
  104 00000054 F040 0002       ORR              R0, R0, #2
  105 00000058 F380 8814       MSR              CONTROL, R0
  106 0000005C F3BF 8F6F       ISB                          ; Sync instruction 
                                                            stream
  107 00000060         
  108 00000060 E8BD 0FF0       LDMFD            SP!, {R4-R11} ; Restore r4-11 f
                                                            rom new process sta
                                                            ck
  109 00000064 BC0F            LDMFD            SP!, {R0-R3} ; Restore r0, r3
  110 00000066 E8BD 5000       LDMFD            SP!, {R12, LR} 
                                                            ; Load R12 and LR
  111 0000006A BC06            LDMFD            SP!, {R1, R2} ; Load PC and dis
                                                            card xPSR
  112 0000006C B662            CPSIE            I



ARM Macro Assembler    Page 4 


  113 0000006E 4708            BX               R1
  114 00000070         
  115 00000070         
  116 00000070         ;PAGE
  117 00000070         ;*******************************************************
                       *************************************************
  118 00000070         ;                                       HANDLE PendSV EX
                       CEPTION
  119 00000070         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  120 00000070         ;
  121 00000070         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  122 00000070         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  123 00000070         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  124 00000070         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  125 00000070         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  126 00000070         ;              a thread or occurs due to an interrupt or
                        exception.
  127 00000070         ;
  128 00000070         ;           2) Pseudo-code is:
  129 00000070         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  130 00000070         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  131 00000070         ;              c) Save the process SP in its TCB, OSTCBC
                       urPtr->OSTCBStkPtr = SP;
  132 00000070         ;              d) Call OSTaskSwHook();
  133 00000070         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  134 00000070         ;              f) Get current ready thread TCB, OSTCBCur
                       Ptr = OSTCBHighRdyPtr;
  135 00000070         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdyPtr->OSTCBStkPtr;
  136 00000070         ;              h) Restore R4-R11 from new process stack;
                       
  137 00000070         ;              i) Perform exception return which will re
                       store remaining context.
  138 00000070         ;
  139 00000070         ;           3) On entry into PendSV handler:
  140 00000070         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  141 00000070         ;                 xPSR, PC, LR, R12, R0-R3
  142 00000070         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  143 00000070         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  144 00000070         ;              d) OSTCBCurPtr      points to the OS_TCB 
                       of the task to suspend
  145 00000070         ;                 OSTCBHighRdyPtr  points to the OS_TCB 
                       of the task to resume
  146 00000070         ;
  147 00000070         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  148 00000070         ;              know that it will only be run when no oth



ARM Macro Assembler    Page 5 


                       er exception or interrupt is active, and
  149 00000070         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  150 00000070         ;*******************************************************
                       *************************************************
  151 00000070         
  152 00000070         OS_CPU_PendSVHandler
  153 00000070 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  154 00000072 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  155 00000076 E920 0FF0       STMFD            R0!, {R4-R11} ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  156 0000007A         
  157 0000007A F240 0500 
              F2C0 0500        MOV32            R5, OSTCBCurPtr ; OSTCBCurPtr->
                                                            OSTCBStkPtr = SP;
  158 00000082 682E            LDR              R6, [R5]
  159 00000084 6030            STR              R0, [R6]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  160 00000086         
  161 00000086         ; At this point, entire context of process has been save
                       d
  162 00000086 4674            MOV              R4, LR      ; Save LR exc_retur
                                                            n value
  163 00000088 F7FF FFFE       BL               OSTaskSwHook ; OSTaskSwHook();
  164 0000008C         
  165 0000008C F240 0000 
              F2C0 0000        MOV32            R0, OSPrioCur ; OSPrioCur   = O
                                                            SPrioHighRdy;
  166 00000094 F240 0100 
              F2C0 0100        MOV32            R1, OSPrioHighRdy
  167 0000009C 780A            LDRB             R2, [R1]
  168 0000009E 7002            STRB             R2, [R0]
  169 000000A0         
  170 000000A0 F240 0100 
              F2C0 0100        MOV32            R1, OSTCBHighRdyPtr ; OSTCBCurP
                                                            tr = OSTCBHighRdyPt
                                                            r;
  171 000000A8 680A            LDR              R2, [R1]
  172 000000AA 602A            STR              R2, [R5]
  173 000000AC         
  174 000000AC F044 0E04       ORR              LR, R4, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  175 000000B0 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            RdyPtr->StkPtr;
  176 000000B2 E8B0 0FF0       LDMFD            R0!, {R4-R11} ; Restore r4-11 f
                                                            rom new process sta
                                                            ck
  177 000000B6 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  178 000000BA B662            CPSIE            I
  179 000000BC 4770            BX               LR          ; Exception return 
                                                            will restore remain



ARM Macro Assembler    Page 6 


                                                            ing context
  180 000000BE         
  181 000000BE                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\Flash\
Obj\os_cpu_a.d -o.\Flash\Obj\os_cpu_a.o -Id:\Keil_v4\ARM\RV31\INC -Id:\Keil_v4\
ARM\CMSIS\Include -Id:\Keil_v4\ARM\Inc\ST\STM32F10x --predefine="__MICROLIB SET
A 1" --list=.\Flash\List\os_cpu_a.lst ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-
M3\RealView\os_cpu_a.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CODE 00000000

Symbol: CODE
   Definitions
      At line 61 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
   Uses
      None
Comment: CODE unused
OSStartHighRdy 00000000

Symbol: OSStartHighRdy
   Definitions
      At line 80 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
   Uses
      At line 40 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler 00000070

Symbol: OS_CPU_PendSVHandler
   Definitions
      At line 152 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\
os_cpu_a.s
   Uses
      At line 41 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
Comment: OS_CPU_PendSVHandler used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 48 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
   Uses
      None
Comment: NVIC_INT_CTRL unused
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 51 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
   Uses
      None
Comment: NVIC_PENDSVSET unused
NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 50 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
   Uses
      At line 83 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 49 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
   Uses
      At line 82 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 35 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 31 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
   Uses
      At line 90 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
      At line 165 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\
os_cpu_a.s

OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 32 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
   Uses
      At line 91 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
      At line 166 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\
os_cpu_a.s

OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 30 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
   Uses
      None
Comment: OSRunning unused
OSTCBCurPtr 00000000

Symbol: OSTCBCurPtr
   Definitions
      At line 33 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
   Uses
      At line 95 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
      At line 157 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\
os_cpu_a.s

OSTCBHighRdyPtr 00000000

Symbol: OSTCBHighRdyPtr
   Definitions
      At line 34 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

s_cpu_a.s
   Uses
      At line 96 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
      At line 170 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\
os_cpu_a.s

OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 36 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
   Uses
      At line 163 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\
os_cpu_a.s
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 37 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
   Uses
      At line 86 in file ..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView\o
s_cpu_a.s
Comment: OS_CPU_ExceptStkBase used once
8 symbols
346 symbols in table
