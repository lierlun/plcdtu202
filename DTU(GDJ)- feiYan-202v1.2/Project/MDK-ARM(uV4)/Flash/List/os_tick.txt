; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\os_tick.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\os_tick.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -I..\..\Malloc -I..\..\User\Modbus -Id:\Keil_v4\ARM\RV31\INC -Id:\Keil_v4\ARM\CMSIS\Include -Id:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Flash\Obj\os_tick.crf ..\..\uCOS-III\uCOS-III\Source\os_tick.c]
                          THUMB

                          AREA ||i.OS_TickListInsert||, CODE, READONLY, ALIGN=1

                  OS_TickListInsert PROC
;;;223    
;;;224    void  OS_TickListInsert (OS_TICK_LIST  *p_list,
000000  b570              PUSH     {r4-r6,lr}
;;;225                             OS_TCB        *p_tcb,
;;;226                             OS_TICK        time)
;;;227    {
000002  4615              MOV      r5,r2
;;;228        OS_TCB  *p_tcb1;
;;;229        OS_TCB  *p_tcb2;
;;;230        OS_TICK  remain;
;;;231    #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
;;;232        OS_TICK  tick_step = (OS_TICK)-1;
;;;233    #endif
;;;234    
;;;235    
;;;236        if (p_list->TCB_Ptr == DEF_NULL) {                          /* Is the list empty?                                   */
000004  6806              LDR      r6,[r0,#0]
000006  b946              CBNZ     r6,|L1.26|
;;;237            p_tcb->TickRemain  = time;                              /* Yes, Store time in TCB                               */
000008  650d              STR      r5,[r1,#0x50]
;;;238            p_tcb->TickNextPtr = DEF_NULL;
00000a  2600              MOVS     r6,#0
00000c  618e              STR      r6,[r1,#0x18]
;;;239            p_tcb->TickPrevPtr = DEF_NULL;
00000e  61ce              STR      r6,[r1,#0x1c]
;;;240            p_tcb->TickListPtr = p_list;                            /* Link to this list                                    */
000010  6208              STR      r0,[r1,#0x20]
;;;241            p_list->TCB_Ptr    = p_tcb;                             /* Point to TCB of task to place in the list            */
000012  6001              STR      r1,[r0,#0]
;;;242    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;243            p_list->NbrEntries = 1u;                                /* List contains 1 entry                                */
000014  2601              MOVS     r6,#1
000016  8086              STRH     r6,[r0,#4]
000018  e033              B        |L1.130|
                  |L1.26|
;;;244    #endif
;;;245    #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
;;;246            tick_step = time;
;;;247    #endif
;;;248        } else {
;;;249            p_tcb1 = p_list->TCB_Ptr;
00001a  6804              LDR      r4,[r0,#0]
;;;250            p_tcb2 = p_list->TCB_Ptr;                               /* No,  Insert somewhere in the list in delta order     */
00001c  6802              LDR      r2,[r0,#0]
;;;251            remain = time;
00001e  462b              MOV      r3,r5
;;;252            while (p_tcb2 != DEF_NULL) {
000020  e024              B        |L1.108|
                  |L1.34|
;;;253                if (remain <= p_tcb2->TickRemain) {
000022  6d16              LDR      r6,[r2,#0x50]
000024  429e              CMP      r6,r3
000026  d31d              BCC      |L1.100|
;;;254                    if (p_tcb2->TickPrevPtr == DEF_NULL) {          /* Insert before the first entry in the list?           */
000028  69d6              LDR      r6,[r2,#0x1c]
00002a  b96e              CBNZ     r6,|L1.72|
;;;255                        p_tcb->TickRemain   = remain;               /* Yes, Store remaining time                            */
00002c  650b              STR      r3,[r1,#0x50]
;;;256                        p_tcb->TickPrevPtr  = DEF_NULL;
00002e  2600              MOVS     r6,#0
000030  61ce              STR      r6,[r1,#0x1c]
;;;257                        p_tcb->TickNextPtr  = p_tcb2;    
000032  618a              STR      r2,[r1,#0x18]
;;;258                        p_tcb->TickListPtr  = p_list;               /* Link TCB to this list                                */
000034  6208              STR      r0,[r1,#0x20]
;;;259                        p_tcb2->TickRemain -= remain;               /* Reduce time of next entry in the list                */
000036  6d16              LDR      r6,[r2,#0x50]
000038  1af6              SUBS     r6,r6,r3
00003a  6516              STR      r6,[r2,#0x50]
;;;260                        p_tcb2->TickPrevPtr = p_tcb;
00003c  61d1              STR      r1,[r2,#0x1c]
;;;261                        p_list->TCB_Ptr     = p_tcb;                /* Add TCB to the list                                  */
00003e  6001              STR      r1,[r0,#0]
;;;262    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;263                        p_list->NbrEntries++;                       /* List contains an extra entry                         */
000040  8886              LDRH     r6,[r0,#4]
000042  1c76              ADDS     r6,r6,#1
000044  8086              STRH     r6,[r0,#4]
000046  e00c              B        |L1.98|
                  |L1.72|
;;;264    #endif
;;;265    #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
;;;266                        tick_step = remain;
;;;267    #endif
;;;268                    } else {                                        /* No,  Insert somewhere further in the list            */
;;;269                        p_tcb1              = p_tcb2->TickPrevPtr;
000048  69d4              LDR      r4,[r2,#0x1c]
;;;270                        p_tcb->TickRemain   = remain;               /* Store remaining time                                 */
00004a  650b              STR      r3,[r1,#0x50]
;;;271                        p_tcb->TickPrevPtr  = p_tcb1;
00004c  61cc              STR      r4,[r1,#0x1c]
;;;272                        p_tcb->TickNextPtr  = p_tcb2;    
00004e  618a              STR      r2,[r1,#0x18]
;;;273                        p_tcb->TickListPtr  = p_list;               /* TCB points to this list                              */
000050  6208              STR      r0,[r1,#0x20]
;;;274                        p_tcb2->TickRemain -= remain;               /* Reduce time of next entry in the list                */
000052  6d16              LDR      r6,[r2,#0x50]
000054  1af6              SUBS     r6,r6,r3
000056  6516              STR      r6,[r2,#0x50]
;;;275                        p_tcb2->TickPrevPtr = p_tcb;
000058  61d1              STR      r1,[r2,#0x1c]
;;;276                        p_tcb1->TickNextPtr = p_tcb;
00005a  61a1              STR      r1,[r4,#0x18]
;;;277    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;278                        p_list->NbrEntries++;                       /* List contains an extra entry                         */
00005c  8886              LDRH     r6,[r0,#4]
00005e  1c76              ADDS     r6,r6,#1
000060  8086              STRH     r6,[r0,#4]
                  |L1.98|
;;;279    #endif
;;;280                    }
;;;281    
;;;282    #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
;;;283                    if (tick_step < OSTickCtrStep) {
;;;284                        OSTickCtrStep = tick_step;
;;;285                        BSP_OS_TickNextSet(tick_step);
;;;286                    }
;;;287    #endif
;;;288    
;;;289                    return;
;;;290                } else {
;;;291                    remain -= p_tcb2->TickRemain;                   /* Point to the next TCB in the list                    */
;;;292                    p_tcb1  = p_tcb2;
;;;293                    p_tcb2  = p_tcb2->TickNextPtr;
;;;294                }                 
;;;295            }
;;;296            p_tcb->TickRemain   = remain;                       
;;;297            p_tcb->TickPrevPtr  = p_tcb1;
;;;298            p_tcb->TickNextPtr  = DEF_NULL;
;;;299            p_tcb->TickListPtr  = p_list;                           /* Link the list to the TCB                             */
;;;300            p_tcb1->TickNextPtr = p_tcb;
;;;301    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;302            p_list->NbrEntries++;                                   /* List contains an extra entry                         */
;;;303    #endif
;;;304        }
;;;305    
;;;306    #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
;;;307        if (tick_step < OSTickCtrStep) {
;;;308            OSTickCtrStep = tick_step;
;;;309            BSP_OS_TickNextSet(tick_step);
;;;310        }
;;;311    #endif
;;;312    }
000062  bd70              POP      {r4-r6,pc}
                  |L1.100|
000064  6d16              LDR      r6,[r2,#0x50]         ;291
000066  1b9b              SUBS     r3,r3,r6              ;291
000068  4614              MOV      r4,r2                 ;292
00006a  6992              LDR      r2,[r2,#0x18]         ;293
                  |L1.108|
00006c  2a00              CMP      r2,#0                 ;252
00006e  d1d8              BNE      |L1.34|
000070  650b              STR      r3,[r1,#0x50]         ;296
000072  61cc              STR      r4,[r1,#0x1c]         ;297
000074  2600              MOVS     r6,#0                 ;298
000076  618e              STR      r6,[r1,#0x18]         ;298
000078  6208              STR      r0,[r1,#0x20]         ;299
00007a  61a1              STR      r1,[r4,#0x18]         ;300
00007c  8886              LDRH     r6,[r0,#4]            ;302
00007e  1c76              ADDS     r6,r6,#1              ;302
000080  8086              STRH     r6,[r0,#4]            ;302
                  |L1.130|
000082  bf00              NOP      
000084  e7ed              B        |L1.98|
;;;313    
                          ENDP


                          AREA ||i.OS_TickListInsertDly||, CODE, READONLY, ALIGN=2

                  OS_TickListInsertDly PROC
;;;350    
;;;351    void  OS_TickListInsertDly (OS_TCB   *p_tcb,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;352                                OS_TICK   time,
;;;353                                OS_OPT    opt,
;;;354                                OS_ERR   *p_err)
;;;355    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4691              MOV      r9,r2
00000a  4698              MOV      r8,r3
;;;356        OS_TICK   remain;
;;;357        OS_TICK   tick_ctr;
;;;358    
;;;359    
;;;360    #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
;;;361        tick_ctr = BSP_OS_TickGet();
;;;362    #else
;;;363        tick_ctr = OSTickCtr;
00000c  4824              LDR      r0,|L2.160|
00000e  6807              LDR      r7,[r0,#0]  ; OSTickCtr
;;;364    #endif
;;;365    
;;;366        if (opt == OS_OPT_TIME_MATCH) {                             /* MATCH to absolute OSTickCtr value mode               */
000010  f1b90f04          CMP      r9,#4
000014  d10c              BNE      |L2.48|
;;;367            remain = time - tick_ctr;
000016  1bee              SUBS     r6,r5,r7
;;;368            if ((remain > OS_TICK_TH_RDY) ||                        /* If delay already occurred, ...                       */
000018  f5163f80          CMN      r6,#0x10000
00001c  d800              BHI      |L2.32|
;;;369                (remain == 0u)) {
00001e  bb66              CBNZ     r6,|L2.122|
                  |L2.32|
;;;370                p_tcb->TickRemain = 0u;
000020  2000              MOVS     r0,#0
000022  6520              STR      r0,[r4,#0x50]
;;;371               *p_err             =  OS_ERR_TIME_ZERO_DLY;          /* ... do NOT delay.                                    */
000024  f247207e          MOV      r0,#0x727e
000028  f8a80000          STRH     r0,[r8,#0]
                  |L2.44|
;;;372                return;
;;;373            }
;;;374    
;;;375        } else if (opt == OS_OPT_TIME_PERIODIC) {                   /* PERIODIC mode.                                       */
;;;376            if ((tick_ctr - p_tcb->TickCtrPrev) > time) {
;;;377                remain             = time;                          /* ... first time we load .TickCtrPrev                  */
;;;378                p_tcb->TickCtrPrev = tick_ctr + time;
;;;379            } else {
;;;380                remain = time - (tick_ctr - p_tcb->TickCtrPrev);
;;;381                if ((remain > OS_TICK_TH_RDY) ||                    /* If delay time has already passed, ...                */
;;;382                    (remain == 0u)) {
;;;383                    p_tcb->TickCtrPrev += time + time * ((tick_ctr - p_tcb->TickCtrPrev) / time); /* Try to recover the period*/
;;;384                    p_tcb->TickRemain   = 0u;
;;;385                   *p_err               =  OS_ERR_TIME_ZERO_DLY;    /* ... do NOT delay.                                    */
;;;386                    return;
;;;387                }
;;;388                p_tcb->TickCtrPrev += time;
;;;389            }
;;;390    
;;;391        } else {                                                    /* RELATIVE time delay mode                             */
;;;392            remain = time;
;;;393        }
;;;394    
;;;395       *p_err = OS_ERR_NONE;
;;;396    
;;;397        p_tcb->TaskState = OS_TASK_STATE_DLY;
;;;398        OS_TickListInsert(&OSTickListDly, p_tcb, remain + (tick_ctr - OSTickCtr));
;;;399    }
00002c  e8bd83f0          POP      {r4-r9,pc}
                  |L2.48|
000030  f1b90f08          CMP      r9,#8                 ;375
000034  d122              BNE      |L2.124|
000036  6d60              LDR      r0,[r4,#0x54]         ;376
000038  1a38              SUBS     r0,r7,r0              ;376
00003a  42a8              CMP      r0,r5                 ;376
00003c  d903              BLS      |L2.70|
00003e  462e              MOV      r6,r5                 ;377
000040  1978              ADDS     r0,r7,r5              ;378
000042  6560              STR      r0,[r4,#0x54]         ;378
000044  e01b              B        |L2.126|
                  |L2.70|
000046  6d60              LDR      r0,[r4,#0x54]         ;380
000048  1a38              SUBS     r0,r7,r0              ;380
00004a  1a2e              SUBS     r6,r5,r0              ;380
00004c  f5163f80          CMN      r6,#0x10000           ;381
000050  d800              BHI      |L2.84|
000052  b97e              CBNZ     r6,|L2.116|
                  |L2.84|
000054  6d60              LDR      r0,[r4,#0x54]         ;383
000056  1a38              SUBS     r0,r7,r0              ;383
000058  fbb0f0f5          UDIV     r0,r0,r5              ;383
00005c  fb055000          MLA      r0,r5,r0,r5           ;383
000060  6d61              LDR      r1,[r4,#0x54]         ;383
000062  4408              ADD      r0,r0,r1              ;383
000064  6560              STR      r0,[r4,#0x54]         ;383
000066  2000              MOVS     r0,#0                 ;384
000068  6520              STR      r0,[r4,#0x50]         ;384
00006a  f247207e          MOV      r0,#0x727e            ;385
00006e  f8a80000          STRH     r0,[r8,#0]            ;385
000072  e7db              B        |L2.44|
                  |L2.116|
000074  6d60              LDR      r0,[r4,#0x54]         ;388
000076  4428              ADD      r0,r0,r5              ;388
000078  6560              STR      r0,[r4,#0x54]         ;388
                  |L2.122|
00007a  e000              B        |L2.126|
                  |L2.124|
00007c  462e              MOV      r6,r5                 ;392
                  |L2.126|
00007e  2000              MOVS     r0,#0                 ;395
000080  f8a80000          STRH     r0,[r8,#0]            ;395
000084  2001              MOVS     r0,#1                 ;397
000086  f8840036          STRB     r0,[r4,#0x36]         ;397
00008a  4805              LDR      r0,|L2.160|
00008c  6800              LDR      r0,[r0,#0]            ;398  ; OSTickCtr
00008e  1a38              SUBS     r0,r7,r0              ;398
000090  1982              ADDS     r2,r0,r6              ;398
000092  4621              MOV      r1,r4                 ;398
000094  4803              LDR      r0,|L2.164|
000096  f7fffffe          BL       OS_TickListInsert
00009a  bf00              NOP      
00009c  e7c6              B        |L2.44|
;;;400    
                          ENDP

00009e  0000              DCW      0x0000
                  |L2.160|
                          DCD      OSTickCtr
                  |L2.164|
                          DCD      OSTickListDly

                          AREA ||i.OS_TickListRemove||, CODE, READONLY, ALIGN=1

                  OS_TickListRemove PROC
;;;417    
;;;418    void  OS_TickListRemove (OS_TCB  *p_tcb)
000000  b530              PUSH     {r4,r5,lr}
;;;419    {
;;;420        OS_TICK_LIST  *p_list;
;;;421        OS_TCB        *p_tcb1;
;;;422        OS_TCB        *p_tcb2;
;;;423    
;;;424    
;;;425        p_list = p_tcb->TickListPtr;
000002  6a02              LDR      r2,[r0,#0x20]
;;;426        p_tcb1 = p_tcb->TickPrevPtr;
000004  69c3              LDR      r3,[r0,#0x1c]
;;;427        p_tcb2 = p_tcb->TickNextPtr;
000006  6981              LDR      r1,[r0,#0x18]
;;;428        if (p_tcb1 == DEF_NULL) {
000008  b9ab              CBNZ     r3,|L3.54|
;;;429            if (p_tcb2 == DEF_NULL) {                               /* Remove ONLY entry in the list?                       */
00000a  b929              CBNZ     r1,|L3.24|
;;;430                p_list->TCB_Ptr    = DEF_NULL;
00000c  2400              MOVS     r4,#0
00000e  6014              STR      r4,[r2,#0]
;;;431    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;432                p_list->NbrEntries = 0u;
000010  8094              STRH     r4,[r2,#4]
;;;433    #endif
;;;434                p_tcb->TickRemain   = 0u;
000012  6504              STR      r4,[r0,#0x50]
;;;435                p_tcb->TickListPtr  = DEF_NULL;
000014  6204              STR      r4,[r0,#0x20]
000016  e01e              B        |L3.86|
                  |L3.24|
;;;436            } else {
;;;437                p_tcb2->TickPrevPtr = DEF_NULL;
000018  2400              MOVS     r4,#0
00001a  61cc              STR      r4,[r1,#0x1c]
;;;438                p_tcb2->TickRemain += p_tcb->TickRemain;            /* Add back the ticks to the delta                      */
00001c  6d0c              LDR      r4,[r1,#0x50]
00001e  6d05              LDR      r5,[r0,#0x50]
000020  442c              ADD      r4,r4,r5
000022  650c              STR      r4,[r1,#0x50]
;;;439                p_list->TCB_Ptr    = p_tcb2;
000024  6011              STR      r1,[r2,#0]
;;;440    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;441                p_list->NbrEntries--;
000026  8894              LDRH     r4,[r2,#4]
000028  1e64              SUBS     r4,r4,#1
00002a  8094              STRH     r4,[r2,#4]
;;;442    #endif
;;;443                p_tcb->TickNextPtr  = DEF_NULL;
00002c  2400              MOVS     r4,#0
00002e  6184              STR      r4,[r0,#0x18]
;;;444                p_tcb->TickRemain   = 0u;
000030  6504              STR      r4,[r0,#0x50]
;;;445                p_tcb->TickListPtr  = DEF_NULL;
000032  6204              STR      r4,[r0,#0x20]
000034  e00f              B        |L3.86|
                  |L3.54|
;;;446            }
;;;447        } else {
;;;448            p_tcb1->TickNextPtr = p_tcb2;    
000036  6199              STR      r1,[r3,#0x18]
;;;449            if (p_tcb2 != DEF_NULL) {
000038  b121              CBZ      r1,|L3.68|
;;;450                p_tcb2->TickPrevPtr = p_tcb1;
00003a  61cb              STR      r3,[r1,#0x1c]
;;;451                p_tcb2->TickRemain += p_tcb->TickRemain;            /* Add back the ticks to the delta list                 */
00003c  6d0c              LDR      r4,[r1,#0x50]
00003e  6d05              LDR      r5,[r0,#0x50]
000040  442c              ADD      r4,r4,r5
000042  650c              STR      r4,[r1,#0x50]
                  |L3.68|
;;;452            }
;;;453            p_tcb->TickPrevPtr  = DEF_NULL;
000044  2400              MOVS     r4,#0
000046  61c4              STR      r4,[r0,#0x1c]
;;;454    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;455            p_list->NbrEntries--;
000048  8894              LDRH     r4,[r2,#4]
00004a  1e64              SUBS     r4,r4,#1
00004c  8094              STRH     r4,[r2,#4]
;;;456    #endif
;;;457            p_tcb->TickNextPtr  = DEF_NULL;
00004e  2400              MOVS     r4,#0
000050  6184              STR      r4,[r0,#0x18]
;;;458            p_tcb->TickRemain   = 0u;
000052  6504              STR      r4,[r0,#0x50]
;;;459            p_tcb->TickListPtr  = DEF_NULL;
000054  6204              STR      r4,[r0,#0x20]
                  |L3.86|
;;;460        }
;;;461    }
000056  bd30              POP      {r4,r5,pc}
;;;462    
                          ENDP


                          AREA ||i.OS_TickListUpdateDly||, CODE, READONLY, ALIGN=2

                  OS_TickListUpdateDly PROC
;;;476    
;;;477    static  CPU_TS  OS_TickListUpdateDly (OS_TICK ticks)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;478    {
000004  4605              MOV      r5,r0
;;;479        OS_TCB       *p_tcb;
;;;480        OS_TICK_LIST *p_list;
;;;481    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;482        CPU_TS        ts_start;
;;;483        CPU_TS        ts_delta_dly;
;;;484    #endif
;;;485    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;486        OS_OBJ_QTY    nbr_updated;
;;;487    #endif
;;;488                                                                            
;;;489                                                                    /*  ========= UPDATE TASKS WAITING FOR DELAY =========  */
;;;490    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;491        ts_start    = OS_TS_GET();
000006  f7fffffe          BL       CPU_TS_TmrRd
00000a  4681              MOV      r9,r0
;;;492    #endif
;;;493    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;494        nbr_updated = (OS_OBJ_QTY)0u;
00000c  f04f0800          MOV      r8,#0
;;;495    #endif
;;;496        p_list      = &OSTickListDly;
000010  4e24              LDR      r6,|L4.164|
;;;497        p_tcb       = p_list->TCB_Ptr;                                      
000012  6834              LDR      r4,[r6,#0]
;;;498        if (p_tcb != DEF_NULL) {
000014  2c00              CMP      r4,#0
000016  d03c              BEQ      |L4.146|
;;;499            if (p_tcb->TickRemain <= ticks) {
000018  6d20              LDR      r0,[r4,#0x50]
00001a  42a8              CMP      r0,r5
00001c  d804              BHI      |L4.40|
;;;500                ticks = ticks - p_tcb->TickRemain;
00001e  6d20              LDR      r0,[r4,#0x50]
000020  1a2d              SUBS     r5,r5,r0
;;;501                p_tcb->TickRemain = 0u;
000022  2000              MOVS     r0,#0
000024  6520              STR      r0,[r4,#0x50]
000026  e002              B        |L4.46|
                  |L4.40|
;;;502            } else {
;;;503                p_tcb->TickRemain -= ticks;
000028  6d20              LDR      r0,[r4,#0x50]
00002a  1b40              SUBS     r0,r0,r5
00002c  6520              STR      r0,[r4,#0x50]
                  |L4.46|
;;;504            }
;;;505    
;;;506            while (p_tcb->TickRemain == 0u) {
00002e  e02c              B        |L4.138|
                  |L4.48|
;;;507    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;508                nbr_updated++;                                      /* Keep track of the number of TCBs updated             */
000030  f1080001          ADD      r0,r8,#1
000034  fa1ff880          UXTH     r8,r0
;;;509    #endif
;;;510                if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
000038  f8940036          LDRB     r0,[r4,#0x36]
00003c  2801              CMP      r0,#1
00003e  d106              BNE      |L4.78|
;;;511                    p_tcb->TaskState = OS_TASK_STATE_RDY;
000040  2000              MOVS     r0,#0
000042  f8840036          STRB     r0,[r4,#0x36]
;;;512                    OS_RdyListInsert(p_tcb);                        /* Insert the task in the ready list                    */
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       OS_RdyListInsert
00004c  e006              B        |L4.92|
                  |L4.78|
;;;513                } else if (p_tcb->TaskState == OS_TASK_STATE_DLY_SUSPENDED) {
00004e  f8940036          LDRB     r0,[r4,#0x36]
000052  2805              CMP      r0,#5
000054  d102              BNE      |L4.92|
;;;514                    p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
000056  2004              MOVS     r0,#4
000058  f8840036          STRB     r0,[r4,#0x36]
                  |L4.92|
;;;515                }
;;;516    
;;;517                p_list->TCB_Ptr = p_tcb->TickNextPtr;
00005c  69a0              LDR      r0,[r4,#0x18]
00005e  6030              STR      r0,[r6,#0]
;;;518                p_tcb           = p_list->TCB_Ptr;                  /* Get 'p_tcb' again for loop                           */
000060  6834              LDR      r4,[r6,#0]
;;;519                if (p_tcb == DEF_NULL) {
000062  b914              CBNZ     r4,|L4.106|
;;;520    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;521                    p_list->NbrEntries = 0u;
000064  2000              MOVS     r0,#0
000066  80b0              STRH     r0,[r6,#4]
;;;522    #endif
;;;523                    break;
000068  e012              B        |L4.144|
                  |L4.106|
;;;524                } else {
;;;525    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;526                    p_list->NbrEntries--;
00006a  88b0              LDRH     r0,[r6,#4]
00006c  1e40              SUBS     r0,r0,#1
00006e  80b0              STRH     r0,[r6,#4]
;;;527    #endif
;;;528                    p_tcb->TickPrevPtr = DEF_NULL;
000070  2000              MOVS     r0,#0
000072  61e0              STR      r0,[r4,#0x1c]
;;;529                }
;;;530    
;;;531                if (p_tcb->TickRemain <= ticks) {
000074  6d20              LDR      r0,[r4,#0x50]
000076  42a8              CMP      r0,r5
000078  d804              BHI      |L4.132|
;;;532                    ticks = ticks - p_tcb->TickRemain;
00007a  6d20              LDR      r0,[r4,#0x50]
00007c  1a2d              SUBS     r5,r5,r0
;;;533                    p_tcb->TickRemain = 0u;
00007e  2000              MOVS     r0,#0
000080  6520              STR      r0,[r4,#0x50]
000082  e002              B        |L4.138|
                  |L4.132|
;;;534                } else {
;;;535                    p_tcb->TickRemain -= ticks;
000084  6d20              LDR      r0,[r4,#0x50]
000086  1b40              SUBS     r0,r0,r5
000088  6520              STR      r0,[r4,#0x50]
                  |L4.138|
00008a  6d20              LDR      r0,[r4,#0x50]         ;506
00008c  2800              CMP      r0,#0                 ;506
00008e  d0cf              BEQ      |L4.48|
                  |L4.144|
000090  bf00              NOP                            ;523
                  |L4.146|
;;;536                }
;;;537            }
;;;538        }
;;;539    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;540        p_list->NbrUpdated = nbr_updated;
000092  f8a68006          STRH     r8,[r6,#6]
;;;541    #endif
;;;542    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;543        ts_delta_dly       = OS_TS_GET() - ts_start;                /* Measure execution time of the update                 */
000096  f7fffffe          BL       CPU_TS_TmrRd
00009a  eba00709          SUB      r7,r0,r9
;;;544    #endif
;;;545    
;;;546    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;547        return (ts_delta_dly);
00009e  4638              MOV      r0,r7
;;;548    #else
;;;549        return (0u);
;;;550    #endif
;;;551    }
0000a0  e8bd87f0          POP      {r4-r10,pc}
;;;552    
                          ENDP

                  |L4.164|
                          DCD      OSTickListDly

                          AREA ||i.OS_TickListUpdateTimeout||, CODE, READONLY, ALIGN=2

                  OS_TickListUpdateTimeout PROC
;;;567    
;;;568    static  CPU_TS  OS_TickListUpdateTimeout (OS_TICK ticks)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;569    {
000004  4606              MOV      r6,r0
;;;570        OS_TCB       *p_tcb;
;;;571        OS_TICK_LIST *p_list;
;;;572    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;573        CPU_TS        ts_start;
;;;574        CPU_TS        ts_delta_timeout;
;;;575    #endif
;;;576    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;577        OS_OBJ_QTY    nbr_updated;
;;;578    #endif
;;;579    #if (OS_CFG_MUTEX_EN == DEF_ENABLED)
;;;580        OS_TCB       *p_tcb_owner;
;;;581        OS_PRIO       prio_new;
;;;582    #endif
;;;583    
;;;584                                                                    /*  ======= UPDATE TASKS WAITING WITH TIMEOUT ========  */
;;;585    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;586        ts_start    = OS_TS_GET();
000006  f7fffffe          BL       CPU_TS_TmrRd
00000a  4683              MOV      r11,r0
;;;587    #endif
;;;588    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;589        nbr_updated = 0u;
00000c  f04f0a00          MOV      r10,#0
;;;590    #endif
;;;591        p_list      = &OSTickListTimeout;
000010  4f42              LDR      r7,|L5.284|
;;;592        p_tcb       = p_list->TCB_Ptr;                                  
000012  683c              LDR      r4,[r7,#0]
;;;593        if (p_tcb != DEF_NULL) {
000014  2c00              CMP      r4,#0
000016  d077              BEQ      |L5.264|
;;;594    #if 0
;;;595            p_tcb->TickRemain--;
;;;596    #else
;;;597            if (p_tcb->TickRemain <= ticks) {
000018  6d20              LDR      r0,[r4,#0x50]
00001a  42b0              CMP      r0,r6
00001c  d804              BHI      |L5.40|
;;;598                ticks = ticks - p_tcb->TickRemain;
00001e  6d20              LDR      r0,[r4,#0x50]
000020  1a36              SUBS     r6,r6,r0
;;;599                p_tcb->TickRemain = 0u;
000022  2000              MOVS     r0,#0
000024  6520              STR      r0,[r4,#0x50]
000026  e002              B        |L5.46|
                  |L5.40|
;;;600            } else {
;;;601                p_tcb->TickRemain -= ticks;
000028  6d20              LDR      r0,[r4,#0x50]
00002a  1b80              SUBS     r0,r0,r6
00002c  6520              STR      r0,[r4,#0x50]
                  |L5.46|
;;;602            }
;;;603    #endif
;;;604            while (p_tcb->TickRemain == 0u) {
00002e  e067              B        |L5.256|
                  |L5.48|
;;;605    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;606                nbr_updated++;
000030  f10a0001          ADD      r0,r10,#1
000034  fa1ffa80          UXTH     r10,r0
;;;607    #endif
;;;608    
;;;609    #if (OS_CFG_MUTEX_EN == DEF_ENABLED)
;;;610                p_tcb_owner = DEF_NULL;
000038  2500              MOVS     r5,#0
;;;611                if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
00003a  f8940034          LDRB     r0,[r4,#0x34]
00003e  2804              CMP      r0,#4
000040  d102              BNE      |L5.72|
;;;612                    p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
000042  6b20              LDR      r0,[r4,#0x30]
000044  68c0              LDR      r0,[r0,#0xc]
000046  6a45              LDR      r5,[r0,#0x24]
                  |L5.72|
;;;613                }
;;;614    #endif
;;;615    
;;;616    #if (OS_MSG_EN == DEF_ENABLED)
;;;617                p_tcb->MsgPtr  = DEF_NULL;
000048  2000              MOVS     r0,#0
00004a  65a0              STR      r0,[r4,#0x58]
;;;618                p_tcb->MsgSize = 0u;
00004c  f8a4005c          STRH     r0,[r4,#0x5c]
;;;619    #endif
;;;620    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;621                p_tcb->TS      = OS_TS_GET();
000050  f7fffffe          BL       CPU_TS_TmrRd
000054  64a0              STR      r0,[r4,#0x48]
;;;622    #endif
;;;623                OS_PendListRemove(p_tcb);                           /* Remove from wait list                                */
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       OS_PendListRemove
;;;624                if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
00005c  f8940036          LDRB     r0,[r4,#0x36]
000060  2803              CMP      r0,#3
000062  d106              BNE      |L5.114|
;;;625                    OS_RdyListInsert(p_tcb);                        /* Insert the task in the ready list                    */
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       OS_RdyListInsert
;;;626                    p_tcb->TaskState  = OS_TASK_STATE_RDY;
00006a  2000              MOVS     r0,#0
00006c  f8840036          STRB     r0,[r4,#0x36]
000070  e006              B        |L5.128|
                  |L5.114|
;;;627                } else if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
000072  f8940036          LDRB     r0,[r4,#0x36]
000076  2807              CMP      r0,#7
000078  d102              BNE      |L5.128|
;;;628    
;;;629                    p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
00007a  2004              MOVS     r0,#4
00007c  f8840036          STRB     r0,[r4,#0x36]
                  |L5.128|
;;;630                }
;;;631                p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;         /* Indicate pend timed out                              */
000080  2003              MOVS     r0,#3
000082  f8840035          STRB     r0,[r4,#0x35]
;;;632                p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                           */
000086  2000              MOVS     r0,#0
000088  f8840034          STRB     r0,[r4,#0x34]
;;;633    
;;;634    #if (OS_CFG_MUTEX_EN == DEF_ENABLED)
;;;635                if(p_tcb_owner != DEF_NULL) {
00008c  b305              CBZ      r5,|L5.208|
;;;636                    if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
00008e  f8950037          LDRB     r0,[r5,#0x37]
000092  f8951038          LDRB     r1,[r5,#0x38]
000096  4288              CMP      r0,r1
000098  d01a              BEQ      |L5.208|
;;;637                        (p_tcb_owner->Prio == p_tcb->Prio)) {       /* Has the owner inherited a priority?                  */
00009a  f8950037          LDRB     r0,[r5,#0x37]
00009e  f8941037          LDRB     r1,[r4,#0x37]
0000a2  4288              CMP      r0,r1
0000a4  d114              BNE      |L5.208|
;;;638                        prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
0000a6  4628              MOV      r0,r5
0000a8  f7fffffe          BL       OS_MutexGrpPrioFindHighest
0000ac  4680              MOV      r8,r0
;;;639                        prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
0000ae  f8950038          LDRB     r0,[r5,#0x38]
0000b2  4540              CMP      r0,r8
0000b4  da02              BGE      |L5.188|
0000b6  f8950038          LDRB     r0,[r5,#0x38]
0000ba  e000              B        |L5.190|
                  |L5.188|
0000bc  4640              MOV      r0,r8
                  |L5.190|
0000be  4680              MOV      r8,r0
;;;640                        if(prio_new != p_tcb_owner->Prio) {
0000c0  f8950037          LDRB     r0,[r5,#0x37]
0000c4  4540              CMP      r0,r8
0000c6  d003              BEQ      |L5.208|
;;;641                            OS_TaskChangePrio(p_tcb_owner, prio_new);
0000c8  4641              MOV      r1,r8
0000ca  4628              MOV      r0,r5
0000cc  f7fffffe          BL       OS_TaskChangePrio
                  |L5.208|
;;;642                #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;643                                          TRACE_OS_MUTEX_TASK_PRIO_DISINHERIT(p_tcb_owner, p_tcb_owner->Prio)
;;;644                #endif
;;;645                        }
;;;646                    }
;;;647                }
;;;648    #endif
;;;649    
;;;650                p_list->TCB_Ptr = p_tcb->TickNextPtr;
0000d0  69a0              LDR      r0,[r4,#0x18]
0000d2  6038              STR      r0,[r7,#0]
;;;651                p_tcb           = p_list->TCB_Ptr;                  /* Get 'p_tcb' again for loop                           */
0000d4  683c              LDR      r4,[r7,#0]
;;;652                if (p_tcb == DEF_NULL) {
0000d6  b914              CBNZ     r4,|L5.222|
;;;653    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;654                    p_list->NbrEntries = 0u;
0000d8  2000              MOVS     r0,#0
0000da  80b8              STRH     r0,[r7,#4]
;;;655    #endif
;;;656                    break;
0000dc  e013              B        |L5.262|
                  |L5.222|
;;;657                } else {
;;;658    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;659                    p_list->NbrEntries--;
0000de  88b8              LDRH     r0,[r7,#4]
0000e0  1e40              SUBS     r0,r0,#1
0000e2  80b8              STRH     r0,[r7,#4]
;;;660    #endif
;;;661                    p_tcb->TickPrevPtr = DEF_NULL;
0000e4  2000              MOVS     r0,#0
0000e6  61e0              STR      r0,[r4,#0x1c]
;;;662                }
;;;663                if (p_tcb->TickRemain <= ticks) {
0000e8  6d20              LDR      r0,[r4,#0x50]
0000ea  42b0              CMP      r0,r6
0000ec  d805              BHI      |L5.250|
;;;664                    ticks = ticks - p_tcb->TickRemain;
0000ee  6d20              LDR      r0,[r4,#0x50]
0000f0  1a36              SUBS     r6,r6,r0
;;;665                    p_tcb->TickRemain = 0u;
0000f2  2000              MOVS     r0,#0
0000f4  6520              STR      r0,[r4,#0x50]
0000f6  e003              B        |L5.256|
0000f8  e006              B        |L5.264|
                  |L5.250|
;;;666                } else {
;;;667                    p_tcb->TickRemain -= ticks;
0000fa  6d20              LDR      r0,[r4,#0x50]
0000fc  1b80              SUBS     r0,r0,r6
0000fe  6520              STR      r0,[r4,#0x50]
                  |L5.256|
000100  6d20              LDR      r0,[r4,#0x50]         ;604
000102  2800              CMP      r0,#0                 ;604
000104  d094              BEQ      |L5.48|
                  |L5.262|
000106  bf00              NOP                            ;656
                  |L5.264|
;;;668                }
;;;669            }
;;;670        }
;;;671    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;672        p_list->NbrUpdated = nbr_updated;
000108  f8a7a006          STRH     r10,[r7,#6]
;;;673    #endif
;;;674    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;675        ts_delta_timeout   = OS_TS_GET() - ts_start;                /* Measure execution time of the update                 */
00010c  f7fffffe          BL       CPU_TS_TmrRd
000110  eba0090b          SUB      r9,r0,r11
;;;676    #endif
;;;677    
;;;678    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;679        return (ts_delta_timeout);
000114  4648              MOV      r0,r9
;;;680    #else
;;;681        return (0u);
;;;682    #endif
;;;683    }
000116  e8bd9ff0          POP      {r4-r12,pc}
;;;684    #endif
                          ENDP

00011a  0000              DCW      0x0000
                  |L5.284|
                          DCD      OSTickListTimeout

                          AREA ||i.OS_TickTask||, CODE, READONLY, ALIGN=2

                  OS_TickTask PROC
;;;65     
;;;66     void  OS_TickTask (void  *p_arg)
000000  b508              PUSH     {r3,lr}
;;;67     {
;;;68         OS_ERR   err;
;;;69     #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;70         CPU_TS   ts_delta;
;;;71         CPU_TS   ts_delta_dly;
;;;72         CPU_TS   ts_delta_timeout;
;;;73     #endif
;;;74     #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
;;;75         OS_TICK  tick_step_dly;
;;;76         OS_TICK  tick_step_timeout;
;;;77     #endif
;;;78         OS_TICK  tick_step;
;;;79         CPU_SR_ALLOC();
000002  f04f0800          MOV      r8,#0
;;;80     
;;;81     
;;;82         (void)&p_arg;                                               /* Prevent compiler warning                             */
;;;83     
;;;84         while (DEF_ON) {
000006  e02f              B        |L6.104|
                  |L6.8|
;;;85             (void)OSTaskSemPend(0u,
000008  466b              MOV      r3,sp
00000a  2200              MOVS     r2,#0
00000c  4611              MOV      r1,r2
00000e  4610              MOV      r0,r2
000010  f7fffffe          BL       OSTaskSemPend
;;;86                                 OS_OPT_PEND_BLOCKING,
;;;87                                 DEF_NULL,
;;;88                                 &err);                              /* Wait for signal from tick interrupt                  */
;;;89             if (err == OS_ERR_NONE) {
000014  f8bd0000          LDRH     r0,[sp,#0]
000018  bb30              CBNZ     r0,|L6.104|
;;;90                 OS_CRITICAL_ENTER();
00001a  bf00              NOP      
00001c  bf00              NOP      
00001e  f7fffffe          BL       CPU_SR_Save
000022  4680              MOV      r8,r0
000024  bf00              NOP      
000026  f7fffffe          BL       CPU_IntDisMeasStart
00002a  bf00              NOP      
;;;91     
;;;92     #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
;;;93                 tick_step = OSTickCtrPend;
;;;94                 OSTickCtr += tick_step;
;;;95                 OSTickCtrPend = 0;
;;;96     #else
;;;97                 tick_step = 1u;                                     /* Always tick once when dynamic tick is disabled       */
00002c  2701              MOVS     r7,#1
;;;98                 OSTickCtr++;                                        /* Keep track of the number of ticks                    */
00002e  480f              LDR      r0,|L6.108|
000030  6800              LDR      r0,[r0,#0]  ; OSTickCtr
000032  1c40              ADDS     r0,r0,#1
000034  490d              LDR      r1,|L6.108|
000036  6008              STR      r0,[r1,#0]  ; OSTickCtr
;;;99     #endif
;;;100    
;;;101    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;102                TRACE_OS_TICK_INCREMENT(OSTickCtr);                 /* Record the event.                                    */
;;;103    #endif
;;;104    
;;;105    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;106                ts_delta_dly     = OS_TickListUpdateDly(tick_step);
000038  4638              MOV      r0,r7
00003a  f7fffffe          BL       OS_TickListUpdateDly
00003e  4606              MOV      r6,r0
;;;107                ts_delta_timeout = OS_TickListUpdateTimeout(tick_step);
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       OS_TickListUpdateTimeout
000046  4605              MOV      r5,r0
;;;108                ts_delta         = ts_delta_dly + ts_delta_timeout; /* Compute total execution time of list updates         */
000048  1974              ADDS     r4,r6,r5
;;;109                if (OSTickTaskTimeMax < ts_delta) {
00004a  4809              LDR      r0,|L6.112|
00004c  6800              LDR      r0,[r0,#0]  ; OSTickTaskTimeMax
00004e  42a0              CMP      r0,r4
000050  d201              BCS      |L6.86|
;;;110                    OSTickTaskTimeMax = ts_delta;
000052  4807              LDR      r0,|L6.112|
000054  6004              STR      r4,[r0,#0]  ; OSTickTaskTimeMax
                  |L6.86|
;;;111                }
;;;112    #else
;;;113                (void)OS_TickListUpdateDly(tick_step);
;;;114                (void)OS_TickListUpdateTimeout(tick_step);
;;;115    #endif
;;;116    
;;;117    #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
;;;118                tick_step_dly = (OS_TICK)-1;
;;;119                tick_step_timeout = (OS_TICK)-1;
;;;120                if(OSTickListDly.TCB_Ptr != DEF_NULL) {
;;;121                    tick_step_dly = OSTickListDly.TCB_Ptr->TickRemain;
;;;122                }
;;;123                if(OSTickListTimeout.TCB_Ptr != DEF_NULL) {
;;;124                    tick_step_timeout = OSTickListTimeout.TCB_Ptr->TickRemain;
;;;125                }
;;;126                OSTickCtrStep = (tick_step_dly < tick_step_timeout) ? tick_step_dly : tick_step_timeout;
;;;127                BSP_OS_TickNextSet(OSTickCtrStep);
;;;128    #endif
;;;129                OS_CRITICAL_EXIT();
000056  bf00              NOP      
000058  f7fffffe          BL       CPU_IntDisMeasStop
00005c  bf00              NOP      
00005e  4640              MOV      r0,r8
000060  f7fffffe          BL       CPU_SR_Restore
000064  bf00              NOP      
000066  bf00              NOP      
                  |L6.104|
000068  e7ce              B        |L6.8|
;;;130            }
;;;131        }
;;;132    }
;;;133    
                          ENDP

00006a  0000              DCW      0x0000
                  |L6.108|
                          DCD      OSTickCtr
                  |L6.112|
                          DCD      OSTickTaskTimeMax

                          AREA ||i.OS_TickTaskInit||, CODE, READONLY, ALIGN=2

                  OS_TickTaskInit PROC
;;;154    
;;;155    void  OS_TickTaskInit (OS_ERR  *p_err)
000000  b510              PUSH     {r4,lr}
;;;156    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
;;;157        OSTickCtr                    = 0u;                          /* Clear the tick counter                               */
000006  2000              MOVS     r0,#0
000008  4920              LDR      r1,|L7.140|
00000a  6008              STR      r0,[r1,#0]  ; OSTickCtr
;;;158    
;;;159    #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
;;;160        OSTickCtrStep                = (OS_TICK)-1;
;;;161        OSTickCtrPend                = 0u;
;;;162    #endif
;;;163    
;;;164        OSTickListDly.TCB_Ptr        = DEF_NULL;
00000c  4920              LDR      r1,|L7.144|
00000e  6008              STR      r0,[r1,#0]  ; OSTickListDly
;;;165        OSTickListTimeout.TCB_Ptr    = DEF_NULL;
000010  4920              LDR      r1,|L7.148|
000012  6008              STR      r0,[r1,#0]  ; OSTickListTimeout
;;;166    
;;;167    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;168        OSTickListDly.NbrEntries     = 0u;
000014  491e              LDR      r1,|L7.144|
000016  8088              STRH     r0,[r1,#4]
;;;169        OSTickListDly.NbrUpdated     = 0u;
000018  80c8              STRH     r0,[r1,#6]
;;;170    
;;;171        OSTickListTimeout.NbrEntries = 0u;
00001a  491e              LDR      r1,|L7.148|
00001c  8088              STRH     r0,[r1,#4]
;;;172        OSTickListTimeout.NbrUpdated = 0u;
00001e  80c8              STRH     r0,[r1,#6]
;;;173    #endif
;;;174    
;;;175                                                                    /* --------------- CREATE THE TICK TASK --------------- */
;;;176        if (OSCfg_TickTaskStkBasePtr == DEF_NULL) {
000020  481d              LDR      r0,|L7.152|
000022  6800              LDR      r0,[r0,#0]  ; OSCfg_TickTaskStkBasePtr
000024  b920              CBNZ     r0,|L7.48|
;;;177           *p_err = OS_ERR_TICK_STK_INVALID;
000026  f2472012          MOV      r0,#0x7212
00002a  8020              STRH     r0,[r4,#0]
                  |L7.44|
;;;178            return;
;;;179        }
;;;180    
;;;181        if (OSCfg_TickTaskStkSize < OSCfg_StkSizeMin) {
;;;182           *p_err = OS_ERR_TICK_STK_SIZE_INVALID;
;;;183            return;
;;;184        }
;;;185    
;;;186        if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {         /* Only one task at the 'Idle Task' priority            */
;;;187           *p_err = OS_ERR_TICK_PRIO_INVALID;
;;;188            return;
;;;189        }
;;;190    
;;;191        OSTaskCreate(&OSTickTaskTCB,
;;;192                     (CPU_CHAR   *)((void *)"uC/OS-III Tick Task"),
;;;193                     OS_TickTask,
;;;194                     DEF_NULL,
;;;195                     OSCfg_TickTaskPrio,
;;;196                     OSCfg_TickTaskStkBasePtr,
;;;197                     OSCfg_TickTaskStkLimit,
;;;198                     OSCfg_TickTaskStkSize,
;;;199                     0u,
;;;200                     0u,
;;;201                     DEF_NULL,
;;;202                     (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
;;;203                     p_err);
;;;204    }
00002c  b00a              ADD      sp,sp,#0x28
00002e  bd10              POP      {r4,pc}
                  |L7.48|
000030  481a              LDR      r0,|L7.156|
000032  6800              LDR      r0,[r0,#0]            ;181  ; OSCfg_TickTaskStkSize
000034  491a              LDR      r1,|L7.160|
000036  6809              LDR      r1,[r1,#0]            ;181  ; OSCfg_StkSizeMin
000038  4288              CMP      r0,r1                 ;181
00003a  d203              BCS      |L7.68|
00003c  f2472013          MOV      r0,#0x7213            ;182
000040  8020              STRH     r0,[r4,#0]            ;182
000042  e7f3              B        |L7.44|
                  |L7.68|
000044  4817              LDR      r0,|L7.164|
000046  7800              LDRB     r0,[r0,#0]            ;186  ; OSCfg_TickTaskPrio
000048  281f              CMP      r0,#0x1f              ;186
00004a  d303              BCC      |L7.84|
00004c  f2472011          MOV      r0,#0x7211            ;187
000050  8020              STRH     r0,[r4,#0]            ;187
000052  e7eb              B        |L7.44|
                  |L7.84|
000054  200b              MOVS     r0,#0xb               ;191
000056  2100              MOVS     r1,#0                 ;191
000058  9105              STR      r1,[sp,#0x14]         ;191
00005a  e9cd0407          STRD     r0,r4,[sp,#0x1c]      ;191
00005e  9106              STR      r1,[sp,#0x18]         ;191
000060  4608              MOV      r0,r1                 ;191
000062  490e              LDR      r1,|L7.156|
000064  680a              LDR      r2,[r1,#0]            ;191  ; OSCfg_TickTaskStkSize
000066  4910              LDR      r1,|L7.168|
000068  6809              LDR      r1,[r1,#0]            ;191  ; OSCfg_TickTaskStkLimit
00006a  4b0b              LDR      r3,|L7.152|
00006c  681b              LDR      r3,[r3,#0]            ;191  ; OSCfg_TickTaskStkBasePtr
00006e  e9cd3101          STRD     r3,r1,[sp,#4]         ;191
000072  e9cd2003          STRD     r2,r0,[sp,#0xc]       ;191
000076  480b              LDR      r0,|L7.164|
000078  7800              LDRB     r0,[r0,#0]            ;191  ; OSCfg_TickTaskPrio
00007a  2300              MOVS     r3,#0                 ;191
00007c  4a0b              LDR      r2,|L7.172|
00007e  a10c              ADR      r1,|L7.176|
000080  9000              STR      r0,[sp,#0]            ;191
000082  4810              LDR      r0,|L7.196|
000084  f7fffffe          BL       OSTaskCreate
000088  bf00              NOP      
00008a  e7cf              B        |L7.44|
;;;205    
                          ENDP

                  |L7.140|
                          DCD      OSTickCtr
                  |L7.144|
                          DCD      OSTickListDly
                  |L7.148|
                          DCD      OSTickListTimeout
                  |L7.152|
                          DCD      OSCfg_TickTaskStkBasePtr
                  |L7.156|
                          DCD      OSCfg_TickTaskStkSize
                  |L7.160|
                          DCD      OSCfg_StkSizeMin
                  |L7.164|
                          DCD      OSCfg_TickTaskPrio
                  |L7.168|
                          DCD      OSCfg_TickTaskStkLimit
                  |L7.172|
                          DCD      OS_TickTask
                  |L7.176|
0000b0  75432f4f          DCB      "uC/OS-III Tick Task",0
0000b4  532d4949
0000b8  49205469
0000bc  636b2054
0000c0  61736b00
                  |L7.196|
                          DCD      OSTickTaskTCB
