; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\filter.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\filter.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -I..\..\Malloc -I..\..\User\Modbus -Id:\Keil_v4\ARM\RV31\INC -Id:\Keil_v4\ARM\CMSIS\Include -Id:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Flash\Obj\filter.crf ..\..\User\filter.c]
                          THUMB

                          AREA ||i.GetMedianNum||, CODE, READONLY, ALIGN=1

                  GetMedianNum PROC
;;;2      
;;;3      short  GetMedianNum(short * bArray, int iFilterLen)  
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4      {  
000004  4602              MOV      r2,r0
;;;5          int   i,j;
;;;6          short bTemp;  
;;;7            
;;;8          //冒泡法排序
;;;9          for (j = 0; j < iFilterLen - 1; j ++)  
000006  2400              MOVS     r4,#0
000008  e018              B        |L1.60|
                  |L1.10|
;;;10         {  
;;;11             for (i = 0; i < iFilterLen - j - 1; i ++)  
00000a  2300              MOVS     r3,#0
00000c  e011              B        |L1.50|
                  |L1.14|
;;;12             {  
;;;13                 if (bArray[i] > bArray[i + 1])  
00000e  f9326013          LDRSH    r6,[r2,r3,LSL #1]
000012  1c5d              ADDS     r5,r3,#1
000014  f9325015          LDRSH    r5,[r2,r5,LSL #1]
000018  42ae              CMP      r6,r5
00001a  dd09              BLE      |L1.48|
;;;14                 {   
;;;15                     bTemp = bArray[i];  
00001c  f9320013          LDRSH    r0,[r2,r3,LSL #1]
;;;16                     bArray[i] = bArray[i + 1];  
000020  1c5d              ADDS     r5,r3,#1
000022  f8325015          LDRH     r5,[r2,r5,LSL #1]
000026  f8225013          STRH     r5,[r2,r3,LSL #1]
;;;17                     bArray[i + 1] = bTemp;  
00002a  1c5d              ADDS     r5,r3,#1
00002c  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.48|
000030  1c5b              ADDS     r3,r3,#1              ;11
                  |L1.50|
000032  1b0d              SUBS     r5,r1,r4              ;11
000034  1e6d              SUBS     r5,r5,#1              ;11
000036  429d              CMP      r5,r3                 ;11
000038  dce9              BGT      |L1.14|
00003a  1c64              ADDS     r4,r4,#1              ;9
                  |L1.60|
00003c  1e4d              SUBS     r5,r1,#1              ;9
00003e  42a5              CMP      r5,r4                 ;9
000040  dce3              BGT      |L1.10|
;;;18                 }  
;;;19             }  
;;;20         }  
;;;21         
;;;22     		//判断是奇数还是偶数
;;;23         if ((iFilterLen & 1) > 0)  
000042  f0010501          AND      r5,r1,#1
000046  2d00              CMP      r5,#0
000048  dd06              BLE      |L1.88|
;;;24         {  
;;;25             
;;;26             bTemp = bArray[(iFilterLen + 1) / 2];  
00004a  1c4d              ADDS     r5,r1,#1
00004c  eb0576d5          ADD      r6,r5,r5,LSR #31
000050  1076              ASRS     r6,r6,#1
000052  f9320016          LDRSH    r0,[r2,r6,LSL #1]
000056  e017              B        |L1.136|
                  |L1.88|
;;;27         }  
;;;28         else  
;;;29         {  
;;;30             bTemp = (bArray[iFilterLen / 2] + bArray[iFilterLen / 2 + 1]) / 2;  
000058  460d              MOV      r5,r1
00005a  eb017cd5          ADD      r12,r1,r5,LSR #31
00005e  ea4f0c6c          ASR      r12,r12,#1
000062  f932801c          LDRSH    r8,[r2,r12,LSL #1]
000066  460f              MOV      r7,r1
000068  eb017cd7          ADD      r12,r1,r7,LSR #31
00006c  ea4f0c6c          ASR      r12,r12,#1
000070  f10c0c01          ADD      r12,r12,#1
000074  f932c01c          LDRSH    r12,[r2,r12,LSL #1]
000078  eb08060c          ADD      r6,r8,r12
00007c  eb067cd6          ADD      r12,r6,r6,LSR #31
000080  ea4f0c6c          ASR      r12,r12,#1
000084  fa0ff08c          SXTH     r0,r12
                  |L1.136|
;;;31         }  
;;;32       
;;;33         return bTemp;  
;;;34     }  
000088  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

