; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\cpu_core.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\cpu_core.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -I..\..\Malloc -I..\..\User\Modbus -Id:\Keil_v4\ARM\RV31\INC -Id:\Keil_v4\ARM\CMSIS\Include -Id:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Flash\Obj\cpu_core.crf ..\..\uCOS-III\uC-CPU\cpu_core.c]
                          THUMB

                          AREA ||i.CPU_CntLeadZeros08||, CODE, READONLY, ALIGN=1

                  CPU_CntLeadZeros08 PROC
;;;1205   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
;;;1206   CPU_DATA  CPU_CntLeadZeros08 (CPU_INT08U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1207   {
000002  4605              MOV      r5,r0
;;;1208   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1209           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
;;;1210       CPU_DATA  ix;
;;;1211   #endif
;;;1212       CPU_DATA  nbr_lead_zeros;
;;;1213   
;;;1214                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1215   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1216        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
;;;1217       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       CPU_CntLeadZeros
00000a  4604              MOV      r4,r0
;;;1218       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_08) * DEF_OCTET_NBR_BITS;
00000c  3c18              SUBS     r4,r4,#0x18
;;;1219   
;;;1220   
;;;1221   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1222                                                                                   /* Chk bits [07:00] :                   */
;;;1223                                                                                   /* .. Nbr lead zeros =               .. */
;;;1224       ix              = (CPU_DATA)(val);                                          /* .. lookup tbl ix  = 'val' >>  0 bits */
;;;1225       nbr_lead_zeros  = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);                      /* .. plus nbr msb lead zeros =  0 bits.*/
;;;1226   #endif
;;;1227   
;;;1228   
;;;1229       return (nbr_lead_zeros);
00000e  4620              MOV      r0,r4
;;;1230   }
000010  bd70              POP      {r4-r6,pc}
;;;1231   #endif
                          ENDP


                          AREA ||i.CPU_CntLeadZeros16||, CODE, READONLY, ALIGN=1

                  CPU_CntLeadZeros16 PROC
;;;1272   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
;;;1273   CPU_DATA  CPU_CntLeadZeros16 (CPU_INT16U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1274   {
000002  4605              MOV      r5,r0
;;;1275   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1276           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
;;;1277       CPU_DATA  ix;
;;;1278   #endif
;;;1279       CPU_DATA  nbr_lead_zeros;
;;;1280   
;;;1281                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1282   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1283        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
;;;1284       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       CPU_CntLeadZeros
00000a  4604              MOV      r4,r0
;;;1285       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_16) * DEF_OCTET_NBR_BITS;
00000c  3c10              SUBS     r4,r4,#0x10
;;;1286   
;;;1287   
;;;1288   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1289       if (val > 0x00FFu) {                                                        /* Chk bits [15:08] :                   */
;;;1290                                                                                   /* .. Nbr lead zeros =               .. */
;;;1291           ix             = (CPU_DATA)((CPU_DATA)val >> 8u);                       /* .. lookup tbl ix  = 'val' >>  8 bits */
;;;1292           nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);                   /* .. plus nbr msb lead zeros =  0 bits.*/
;;;1293   
;;;1294       } else {                                                                    /* Chk bits [07:00] :                   */
;;;1295                                                                                   /* .. Nbr lead zeros =               .. */
;;;1296           ix             = (CPU_DATA)(val);                                       /* .. lookup tbl ix  = 'val' >>  0 bits */
;;;1297           nbr_lead_zeros = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] +  8u);   /* .. plus nbr msb lead zeros =  8 bits.*/
;;;1298       }
;;;1299   #endif
;;;1300   
;;;1301   
;;;1302       return (nbr_lead_zeros);
00000e  4620              MOV      r0,r4
;;;1303   }
000010  bd70              POP      {r4-r6,pc}
;;;1304   #endif
                          ENDP


                          AREA ||i.CPU_CntLeadZeros32||, CODE, READONLY, ALIGN=1

                  CPU_CntLeadZeros32 PROC
;;;1345   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
;;;1346   CPU_DATA  CPU_CntLeadZeros32 (CPU_INT32U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1347   {
000002  4605              MOV      r5,r0
;;;1348   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1349           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
;;;1350       CPU_DATA  ix;
;;;1351   #endif
;;;1352       CPU_DATA  nbr_lead_zeros;
;;;1353   
;;;1354                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1355   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1356        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
;;;1357       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       CPU_CntLeadZeros
00000a  4604              MOV      r4,r0
;;;1358       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_32) * DEF_OCTET_NBR_BITS;
00000c  bf00              NOP      
;;;1359   
;;;1360   
;;;1361   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1362       if (val > 0x0000FFFFu) {
;;;1363           if (val > 0x00FFFFFFu) {                                                /* Chk bits [31:24] :                   */
;;;1364                                                                                   /* .. Nbr lead zeros =               .. */
;;;1365               ix             = (CPU_DATA)((CPU_DATA)(val >> 24u));                /* .. lookup tbl ix  = 'val' >> 24 bits */
;;;1366               nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);               /* .. plus nbr msb lead zeros =  0 bits.*/
;;;1367   
;;;1368           } else {                                                                /* Chk bits [23:16] :                   */
;;;1369                                                                                   /* .. Nbr lead zeros =               .. */
;;;1370               ix             = (CPU_DATA)((CPU_DATA)(val >> 16u));                /* .. lookup tbl ix  = 'val' >> 16 bits */
;;;1371               nbr_lead_zeros = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] +  8u);/* .. plus nbr msb lead zeros =  8 bits.*/
;;;1372           }
;;;1373   
;;;1374       } else {
;;;1375           if (val > 0x000000FFu) {                                                /* Chk bits [15:08] :                   */
;;;1376                                                                                   /* .. Nbr lead zeros =               .. */
;;;1377               ix             = (CPU_DATA)((CPU_DATA)(val >>  8u));                /* .. lookup tbl ix  = 'val' >>  8 bits */
;;;1378               nbr_lead_zeros = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] + 16u);/* .. plus nbr msb lead zeros = 16 bits.*/
;;;1379   
;;;1380           } else {                                                                /* Chk bits [07:00] :                   */
;;;1381                                                                                   /* .. Nbr lead zeros =               .. */
;;;1382               ix             = (CPU_DATA)((CPU_DATA)(val >>  0u));                /* .. lookup tbl ix  = 'val' >>  0 bits */
;;;1383               nbr_lead_zeros = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] + 24u);/* .. plus nbr msb lead zeros = 24 bits.*/
;;;1384           }
;;;1385       }
;;;1386   #endif
;;;1387   
;;;1388   
;;;1389       return (nbr_lead_zeros);
00000e  4620              MOV      r0,r4
;;;1390   }
000010  bd70              POP      {r4-r6,pc}
;;;1391   #endif
                          ENDP


                          AREA ||i.CPU_CntLeadZeros64||, CODE, READONLY, ALIGN=2

                  CPU_CntLeadZeros64 PROC
;;;1432   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
;;;1433   CPU_DATA  CPU_CntLeadZeros64 (CPU_INT64U  val)
000000  b530              PUSH     {r4,r5,lr}
;;;1434   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;1435   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1436           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
;;;1437       CPU_DATA  ix;
;;;1438   #endif
;;;1439       CPU_DATA  nbr_lead_zeros;
;;;1440   
;;;1441                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1442   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1443        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
;;;1444       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
;;;1445       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_64) * DEF_OCTET_NBR_BITS;
;;;1446   
;;;1447   
;;;1448   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1449       if (val > 0x00000000FFFFFFFFu) {
000006  f04f35ff          MOV      r5,#0xffffffff
00000a  f04f0400          MOV      r4,#0
00000e  1aad              SUBS     r5,r5,r2
000010  419c              SBCS     r4,r4,r3
000012  d227              BCS      |L4.100|
;;;1450           if (val > 0x0000FFFFFFFFFFFFu) {
000014  f04f35ff          MOV      r5,#0xffffffff
000018  0c2c              LSRS     r4,r5,#16
00001a  1aad              SUBS     r5,r5,r2
00001c  419c              SBCS     r4,r4,r3
00001e  d20f              BCS      |L4.64|
;;;1451               if (val > 0x00FFFFFFFFFFFFFFu) {                                    /* Chk bits [63:56] :                   */
000020  f04f35ff          MOV      r5,#0xffffffff
000024  0a2c              LSRS     r4,r5,#8
000026  1aad              SUBS     r5,r5,r2
000028  419c              SBCS     r4,r4,r3
00002a  d203              BCS      |L4.52|
;;;1452                                                                                   /* .. Nbr lead zeros =               .. */
;;;1453                   ix             = (CPU_DATA)((CPU_INT64U)val >> 56u);            /* .. lookup tbl ix  = 'val' >> 56 bits */
00002c  0e19              LSRS     r1,r3,#24
;;;1454                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);           /* .. plus nbr msb lead zeros =  0 bits.*/
00002e  4c25              LDR      r4,|L4.196|
000030  5c60              LDRB     r0,[r4,r1]
000032  e045              B        |L4.192|
                  |L4.52|
;;;1455   
;;;1456               } else {                                                            /* Chk bits [55:48] :                   */
;;;1457                                                                                   /* .. Nbr lead zeros =               .. */
;;;1458                   ix             = (CPU_DATA)((CPU_INT64U)val >> 48u);            /* .. lookup tbl ix  = 'val' >> 48 bits */
000034  0c19              LSRS     r1,r3,#16
;;;1459                   nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] +  8u);/* .. plus nbr msb lead zeros =  8 bits.*/
000036  4c23              LDR      r4,|L4.196|
000038  5c64              LDRB     r4,[r4,r1]
00003a  2508              MOVS     r5,#8
00003c  1960              ADDS     r0,r4,r5
00003e  e03f              B        |L4.192|
                  |L4.64|
;;;1460               }
;;;1461   
;;;1462           } else {
;;;1463               if (val > 0x000000FFFFFFFFFFu) {                                    /* Chk bits [47:40] :                   */
000040  f04f35ff          MOV      r5,#0xffffffff
000044  24ff              MOVS     r4,#0xff
000046  1aad              SUBS     r5,r5,r2
000048  419c              SBCS     r4,r4,r3
00004a  d205              BCS      |L4.88|
;;;1464                                                                                   /* .. Nbr lead zeros =               .. */
;;;1465                   ix             = (CPU_DATA)((CPU_INT64U)val >> 40u);            /* .. lookup tbl ix  = 'val' >> 40 bits */
00004c  0a19              LSRS     r1,r3,#8
;;;1466                   nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 16u);/* .. plus nbr msb lead zeros = 16 bits.*/
00004e  4c1d              LDR      r4,|L4.196|
000050  5c64              LDRB     r4,[r4,r1]
000052  2510              MOVS     r5,#0x10
000054  1960              ADDS     r0,r4,r5
000056  e033              B        |L4.192|
                  |L4.88|
;;;1467   
;;;1468               } else {                                                            /* Chk bits [39:32] :                   */
;;;1469                                                                                   /* .. Nbr lead zeros =               .. */
;;;1470                   ix             = (CPU_DATA)((CPU_INT64U)val >> 32u);            /* .. lookup tbl ix  = 'val' >> 32 bits */
000058  4619              MOV      r1,r3
;;;1471                   nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 24u);/* .. plus nbr msb lead zeros = 24 bits.*/
00005a  4c1a              LDR      r4,|L4.196|
00005c  5c64              LDRB     r4,[r4,r1]
00005e  2518              MOVS     r5,#0x18
000060  1960              ADDS     r0,r4,r5
000062  e02d              B        |L4.192|
                  |L4.100|
;;;1472               }
;;;1473           }
;;;1474   
;;;1475       } else {
;;;1476           if (val > 0x000000000000FFFFu) {
000064  f64f75ff          MOV      r5,#0xffff
000068  2400              MOVS     r4,#0
00006a  1aad              SUBS     r5,r5,r2
00006c  419c              SBCS     r4,r4,r3
00006e  d215              BCS      |L4.156|
;;;1477               if (val > 0x0000000000FFFFFFu) {                                    /* Chk bits [31:24] :                   */
000070  f06f457f          MVN      r5,#0xff000000
000074  2400              MOVS     r4,#0
000076  1aad              SUBS     r5,r5,r2
000078  419c              SBCS     r4,r4,r3
00007a  d207              BCS      |L4.140|
;;;1478                                                                                   /* .. Nbr lead zeros =               .. */
;;;1479                   ix             = (CPU_DATA)((CPU_INT64U)val >> 24u);              /* .. lookup tbl ix  = 'val' >> 24 bits */
00007c  0e14              LSRS     r4,r2,#24
00007e  ea442103          ORR      r1,r4,r3,LSL #8
;;;1480                   nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 32u);/* .. plus nbr msb lead zeros = 32 bits.*/
000082  4c10              LDR      r4,|L4.196|
000084  5c64              LDRB     r4,[r4,r1]
000086  2520              MOVS     r5,#0x20
000088  1960              ADDS     r0,r4,r5
00008a  e019              B        |L4.192|
                  |L4.140|
;;;1481   
;;;1482               } else {                                                            /* Chk bits [23:16] :                   */
;;;1483                                                                                   /* .. Nbr lead zeros =               .. */
;;;1484                   ix             = (CPU_DATA)((CPU_INT64U)val >> 16u);            /* .. lookup tbl ix  = 'val' >> 16 bits */
00008c  0c14              LSRS     r4,r2,#16
00008e  ea444103          ORR      r1,r4,r3,LSL #16
;;;1485                   nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 40u);/* .. plus nbr msb lead zeros = 40 bits.*/
000092  4c0c              LDR      r4,|L4.196|
000094  5c64              LDRB     r4,[r4,r1]
000096  2528              MOVS     r5,#0x28
000098  1960              ADDS     r0,r4,r5
00009a  e011              B        |L4.192|
                  |L4.156|
;;;1486               }
;;;1487   
;;;1488           } else {
;;;1489               if (val > 0x00000000000000FFu) {                                    /* Chk bits [15:08] :                   */
00009c  25ff              MOVS     r5,#0xff
00009e  2400              MOVS     r4,#0
0000a0  1aad              SUBS     r5,r5,r2
0000a2  419c              SBCS     r4,r4,r3
0000a4  d207              BCS      |L4.182|
;;;1490                                                                                   /* .. Nbr lead zeros =               .. */
;;;1491                   ix             = (CPU_DATA)((CPU_INT64U)val >>  8u);            /* .. lookup tbl ix  = 'val' >>  8 bits */
0000a6  0a14              LSRS     r4,r2,#8
0000a8  ea446103          ORR      r1,r4,r3,LSL #24
;;;1492                   nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 48u);/* .. plus nbr msb lead zeros = 48 bits.*/
0000ac  4c05              LDR      r4,|L4.196|
0000ae  5c64              LDRB     r4,[r4,r1]
0000b0  2530              MOVS     r5,#0x30
0000b2  1960              ADDS     r0,r4,r5
0000b4  e004              B        |L4.192|
                  |L4.182|
;;;1493   
;;;1494               } else {                                                            /* Chk bits [07:00] :                   */
;;;1495                                                                                   /* .. Nbr lead zeros =               .. */
;;;1496                   ix             = (CPU_DATA)(val);                               /* .. lookup tbl ix  = 'val' >>  0 bits */
0000b6  4611              MOV      r1,r2
;;;1497                   nbr_lead_zeros = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 56u);/* .. plus nbr msb lead zeros = 56 bits.*/
0000b8  4c02              LDR      r4,|L4.196|
0000ba  5c64              LDRB     r4,[r4,r1]
0000bc  2538              MOVS     r5,#0x38
0000be  1960              ADDS     r0,r4,r5
                  |L4.192|
;;;1498               }
;;;1499           }
;;;1500       }
;;;1501   #endif
;;;1502   
;;;1503   
;;;1504       return (nbr_lead_zeros);
;;;1505   }
0000c0  bd30              POP      {r4,r5,pc}
;;;1506   #endif
                          ENDP

0000c2  0000              DCW      0x0000
                  |L4.196|
                          DCD      CPU_CntLeadZerosTbl

                          AREA ||i.CPU_CntTrailZeros08||, CODE, READONLY, ALIGN=1

                  CPU_CntTrailZeros08 PROC
;;;1711   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
;;;1712   CPU_DATA  CPU_CntTrailZeros08 (CPU_INT08U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1713   {
000002  4604              MOV      r4,r0
;;;1714   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1715           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
;;;1716       CPU_INT08U  val_bit_mask;
;;;1717       CPU_DATA    nbr_lead_zeros;
;;;1718   #endif
;;;1719       CPU_DATA    nbr_trail_zeros;
;;;1720   
;;;1721   
;;;1722       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
000004  b90c              CBNZ     r4,|L5.10|
;;;1723           return (CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS);
000006  2008              MOVS     r0,#8
                  |L5.8|
;;;1724       }
;;;1725   
;;;1726                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;1727   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1728        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
;;;1729       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;1730   
;;;1731   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;1732       val_bit_mask    = val & ((CPU_INT08U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;1733       nbr_lead_zeros  = CPU_CntLeadZeros08(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;1734                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;1735       nbr_trail_zeros = ((CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;1736   #endif
;;;1737   
;;;1738   
;;;1739       return (nbr_trail_zeros);
;;;1740   }
000008  bd70              POP      {r4-r6,pc}
                  |L5.10|
00000a  4620              MOV      r0,r4                 ;1729
00000c  f7fffffe          BL       CPU_CntTrailZeros
000010  4605              MOV      r5,r0                 ;1729
000012  4628              MOV      r0,r5                 ;1739
000014  e7f8              B        |L5.8|
;;;1741   #endif
                          ENDP


                          AREA ||i.CPU_CntTrailZeros16||, CODE, READONLY, ALIGN=1

                  CPU_CntTrailZeros16 PROC
;;;1815   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
;;;1816   CPU_DATA  CPU_CntTrailZeros16 (CPU_INT16U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1817   {
000002  4604              MOV      r4,r0
;;;1818   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1819           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
;;;1820       CPU_INT16U  val_bit_mask;
;;;1821       CPU_DATA    nbr_lead_zeros;
;;;1822   #endif
;;;1823       CPU_DATA    nbr_trail_zeros;
;;;1824   
;;;1825   
;;;1826       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
000004  b90c              CBNZ     r4,|L6.10|
;;;1827           return (CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS);
000006  2010              MOVS     r0,#0x10
                  |L6.8|
;;;1828       }
;;;1829   
;;;1830                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;1831   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1832        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
;;;1833       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;1834   
;;;1835   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;1836       val_bit_mask    = val & ((CPU_INT16U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;1837       nbr_lead_zeros  = CPU_CntLeadZeros16(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;1838                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;1839       nbr_trail_zeros = ((CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;1840   #endif
;;;1841   
;;;1842   
;;;1843       return (nbr_trail_zeros);
;;;1844   }
000008  bd70              POP      {r4-r6,pc}
                  |L6.10|
00000a  4620              MOV      r0,r4                 ;1833
00000c  f7fffffe          BL       CPU_CntTrailZeros
000010  4605              MOV      r5,r0                 ;1833
000012  4628              MOV      r0,r5                 ;1843
000014  e7f8              B        |L6.8|
;;;1845   #endif
                          ENDP


                          AREA ||i.CPU_CntTrailZeros32||, CODE, READONLY, ALIGN=1

                  CPU_CntTrailZeros32 PROC
;;;1919   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
;;;1920   CPU_DATA  CPU_CntTrailZeros32 (CPU_INT32U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1921   {
000002  4604              MOV      r4,r0
;;;1922   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1923           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
;;;1924       CPU_INT32U  val_bit_mask;
;;;1925       CPU_DATA    nbr_lead_zeros;
;;;1926   #endif
;;;1927       CPU_DATA    nbr_trail_zeros;
;;;1928   
;;;1929   
;;;1930       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
000004  b90c              CBNZ     r4,|L7.10|
;;;1931           return (CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS);
000006  2020              MOVS     r0,#0x20
                  |L7.8|
;;;1932       }
;;;1933   
;;;1934                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;1935   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1936        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
;;;1937       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;1938   
;;;1939   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;1940       val_bit_mask    = val & ((CPU_INT32U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;1941       nbr_lead_zeros  = CPU_CntLeadZeros32(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;1942                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;1943       nbr_trail_zeros = ((CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;1944   #endif
;;;1945   
;;;1946   
;;;1947       return (nbr_trail_zeros);
;;;1948   }
000008  bd70              POP      {r4-r6,pc}
                  |L7.10|
00000a  4620              MOV      r0,r4                 ;1937
00000c  f7fffffe          BL       CPU_CntTrailZeros
000010  4605              MOV      r5,r0                 ;1937
000012  4628              MOV      r0,r5                 ;1947
000014  e7f8              B        |L7.8|
;;;1949   #endif
                          ENDP


                          AREA ||i.CPU_CntTrailZeros64||, CODE, READONLY, ALIGN=1

                  CPU_CntTrailZeros64 PROC
;;;2023   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
;;;2024   CPU_DATA  CPU_CntTrailZeros64 (CPU_INT64U  val)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;2025   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;2026   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;2027           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
;;;2028       CPU_INT64U  val_bit_mask;
;;;2029       CPU_DATA    nbr_lead_zeros;
;;;2030   #endif
;;;2031       CPU_DATA    nbr_trail_zeros;
;;;2032   
;;;2033   
;;;2034       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
000008  f04f0100          MOV      r1,#0
00000c  ea840001          EOR      r0,r4,r1
000010  ea850101          EOR      r1,r5,r1
000014  4308              ORRS     r0,r0,r1
000016  d102              BNE      |L8.30|
;;;2035           return (CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS);
000018  2040              MOVS     r0,#0x40
                  |L8.26|
;;;2036       }
;;;2037   
;;;2038                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;2039   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;2040        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
;;;2041       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;2042   
;;;2043   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;2044       val_bit_mask    = val & ((CPU_INT64U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;2045       nbr_lead_zeros  = CPU_CntLeadZeros64(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;2046                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;2047       nbr_trail_zeros = ((CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;2048   #endif
;;;2049   
;;;2050   
;;;2051       return (nbr_trail_zeros);
;;;2052   }
00001a  e8bd83f0          POP      {r4-r9,pc}
                  |L8.30|
00001e  43e2              MVNS     r2,r4                 ;2044
000020  43e8              MVNS     r0,r5                 ;2044
000022  1c52              ADDS     r2,r2,#1              ;2044
000024  f1400100          ADC      r1,r0,#0              ;2044
000028  ea020604          AND      r6,r2,r4              ;2044
00002c  ea010705          AND      r7,r1,r5              ;2044
000030  4630              MOV      r0,r6                 ;2045
000032  4639              MOV      r1,r7                 ;2045
000034  f7fffffe          BL       CPU_CntLeadZeros64
000038  4680              MOV      r8,r0                 ;2045
00003a  f1c8093f          RSB      r9,r8,#0x3f           ;2047
00003e  4648              MOV      r0,r9                 ;2051
000040  e7eb              B        |L8.26|
;;;2053   #endif
                          ENDP


                          AREA ||i.CPU_Init||, CODE, READONLY, ALIGN=1

                  CPU_Init PROC
;;;203    
;;;204    void  CPU_Init (void)
000000  b510              PUSH     {r4,lr}
;;;205    {
;;;206                                                                    /* --------------------- INIT TS ---------------------- */
;;;207    #if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
;;;208         (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
;;;209        CPU_TS_Init();                                              /* See Note #3a.                                        */
000002  f7fffffe          BL       CPU_TS_Init
;;;210    #endif
;;;211                                                                    /* -------------- INIT INT DIS TIME MEAS -------------- */
;;;212    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;213        CPU_IntDisMeasInit();                                       /* See Note #3b.                                        */
000006  f7fffffe          BL       CPU_IntDisMeasInit
;;;214    #endif
;;;215    
;;;216                                                                    /* ------------------ INIT CPU NAME ------------------- */
;;;217    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;218         CPU_NameInit();
00000a  f7fffffe          BL       CPU_NameInit
;;;219    #endif
;;;220    
;;;221    #if (CPU_CFG_CACHE_MGMT_EN == DEF_ENABLED)
;;;222         CPU_Cache_Init();
;;;223    #endif
;;;224    }
00000e  bd10              POP      {r4,pc}
;;;225    
                          ENDP


                          AREA ||i.CPU_IntDisMeasInit||, CODE, READONLY, ALIGN=2

                  CPU_IntDisMeasInit PROC
;;;2236   #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;2237   static  void  CPU_IntDisMeasInit (void)
000000  b570              PUSH     {r4-r6,lr}
;;;2238   {
;;;2239       CPU_TS_TMR  time_meas_tot_cnts;
;;;2240       CPU_INT16U  i;
;;;2241       CPU_SR_ALLOC();
000002  2600              MOVS     r6,#0
;;;2242   
;;;2243                                                                   /* ----------- INIT INT DIS TIME MEAS CTRLS ----------- */
;;;2244       CPU_IntDisMeasCtr         = 0u;
000004  2000              MOVS     r0,#0
000006  4918              LDR      r1,|L10.104|
000008  8008              STRH     r0,[r1,#0]
;;;2245       CPU_IntDisNestCtr         = 0u;
00000a  4918              LDR      r1,|L10.108|
00000c  8008              STRH     r0,[r1,#0]
;;;2246       CPU_IntDisMeasStart_cnts  = 0u;
00000e  4918              LDR      r1,|L10.112|
000010  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasStart_cnts
;;;2247       CPU_IntDisMeasStop_cnts   = 0u;
000012  4918              LDR      r1,|L10.116|
000014  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasStop_cnts
;;;2248       CPU_IntDisMeasMaxCur_cnts = 0u;
000016  4918              LDR      r1,|L10.120|
000018  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasMaxCur_cnts
;;;2249       CPU_IntDisMeasMax_cnts    = 0u;
00001a  4918              LDR      r1,|L10.124|
00001c  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasMax_cnts
;;;2250       CPU_IntDisMeasOvrhd_cnts  = 0u;
00001e  4918              LDR      r1,|L10.128|
000020  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasOvrhd_cnts
;;;2251   
;;;2252                                                                   /* ----------- CALC INT DIS TIME MEAS OVRHD ----------- */
;;;2253       time_meas_tot_cnts = 0u;
000022  2400              MOVS     r4,#0
;;;2254       CPU_INT_DIS();                                              /* Ints MUST be dis'd for ovrhd calc (see Note #3b).    */
000024  bf00              NOP      
000026  f7fffffe          BL       CPU_SR_Save
00002a  4606              MOV      r6,r0
00002c  bf00              NOP      
;;;2255       for (i = 0u; i < CPU_CFG_INT_DIS_MEAS_OVRHD_NBR; i++) {
00002e  2500              MOVS     r5,#0
000030  e00b              B        |L10.74|
                  |L10.50|
;;;2256           CPU_IntDisMeasMaxCur_cnts = 0u;
000032  2000              MOVS     r0,#0
000034  4910              LDR      r1,|L10.120|
000036  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasMaxCur_cnts
;;;2257           CPU_IntDisMeasStart();                                  /* Perform multiple consecutive start/stop time meas's  */
000038  f7fffffe          BL       CPU_IntDisMeasStart
;;;2258           CPU_IntDisMeasStop();
00003c  f7fffffe          BL       CPU_IntDisMeasStop
;;;2259           time_meas_tot_cnts += CPU_IntDisMeasMaxCur_cnts;        /* ...       & sum time meas max's                  ... */
000040  480d              LDR      r0,|L10.120|
000042  6800              LDR      r0,[r0,#0]  ; CPU_IntDisMeasMaxCur_cnts
000044  4404              ADD      r4,r4,r0
000046  1c68              ADDS     r0,r5,#1              ;2255
000048  b285              UXTH     r5,r0                 ;2255
                  |L10.74|
00004a  2d00              CMP      r5,#0                 ;2255
00004c  d0f1              BEQ      |L10.50|
;;;2260       }
;;;2261                                                                   /* ... to calc avg time meas ovrhd (see Note #3a).      */
;;;2262       CPU_IntDisMeasOvrhd_cnts  = (time_meas_tot_cnts + (CPU_CFG_INT_DIS_MEAS_OVRHD_NBR / 2u))
00004e  480c              LDR      r0,|L10.128|
000050  6004              STR      r4,[r0,#0]  ; CPU_IntDisMeasOvrhd_cnts
;;;2263                                                       /  CPU_CFG_INT_DIS_MEAS_OVRHD_NBR;
;;;2264       CPU_IntDisMeasMaxCur_cnts =  0u;                            /* Reset max ints dis'd times.                          */
000052  2000              MOVS     r0,#0
000054  4908              LDR      r1,|L10.120|
000056  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasMaxCur_cnts
;;;2265       CPU_IntDisMeasMax_cnts    =  0u;
000058  4908              LDR      r1,|L10.124|
00005a  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasMax_cnts
;;;2266       CPU_INT_EN();
00005c  bf00              NOP      
00005e  4630              MOV      r0,r6
000060  f7fffffe          BL       CPU_SR_Restore
000064  bf00              NOP      
;;;2267   }
000066  bd70              POP      {r4-r6,pc}
;;;2268   #endif
                          ENDP

                  |L10.104|
                          DCD      CPU_IntDisMeasCtr
                  |L10.108|
                          DCD      CPU_IntDisNestCtr
                  |L10.112|
                          DCD      CPU_IntDisMeasStart_cnts
                  |L10.116|
                          DCD      CPU_IntDisMeasStop_cnts
                  |L10.120|
                          DCD      CPU_IntDisMeasMaxCur_cnts
                  |L10.124|
                          DCD      CPU_IntDisMeasMax_cnts
                  |L10.128|
                          DCD      CPU_IntDisMeasOvrhd_cnts

                          AREA ||i.CPU_IntDisMeasMaxCalc||, CODE, READONLY, ALIGN=2

                  CPU_IntDisMeasMaxCalc PROC
;;;2369   #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;2370   static  CPU_TS_TMR  CPU_IntDisMeasMaxCalc (CPU_TS_TMR  time_tot_cnts)
000000  4601              MOV      r1,r0
;;;2371   {
;;;2372       CPU_TS_TMR  time_max_cnts;
;;;2373   
;;;2374   
;;;2375       time_max_cnts = time_tot_cnts;
000002  4608              MOV      r0,r1
;;;2376       if (time_max_cnts >  CPU_IntDisMeasOvrhd_cnts) {            /* If       max ints dis'd time >  ovrhd time, ...      */
000004  4a04              LDR      r2,|L11.24|
000006  6812              LDR      r2,[r2,#0]  ; CPU_IntDisMeasOvrhd_cnts
000008  4290              CMP      r0,r2
00000a  d903              BLS      |L11.20|
;;;2377           time_max_cnts -= CPU_IntDisMeasOvrhd_cnts;              /* ... adj  max ints dis'd time by ovrhd time; ...      */
00000c  4a02              LDR      r2,|L11.24|
00000e  6812              LDR      r2,[r2,#0]  ; CPU_IntDisMeasOvrhd_cnts
000010  1a80              SUBS     r0,r0,r2
000012  e000              B        |L11.22|
                  |L11.20|
;;;2378       } else {                                                    /* ... else max ints dis'd time <  ovrhd time, ...      */
;;;2379           time_max_cnts  = 0u;                                    /* ... clr  max ints dis'd time (see Note #2).          */
000014  2000              MOVS     r0,#0
                  |L11.22|
;;;2380       }
;;;2381   
;;;2382       return (time_max_cnts);
;;;2383   }
000016  4770              BX       lr
;;;2384   #endif
                          ENDP

                  |L11.24|
                          DCD      CPU_IntDisMeasOvrhd_cnts

                          AREA ||i.CPU_IntDisMeasMaxCurGet||, CODE, READONLY, ALIGN=2

                  CPU_IntDisMeasMaxCurGet PROC
;;;758    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;759    CPU_TS_TMR  CPU_IntDisMeasMaxCurGet (void)
000000  b570              PUSH     {r4-r6,lr}
;;;760    {
;;;761        CPU_TS_TMR  time_tot_cnts;
;;;762        CPU_TS_TMR  time_max_cnts;
;;;763        CPU_SR_ALLOC();
000002  2500              MOVS     r5,#0
;;;764    
;;;765    
;;;766        CPU_INT_DIS();
000004  bf00              NOP      
000006  f7fffffe          BL       CPU_SR_Save
00000a  4605              MOV      r5,r0
00000c  bf00              NOP      
;;;767        time_tot_cnts = CPU_IntDisMeasMaxCur_cnts;
00000e  4806              LDR      r0,|L12.40|
000010  6804              LDR      r4,[r0,#0]  ; CPU_IntDisMeasMaxCur_cnts
;;;768        CPU_INT_EN();
000012  bf00              NOP      
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       CPU_SR_Restore
00001a  bf00              NOP      
;;;769        time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       CPU_IntDisMeasMaxCalc
000022  4606              MOV      r6,r0
;;;770    
;;;771        return (time_max_cnts);
000024  4630              MOV      r0,r6
;;;772    }
000026  bd70              POP      {r4-r6,pc}
;;;773    #endif
                          ENDP

                  |L12.40|
                          DCD      CPU_IntDisMeasMaxCur_cnts

                          AREA ||i.CPU_IntDisMeasMaxCurReset||, CODE, READONLY, ALIGN=2

                  CPU_IntDisMeasMaxCurReset PROC
;;;717    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;718    CPU_TS_TMR  CPU_IntDisMeasMaxCurReset (void)
000000  b570              PUSH     {r4-r6,lr}
;;;719    {
;;;720        CPU_TS_TMR  time_max_cnts;
;;;721        CPU_SR_ALLOC();
000002  2500              MOVS     r5,#0
;;;722    
;;;723    
;;;724        time_max_cnts             = CPU_IntDisMeasMaxCurGet();
000004  f7fffffe          BL       CPU_IntDisMeasMaxCurGet
000008  4604              MOV      r4,r0
;;;725        CPU_INT_DIS();
00000a  bf00              NOP      
00000c  f7fffffe          BL       CPU_SR_Save
000010  4605              MOV      r5,r0
000012  bf00              NOP      
;;;726        CPU_IntDisMeasMaxCur_cnts = 0u;
000014  2000              MOVS     r0,#0
000016  4904              LDR      r1,|L13.40|
000018  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasMaxCur_cnts
;;;727        CPU_INT_EN();
00001a  bf00              NOP      
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       CPU_SR_Restore
000022  bf00              NOP      
;;;728    
;;;729        return (time_max_cnts);
000024  4620              MOV      r0,r4
;;;730    }
000026  bd70              POP      {r4-r6,pc}
;;;731    #endif
                          ENDP

                  |L13.40|
                          DCD      CPU_IntDisMeasMaxCur_cnts

                          AREA ||i.CPU_IntDisMeasMaxGet||, CODE, READONLY, ALIGN=2

                  CPU_IntDisMeasMaxGet PROC
;;;800    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;801    CPU_TS_TMR  CPU_IntDisMeasMaxGet (void)
000000  b570              PUSH     {r4-r6,lr}
;;;802    {
;;;803        CPU_TS_TMR  time_tot_cnts;
;;;804        CPU_TS_TMR  time_max_cnts;
;;;805        CPU_SR_ALLOC();
000002  2500              MOVS     r5,#0
;;;806    
;;;807    
;;;808        CPU_INT_DIS();
000004  bf00              NOP      
000006  f7fffffe          BL       CPU_SR_Save
00000a  4605              MOV      r5,r0
00000c  bf00              NOP      
;;;809        time_tot_cnts = CPU_IntDisMeasMax_cnts;
00000e  4806              LDR      r0,|L14.40|
000010  6804              LDR      r4,[r0,#0]  ; CPU_IntDisMeasMax_cnts
;;;810        CPU_INT_EN();
000012  bf00              NOP      
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       CPU_SR_Restore
00001a  bf00              NOP      
;;;811        time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       CPU_IntDisMeasMaxCalc
000022  4606              MOV      r6,r0
;;;812    
;;;813        return (time_max_cnts);
000024  4630              MOV      r0,r6
;;;814    }
000026  bd70              POP      {r4-r6,pc}
;;;815    #endif
                          ENDP

                  |L14.40|
                          DCD      CPU_IntDisMeasMax_cnts

                          AREA ||i.CPU_IntDisMeasStart||, CODE, READONLY, ALIGN=2

                  CPU_IntDisMeasStart PROC
;;;837    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;838    void  CPU_IntDisMeasStart (void)
000000  b510              PUSH     {r4,lr}
;;;839    {
;;;840        CPU_IntDisMeasCtr++;
000002  4809              LDR      r0,|L15.40|
000004  8800              LDRH     r0,[r0,#0]  ; CPU_IntDisMeasCtr
000006  1c40              ADDS     r0,r0,#1
000008  4907              LDR      r1,|L15.40|
00000a  8008              STRH     r0,[r1,#0]
;;;841        if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NOT yet dis'd, ...                       */
00000c  4807              LDR      r0,|L15.44|
00000e  8800              LDRH     r0,[r0,#0]  ; CPU_IntDisNestCtr
000010  b918              CBNZ     r0,|L15.26|
;;;842            CPU_IntDisMeasStart_cnts = CPU_TS_TmrRd();                  /* ... get ints dis'd start time.                   */
000012  f7fffffe          BL       CPU_TS_TmrRd
000016  4906              LDR      r1,|L15.48|
000018  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasStart_cnts
                  |L15.26|
;;;843        }
;;;844        CPU_IntDisNestCtr++;
00001a  4804              LDR      r0,|L15.44|
00001c  8800              LDRH     r0,[r0,#0]  ; CPU_IntDisNestCtr
00001e  1c40              ADDS     r0,r0,#1
000020  4902              LDR      r1,|L15.44|
000022  8008              STRH     r0,[r1,#0]
;;;845    }
000024  bd10              POP      {r4,pc}
;;;846    #endif
                          ENDP

000026  0000              DCW      0x0000
                  |L15.40|
                          DCD      CPU_IntDisMeasCtr
                  |L15.44|
                          DCD      CPU_IntDisNestCtr
                  |L15.48|
                          DCD      CPU_IntDisMeasStart_cnts

                          AREA ||i.CPU_IntDisMeasStop||, CODE, READONLY, ALIGN=2

                  CPU_IntDisMeasStop PROC
;;;1021   #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;1022   void  CPU_IntDisMeasStop (void)
000000  b510              PUSH     {r4,lr}
;;;1023   {
;;;1024       CPU_TS_TMR  time_ints_disd_cnts;
;;;1025   
;;;1026   
;;;1027       CPU_IntDisNestCtr--;
000002  480f              LDR      r0,|L16.64|
000004  8800              LDRH     r0,[r0,#0]  ; CPU_IntDisNestCtr
000006  1e40              SUBS     r0,r0,#1
000008  490d              LDR      r1,|L16.64|
00000a  8008              STRH     r0,[r1,#0]
;;;1028       if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NO longer dis'd,        ...              */
00000c  4608              MOV      r0,r1
00000e  8800              LDRH     r0,[r0,#0]  ; CPU_IntDisNestCtr
000010  b9a0              CBNZ     r0,|L16.60|
;;;1029           CPU_IntDisMeasStop_cnts = CPU_TS_TmrRd();                   /* ... get  ints dis'd stop time & ...              */
000012  f7fffffe          BL       CPU_TS_TmrRd
000016  490b              LDR      r1,|L16.68|
000018  6008              STR      r0,[r1,#0]  ; CPU_IntDisMeasStop_cnts
;;;1030                                                                       /* ... calc ints dis'd tot  time (see Note #1b2A).  */
;;;1031           time_ints_disd_cnts     = CPU_IntDisMeasStop_cnts -
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]  ; CPU_IntDisMeasStop_cnts
00001e  490a              LDR      r1,|L16.72|
000020  6809              LDR      r1,[r1,#0]  ; CPU_IntDisMeasStart_cnts
000022  1a44              SUBS     r4,r0,r1
;;;1032                                     CPU_IntDisMeasStart_cnts;
;;;1033                                                                       /* Calc max ints dis'd times.                       */
;;;1034           if (CPU_IntDisMeasMaxCur_cnts < time_ints_disd_cnts) {
000024  4809              LDR      r0,|L16.76|
000026  6800              LDR      r0,[r0,#0]  ; CPU_IntDisMeasMaxCur_cnts
000028  42a0              CMP      r0,r4
00002a  d201              BCS      |L16.48|
;;;1035               CPU_IntDisMeasMaxCur_cnts = time_ints_disd_cnts;
00002c  4807              LDR      r0,|L16.76|
00002e  6004              STR      r4,[r0,#0]  ; CPU_IntDisMeasMaxCur_cnts
                  |L16.48|
;;;1036           }
;;;1037           if (CPU_IntDisMeasMax_cnts    < time_ints_disd_cnts) {
000030  4807              LDR      r0,|L16.80|
000032  6800              LDR      r0,[r0,#0]  ; CPU_IntDisMeasMax_cnts
000034  42a0              CMP      r0,r4
000036  d201              BCS      |L16.60|
;;;1038               CPU_IntDisMeasMax_cnts    = time_ints_disd_cnts;
000038  4805              LDR      r0,|L16.80|
00003a  6004              STR      r4,[r0,#0]  ; CPU_IntDisMeasMax_cnts
                  |L16.60|
;;;1039           }
;;;1040       }
;;;1041   }
00003c  bd10              POP      {r4,pc}
;;;1042   #endif
                          ENDP

00003e  0000              DCW      0x0000
                  |L16.64|
                          DCD      CPU_IntDisNestCtr
                  |L16.68|
                          DCD      CPU_IntDisMeasStop_cnts
                  |L16.72|
                          DCD      CPU_IntDisMeasStart_cnts
                  |L16.76|
                          DCD      CPU_IntDisMeasMaxCur_cnts
                  |L16.80|
                          DCD      CPU_IntDisMeasMax_cnts

                          AREA ||i.CPU_NameClr||, CODE, READONLY, ALIGN=2

                  CPU_NameClr PROC
;;;275    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;276    void  CPU_NameClr (void)
000000  b510              PUSH     {r4,lr}
;;;277    {
;;;278        CPU_SR_ALLOC();
000002  2400              MOVS     r4,#0
;;;279    
;;;280    
;;;281        CPU_CRITICAL_ENTER();
000004  bf00              NOP      
000006  bf00              NOP      
000008  f7fffffe          BL       CPU_SR_Save
00000c  4604              MOV      r4,r0
00000e  bf00              NOP      
000010  f7fffffe          BL       CPU_IntDisMeasStart
000014  bf00              NOP      
;;;282        Mem_Clr((void     *)&CPU_Name[0],
000016  2110              MOVS     r1,#0x10
000018  4806              LDR      r0,|L17.52|
00001a  f7fffffe          BL       Mem_Clr
;;;283                (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
;;;284        CPU_CRITICAL_EXIT();
00001e  bf00              NOP      
000020  f7fffffe          BL       CPU_IntDisMeasStop
000024  bf00              NOP      
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       CPU_SR_Restore
00002c  bf00              NOP      
00002e  bf00              NOP      
;;;285    }
000030  bd10              POP      {r4,pc}
;;;286    #endif
                          ENDP

000032  0000              DCW      0x0000
                  |L17.52|
                          DCD      CPU_Name

                          AREA ||i.CPU_NameGet||, CODE, READONLY, ALIGN=2

                  CPU_NameGet PROC
;;;319    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;320    void  CPU_NameGet (CPU_CHAR  *p_name,
000000  b570              PUSH     {r4-r6,lr}
;;;321                       CPU_ERR   *p_err)
;;;322    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;323        CPU_SR_ALLOC();
000006  2600              MOVS     r6,#0
;;;324    
;;;325    
;;;326        if (p_err == (CPU_ERR *)0) {
000008  b914              CBNZ     r4,|L18.16|
;;;327            CPU_SW_EXCEPTION(;);
00000a  bf00              NOP      
00000c  f7fffffe          BL       CPU_SW_Exception
                  |L18.16|
;;;328        }
;;;329    
;;;330        if (p_name == (CPU_CHAR *)0) {
000010  b915              CBNZ     r5,|L18.24|
;;;331           *p_err = CPU_ERR_NULL_PTR;
000012  200a              MOVS     r0,#0xa
000014  8020              STRH     r0,[r4,#0]
                  |L18.22|
;;;332            return;
;;;333        }
;;;334    
;;;335        CPU_CRITICAL_ENTER();
;;;336       (void)Str_Copy_N(p_name,
;;;337                       &CPU_Name[0],
;;;338                        CPU_CFG_NAME_SIZE);
;;;339        CPU_CRITICAL_EXIT();
;;;340    
;;;341       *p_err = CPU_ERR_NONE;
;;;342    }
000016  bd70              POP      {r4-r6,pc}
                  |L18.24|
000018  bf00              NOP                            ;335
00001a  bf00              NOP                            ;335
00001c  f7fffffe          BL       CPU_SR_Save
000020  4606              MOV      r6,r0                 ;335
000022  bf00              NOP                            ;335
000024  f7fffffe          BL       CPU_IntDisMeasStart
000028  bf00              NOP                            ;335
00002a  2210              MOVS     r2,#0x10              ;336
00002c  4908              LDR      r1,|L18.80|
00002e  4628              MOV      r0,r5                 ;336
000030  f7fffffe          BL       Str_Copy_N
000034  bf00              NOP                            ;339
000036  f7fffffe          BL       CPU_IntDisMeasStop
00003a  bf00              NOP                            ;339
00003c  4630              MOV      r0,r6                 ;339
00003e  f7fffffe          BL       CPU_SR_Restore
000042  bf00              NOP                            ;339
000044  bf00              NOP                            ;339
000046  2000              MOVS     r0,#0                 ;341
000048  8020              STRH     r0,[r4,#0]            ;341
00004a  bf00              NOP      
00004c  e7e3              B        |L18.22|
;;;343    #endif
                          ENDP

00004e  0000              DCW      0x0000
                  |L18.80|
                          DCD      CPU_Name

                          AREA ||i.CPU_NameInit||, CODE, READONLY, ALIGN=1

                  CPU_NameInit PROC
;;;2121   #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;2122   static  void  CPU_NameInit (void)
000000  b510              PUSH     {r4,lr}
;;;2123   {
;;;2124       CPU_NameClr();
000002  f7fffffe          BL       CPU_NameClr
;;;2125   }
000006  bd10              POP      {r4,pc}
;;;2126   #endif
                          ENDP


                          AREA ||i.CPU_NameSet||, CODE, READONLY, ALIGN=2

                  CPU_NameSet PROC
;;;372    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;373    void  CPU_NameSet (const  CPU_CHAR  *p_name,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;374                              CPU_ERR   *p_err)
;;;375    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;376        CPU_SIZE_T  len;
;;;377        CPU_SR_ALLOC();
000008  2700              MOVS     r7,#0
;;;378    
;;;379    
;;;380        if (p_err == (CPU_ERR *)0) {
00000a  b914              CBNZ     r4,|L20.18|
;;;381            CPU_SW_EXCEPTION(;);
00000c  bf00              NOP      
00000e  f7fffffe          BL       CPU_SW_Exception
                  |L20.18|
;;;382        }
;;;383    
;;;384        if (p_name == (const CPU_CHAR *)0) {
000012  b91d              CBNZ     r5,|L20.28|
;;;385           *p_err = CPU_ERR_NULL_PTR;
000014  200a              MOVS     r0,#0xa
000016  8020              STRH     r0,[r4,#0]
                  |L20.24|
;;;386            return;
;;;387        }
;;;388    
;;;389        len = Str_Len_N(p_name,
;;;390                        CPU_CFG_NAME_SIZE);
;;;391        if (len < CPU_CFG_NAME_SIZE) {                              /* If       cfg name len < max name size, ...           */
;;;392            CPU_CRITICAL_ENTER();
;;;393           (void)Str_Copy_N(&CPU_Name[0],                           /* ... copy cfg name to CPU host name.                  */
;;;394                             p_name,
;;;395                             CPU_CFG_NAME_SIZE);
;;;396            CPU_CRITICAL_EXIT();
;;;397           *p_err = CPU_ERR_NONE;
;;;398    
;;;399        } else {
;;;400           *p_err = CPU_ERR_NAME_SIZE;
;;;401        }
;;;402    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L20.28|
00001c  2110              MOVS     r1,#0x10              ;389
00001e  4628              MOV      r0,r5                 ;389
000020  f7fffffe          BL       Str_Len_N
000024  4606              MOV      r6,r0                 ;389
000026  2e10              CMP      r6,#0x10              ;391
000028  d219              BCS      |L20.94|
00002a  bf00              NOP                            ;392
00002c  bf00              NOP                            ;392
00002e  f7fffffe          BL       CPU_SR_Save
000032  4607              MOV      r7,r0                 ;392
000034  bf00              NOP                            ;392
000036  f7fffffe          BL       CPU_IntDisMeasStart
00003a  bf00              NOP                            ;392
00003c  2210              MOVS     r2,#0x10              ;393
00003e  4629              MOV      r1,r5                 ;393
000040  4809              LDR      r0,|L20.104|
000042  f7fffffe          BL       Str_Copy_N
000046  bf00              NOP                            ;396
000048  f7fffffe          BL       CPU_IntDisMeasStop
00004c  bf00              NOP                            ;396
00004e  4638              MOV      r0,r7                 ;396
000050  f7fffffe          BL       CPU_SR_Restore
000054  bf00              NOP                            ;396
000056  bf00              NOP                            ;396
000058  2000              MOVS     r0,#0                 ;397
00005a  8020              STRH     r0,[r4,#0]            ;397
00005c  e002              B        |L20.100|
                  |L20.94|
00005e  f44f707a          MOV      r0,#0x3e8             ;400
000062  8020              STRH     r0,[r4,#0]            ;400
                  |L20.100|
000064  bf00              NOP      
000066  e7d7              B        |L20.24|
;;;403    #endif
                          ENDP

                  |L20.104|
                          DCD      CPU_Name

                          AREA ||i.CPU_PopCnt32||, CODE, READONLY, ALIGN=1

                  CPU_PopCnt32 PROC
;;;2072   
;;;2073   CPU_INT08U  CPU_PopCnt32 (CPU_INT32U  value)
000000  b510              PUSH     {r4,lr}
;;;2074   {
000002  4602              MOV      r2,r0
;;;2075       CPU_INT32U  even_cnt;
;;;2076       CPU_INT32U  odd_cnt;
;;;2077       CPU_INT32U  result;
;;;2078   
;;;2079   
;;;2080       odd_cnt  = (value >> 1u) & CRC_UTIL_POPCNT_MASK01010101_32; /* 2-bits pieces.                                       */
000004  f04f3055          MOV      r0,#0x55555555
000008  ea000352          AND      r3,r0,r2,LSR #1
;;;2081       result   =  value - odd_cnt;                                /* Same result as result=odd_cnt+(value & 0x55555555).  */
00000c  1ad1              SUBS     r1,r2,r3
;;;2082   
;;;2083       even_cnt =  result & CRC_UTIL_POPCNT_MASK00110011_32;       /* 4-bits pieces.                                       */
00000e  f0013433          AND      r4,r1,#0x33333333
;;;2084       odd_cnt  = (result >> 2u) & CRC_UTIL_POPCNT_MASK00110011_32;
000012  f04f3033          MOV      r0,#0x33333333
000016  ea000391          AND      r3,r0,r1,LSR #2
;;;2085       result   =  even_cnt + odd_cnt;
00001a  18e1              ADDS     r1,r4,r3
;;;2086   
;;;2087       even_cnt =  result & CRC_UTIL_POPCNT_MASK00001111_32;       /* 8-bits pieces.                                       */
00001c  f001340f          AND      r4,r1,#0xf0f0f0f
;;;2088       odd_cnt  = (result >> 4u) & CRC_UTIL_POPCNT_MASK00001111_32;
000020  f04f300f          MOV      r0,#0xf0f0f0f
000024  ea001311          AND      r3,r0,r1,LSR #4
;;;2089       result   =  even_cnt + odd_cnt;
000028  18e1              ADDS     r1,r4,r3
;;;2090   
;;;2091       result = (result * CRC_UTIL_POPCNT_POWERSOF256_32) >> 24u;
00002a  eb014001          ADD      r0,r1,r1,LSL #16
00002e  eb002000          ADD      r0,r0,r0,LSL #8
000032  0e01              LSRS     r1,r0,#24
;;;2092   
;;;2093       return ((CPU_INT08U)result);
000034  4608              MOV      r0,r1
;;;2094   }
000036  bd10              POP      {r4,pc}
;;;2095   
                          ENDP


                          AREA ||i.CPU_SW_Exception||, CODE, READONLY, ALIGN=1

                  CPU_SW_Exception PROC
;;;246    
;;;247    void  CPU_SW_Exception (void)
000000  bf00              NOP      
                  |L22.2|
;;;248    {
;;;249        while (DEF_ON) {
000002  e7fe              B        |L22.2|
;;;250            ;
;;;251        }
;;;252    }
;;;253    
                          ENDP


                          AREA ||i.CPU_TS_Get32||, CODE, READONLY, ALIGN=1

                  CPU_TS_Get32 PROC
;;;458    #if (CPU_CFG_TS_32_EN == DEF_ENABLED)
;;;459    CPU_TS32  CPU_TS_Get32 (void)
000000  b510              PUSH     {r4,lr}
;;;460    {
;;;461        CPU_TS32    ts;
;;;462    #if (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)
;;;463        CPU_TS_TMR  tmr_cur;
;;;464        CPU_TS_TMR  tmr_delta;
;;;465        CPU_SR_ALLOC();
;;;466    
;;;467    #endif
;;;468    
;;;469    #if (CPU_CFG_TS_TMR_SIZE >= CPU_WORD_SIZE_32)
;;;470        ts = (CPU_TS32)CPU_TS_TmrRd();                                  /* Get cur ts tmr val (in 32-bit ts cnts).          */
000002  f7fffffe          BL       CPU_TS_TmrRd
000006  4604              MOV      r4,r0
;;;471    
;;;472    #else
;;;473        CPU_INT_DIS();
;;;474        tmr_cur            = (CPU_TS_TMR) CPU_TS_TmrRd();               /* Get cur ts tmr val (in ts tmr cnts).             */
;;;475        tmr_delta          = (CPU_TS_TMR)(tmr_cur - CPU_TS_32_TmrPrev); /* Calc      delta ts tmr cnts.                     */
;;;476        CPU_TS_32_Accum   += (CPU_TS32  ) tmr_delta;                    /* Inc ts by delta ts tmr cnts (see Note #2).       */
;;;477        CPU_TS_32_TmrPrev  = (CPU_TS_TMR) tmr_cur;                      /* Save cur ts tmr cnts for next update.            */
;;;478        ts                 = (CPU_TS32  ) CPU_TS_32_Accum;
;;;479        CPU_INT_EN();
;;;480    #endif
;;;481    
;;;482        return (ts);
000008  4620              MOV      r0,r4
;;;483    }
00000a  bd10              POP      {r4,pc}
;;;484    #endif
                          ENDP


                          AREA ||i.CPU_TS_Init||, CODE, READONLY, ALIGN=2

                  CPU_TS_Init PROC
;;;2157        (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
;;;2158   static  void  CPU_TS_Init (void)
000000  b510              PUSH     {r4,lr}
;;;2159   {
;;;2160   #if (((CPU_CFG_TS_32_EN    == DEF_ENABLED     )  && \
;;;2161         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)) || \
;;;2162        ((CPU_CFG_TS_64_EN    == DEF_ENABLED     )  && \
;;;2163         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)))
;;;2164       CPU_TS_TMR  ts_tmr_cnts;
;;;2165   #endif
;;;2166   
;;;2167   
;;;2168                                                                   /* ----------------- INIT CPU TS TMR ------------------ */
;;;2169   #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;2170       CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
000002  2000              MOVS     r0,#0
000004  4902              LDR      r1,|L24.16|
000006  6008              STR      r0,[r1,#0]  ; CPU_TS_TmrFreq_Hz
;;;2171       CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see Note #1b).             */
000008  f7fffffe          BL       CPU_TS_TmrInit
;;;2172   #endif
;;;2173   
;;;2174   
;;;2175                                                                   /* ------------------- INIT CPU TS -------------------- */
;;;2176   #if (((CPU_CFG_TS_32_EN    == DEF_ENABLED     )  && \
;;;2177         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)) || \
;;;2178        ((CPU_CFG_TS_64_EN    == DEF_ENABLED     )  && \
;;;2179         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)))
;;;2180       ts_tmr_cnts = CPU_TS_TmrRd();                               /* Get init ts tmr val (in ts tmr cnts).                */
;;;2181   #endif
;;;2182   
;;;2183   #if  ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
;;;2184         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
;;;2185       CPU_TS_32_Accum   = 0u;                                     /* Init 32-bit accum'd ts.                              */
;;;2186       CPU_TS_32_TmrPrev = ts_tmr_cnts;                            /* Init 32-bit ts prev tmr val.                         */
;;;2187   #endif
;;;2188   
;;;2189   #if  ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
;;;2190         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
;;;2191       CPU_TS_64_Accum   = 0u;                                     /* Init 64-bit accum'd ts.                              */
;;;2192       CPU_TS_64_TmrPrev = ts_tmr_cnts;                            /* Init 64-bit ts prev tmr val.                         */
;;;2193   #endif
;;;2194   }
00000c  bd10              POP      {r4,pc}
;;;2195   #endif
                          ENDP

00000e  0000              DCW      0x0000
                  |L24.16|
                          DCD      CPU_TS_TmrFreq_Hz

                          AREA ||i.CPU_TS_TmrFreqGet||, CODE, READONLY, ALIGN=2

                  CPU_TS_TmrFreqGet PROC
;;;635    #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;636    CPU_TS_TMR_FREQ  CPU_TS_TmrFreqGet (CPU_ERR  *p_err)
000000  b500              PUSH     {lr}
;;;637    {
000002  4601              MOV      r1,r0
;;;638        CPU_TS_TMR_FREQ  freq_hz;
;;;639    
;;;640    
;;;641        if (p_err == (CPU_ERR *)0) {
000004  b911              CBNZ     r1,|L25.12|
;;;642            CPU_SW_EXCEPTION(0);
000006  bf00              NOP      
000008  f7fffffe          BL       CPU_SW_Exception
                  |L25.12|
;;;643        }
;;;644    
;;;645        freq_hz =  CPU_TS_TmrFreq_Hz;
00000c  4a04              LDR      r2,|L25.32|
00000e  6810              LDR      r0,[r2,#0]  ; CPU_TS_TmrFreq_Hz
;;;646       *p_err   = (freq_hz != 0u) ? CPU_ERR_NONE : CPU_ERR_TS_FREQ_INVALID;
000010  b108              CBZ      r0,|L25.22|
000012  2200              MOVS     r2,#0
000014  e001              B        |L25.26|
                  |L25.22|
000016  f44f62fa          MOV      r2,#0x7d0
                  |L25.26|
00001a  800a              STRH     r2,[r1,#0]
;;;647    
;;;648        return (freq_hz);
;;;649    }
00001c  bd00              POP      {pc}
;;;650    #endif
                          ENDP

00001e  0000              DCW      0x0000
                  |L25.32|
                          DCD      CPU_TS_TmrFreq_Hz

                          AREA ||i.CPU_TS_TmrFreqSet||, CODE, READONLY, ALIGN=2

                  CPU_TS_TmrFreqSet PROC
;;;686    #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;687    void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
000000  4901              LDR      r1,|L26.8|
;;;688    {
;;;689        CPU_TS_TmrFreq_Hz = freq_hz;
000002  6008              STR      r0,[r1,#0]  ; CPU_TS_TmrFreq_Hz
;;;690    }
000004  4770              BX       lr
;;;691    #endif
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      CPU_TS_TmrFreq_Hz

                          AREA ||i.CPU_TS_Update||, CODE, READONLY, ALIGN=1

                  CPU_TS_Update PROC
;;;593    #if (CPU_CFG_TS_EN == DEF_ENABLED)
;;;594    void  CPU_TS_Update (void)
000000  4770              BX       lr
;;;595    {
;;;596    #if ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
;;;597         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
;;;598       (void)CPU_TS_Get32();
;;;599    #endif
;;;600    
;;;601    #if ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
;;;602         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
;;;603       (void)CPU_TS_Get64();
;;;604    #endif
;;;605    }
;;;606    #endif
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  CPU_Name
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CPU_CntLeadZerosTbl
000000  08070606          DCB      0x08,0x07,0x06,0x06
000004  05050505          DCB      0x05,0x05,0x05,0x05
000008  04040404          DCB      0x04,0x04,0x04,0x04
00000c  04040404          DCB      0x04,0x04,0x04,0x04
000010  03030303          DCB      0x03,0x03,0x03,0x03
000014  03030303          DCB      0x03,0x03,0x03,0x03
000018  03030303          DCB      0x03,0x03,0x03,0x03
00001c  03030303          DCB      0x03,0x03,0x03,0x03
000020  02020202          DCB      0x02,0x02,0x02,0x02
000024  02020202          DCB      0x02,0x02,0x02,0x02
000028  02020202          DCB      0x02,0x02,0x02,0x02
00002c  02020202          DCB      0x02,0x02,0x02,0x02
000030  02020202          DCB      0x02,0x02,0x02,0x02
000034  02020202          DCB      0x02,0x02,0x02,0x02
000038  02020202          DCB      0x02,0x02,0x02,0x02
00003c  02020202          DCB      0x02,0x02,0x02,0x02
000040  01010101          DCB      0x01,0x01,0x01,0x01
000044  01010101          DCB      0x01,0x01,0x01,0x01
000048  01010101          DCB      0x01,0x01,0x01,0x01
00004c  01010101          DCB      0x01,0x01,0x01,0x01
000050  01010101          DCB      0x01,0x01,0x01,0x01
000054  01010101          DCB      0x01,0x01,0x01,0x01
000058  01010101          DCB      0x01,0x01,0x01,0x01
00005c  01010101          DCB      0x01,0x01,0x01,0x01
000060  01010101          DCB      0x01,0x01,0x01,0x01
000064  01010101          DCB      0x01,0x01,0x01,0x01
000068  01010101          DCB      0x01,0x01,0x01,0x01
00006c  01010101          DCB      0x01,0x01,0x01,0x01
000070  01010101          DCB      0x01,0x01,0x01,0x01
000074  01010101          DCB      0x01,0x01,0x01,0x01
000078  01010101          DCB      0x01,0x01,0x01,0x01
00007c  01010101          DCB      0x01,0x01,0x01,0x01
000080  00000000          DCB      0x00,0x00,0x00,0x00
000084  00000000          DCB      0x00,0x00,0x00,0x00
000088  00000000          DCB      0x00,0x00,0x00,0x00
00008c  00000000          DCB      0x00,0x00,0x00,0x00
000090  00000000          DCB      0x00,0x00,0x00,0x00
000094  00000000          DCB      0x00,0x00,0x00,0x00
000098  00000000          DCB      0x00,0x00,0x00,0x00
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
0000ac  00000000          DCB      0x00,0x00,0x00,0x00
0000b0  00000000          DCB      0x00,0x00,0x00,0x00
0000b4  00000000          DCB      0x00,0x00,0x00,0x00
0000b8  00000000          DCB      0x00,0x00,0x00,0x00
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  00000000          DCB      0x00,0x00,0x00,0x00
0000c8  00000000          DCB      0x00,0x00,0x00,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  00000000          DCB      0x00,0x00,0x00,0x00
0000d8  00000000          DCB      0x00,0x00,0x00,0x00
0000dc  00000000          DCB      0x00,0x00,0x00,0x00
0000e0  00000000          DCB      0x00,0x00,0x00,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  00000000          DCB      0x00,0x00,0x00,0x00
0000ec  00000000          DCB      0x00,0x00,0x00,0x00
0000f0  00000000          DCB      0x00,0x00,0x00,0x00
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
                  CPU_EndiannessTest
                          DCD      0x12345678

                          AREA ||.data||, DATA, ALIGN=2

                  CPU_TS_TmrFreq_Hz
                          DCD      0x00000000
                  CPU_IntDisMeasCtr
000004  0000              DCB      0x00,0x00
                  CPU_IntDisNestCtr
000006  0000              DCB      0x00,0x00
                  CPU_IntDisMeasStart_cnts
                          DCD      0x00000000
                  CPU_IntDisMeasStop_cnts
                          DCD      0x00000000
                  CPU_IntDisMeasOvrhd_cnts
                          DCD      0x00000000
                  CPU_IntDisMeasMaxCur_cnts
                          DCD      0x00000000
                  CPU_IntDisMeasMax_cnts
                          DCD      0x00000000
