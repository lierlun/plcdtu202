; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\luat_air208.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\luat_air208.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -I..\..\Malloc -I..\..\User\Modbus -Id:\Keil_v4\ARM\RV31\INC -Id:\Keil_v4\ARM\CMSIS\Include -Id:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Flash\Obj\luat_air208.crf ..\..\User\luat_air208.c]
                          THUMB

                          AREA ||i.AIR208_Init||, CODE, READONLY, ALIGN=2

                  AIR208_Init PROC
;;;17     */
;;;18     void AIR208_Init(void)
000000  b508              PUSH     {r3,lr}
;;;19     {
;;;20     	GPIO_InitTypeDef GPIO_InitStructure;
;;;21     
;;;22     	/* 打开GPIO时钟 */
;;;23     		RCC_APB2PeriphClockCmd(RCC_ALL_AIR208, ENABLE);
000002  2101              MOVS     r1,#1
000004  201c              MOVS     r0,#0x1c
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;24     	
;;;25     	 //配置输出引脚
;;;26     		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;		    /* 设为输出口 */
00000a  2010              MOVS     r0,#0x10
00000c  f88d0003          STRB     r0,[sp,#3]
;;;27     		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;     	/* IO口最大速度 */
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;28     	
;;;29     		GPIO_InitStructure.GPIO_Pin   = GPIO_PIN_CTL;
000016  2040              MOVS     r0,#0x40
000018  f8ad0000          STRH     r0,[sp,#0]
;;;30     		GPIO_Init(GPIO_PORT_CTL, &GPIO_InitStructure);	
00001c  4669              MOV      r1,sp
00001e  4812              LDR      r0,|L1.104|
000020  f7fffffe          BL       GPIO_Init
;;;31     
;;;32     
;;;33     		GPIO_InitStructure.GPIO_Pin   = GPIO_PIN_POWER;
000024  f44f7080          MOV      r0,#0x100
000028  f8ad0000          STRH     r0,[sp,#0]
;;;34     		GPIO_Init(GPIO_PORT_POWER, &GPIO_InitStructure);
00002c  4669              MOV      r1,sp
00002e  480f              LDR      r0,|L1.108|
000030  f7fffffe          BL       GPIO_Init
;;;35     	
;;;36     	  //配置输入引脚
;;;37     		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;		/* 设为输入口 */
000034  2004              MOVS     r0,#4
000036  f88d0003          STRB     r0,[sp,#3]
;;;38     		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	      /* IO口最大速度 */
00003a  2003              MOVS     r0,#3
00003c  f88d0002          STRB     r0,[sp,#2]
;;;39     		
;;;40     		GPIO_InitStructure.GPIO_Pin   = GPIO_PIN_STA;
000040  2020              MOVS     r0,#0x20
000042  f8ad0000          STRH     r0,[sp,#0]
;;;41     		GPIO_Init(GPIO_PORT_STA, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4807              LDR      r0,|L1.104|
00004a  f7fffffe          BL       GPIO_Init
;;;42     		
;;;43     		  
;;;44     	  //内部变量清零
;;;45     //  	memset((char*)&GPRS_Para,0,sizeof(NETWORK_PARA));
;;;46     	  //初始化循环队列
;;;47         GPRS_InitQueue(&g_GPRSQueue);
00004e  4808              LDR      r0,|L1.112|
000050  f7fffffe          BL       GPRS_InitQueue
;;;48     		
;;;49     		//给定电源
;;;50     		AIR208_POWER_ON;
000054  f44f7080          MOV      r0,#0x100
000058  4904              LDR      r1,|L1.108|
00005a  3110              ADDS     r1,r1,#0x10
00005c  6008              STR      r0,[r1,#0]
;;;51     		//拉高开关使能
;;;52     		AIR208_CLT_ON;
00005e  2040              MOVS     r0,#0x40
000060  4901              LDR      r1,|L1.104|
000062  3114              ADDS     r1,r1,#0x14
000064  6008              STR      r0,[r1,#0]
;;;53     }
000066  bd08              POP      {r3,pc}
;;;54     
                          ENDP

                  |L1.104|
                          DCD      0x40010c00
                  |L1.108|
                          DCD      0x40010800
                  |L1.112|
                          DCD      g_GPRSQueue

                          AREA ||i.AIR208_InitPara||, CODE, READONLY, ALIGN=2

                  AIR208_InitPara PROC
;;;62     */
;;;63     void AIR208_InitPara(void)
000000  b510              PUSH     {r4,lr}
;;;64     {
;;;65     	//网络状态查询
;;;66     	bsp_StartTimer(NET_CHECK_TMR_ID, 10*TIME_SEC);
000002  f2427110          MOV      r1,#0x2710
000006  2013              MOVS     r0,#0x13
000008  f7fffffe          BL       bsp_StartTimer
;;;67     	GPRS_Para.NetDataSendFlag = 0;
00000c  2000              MOVS     r0,#0
00000e  4902              LDR      r1,|L2.24|
000010  74c8              STRB     r0,[r1,#0x13]
;;;68     	GPRS_Para.ImeiGetOKFlag = 0;
000012  7508              STRB     r0,[r1,#0x14]
;;;69     	GPRS_Para.NtpTimeOKFlag = 0;
000014  7588              STRB     r0,[r1,#0x16]
;;;70     }
000016  bd10              POP      {r4,pc}
;;;71     
                          ENDP

                  |L2.24|
                          DCD      GPRS_Para

                          AREA ||i.AIR208_Power_Ctl||, CODE, READONLY, ALIGN=2

                  AIR208_Power_Ctl PROC
;;;128    */
;;;129    uint8_t AIR208_Power_Ctl(uint8_t flag)
000000  4601              MOV      r1,r0
;;;130    {
;;;131    	if(flag)
000002  b121              CBZ      r1,|L3.14|
;;;132    	{
;;;133    		//打开电源
;;;134    		AIR208_POWER_ON;
000004  f44f7080          MOV      r0,#0x100
000008  4a04              LDR      r2,|L3.28|
00000a  6010              STR      r0,[r2,#0]
00000c  e004              B        |L3.24|
                  |L3.14|
;;;135    	}
;;;136    	else
;;;137    	{
;;;138    		//关闭电源
;;;139    		AIR208_POWER_OFF;
00000e  f44f7080          MOV      r0,#0x100
000012  4a02              LDR      r2,|L3.28|
000014  1d12              ADDS     r2,r2,#4
000016  6010              STR      r0,[r2,#0]
                  |L3.24|
;;;140    	}
;;;141    	return 0;
000018  2000              MOVS     r0,#0
;;;142    }
00001a  4770              BX       lr
;;;143    
                          ENDP

                  |L3.28|
                          DCD      0x40010810

                          AREA ||i.AIR208_Send||, CODE, READONLY, ALIGN=2

                  AIR208_Send PROC
;;;79     */
;;;80     uint8_t AIR208_Send(uint8_t *pBuf,uint16_t len,uint8_t addr)
000000  b570              PUSH     {r4-r6,lr}
;;;81     {
000002  f5ad6d81          SUB      sp,sp,#0x408
000006  4605              MOV      r5,r0
000008  460c              MOV      r4,r1
00000a  4616              MOV      r6,r2
;;;82     	ElemType_G e;
;;;83     	
;;;84     	{
;;;85     		//加入队列中
;;;86     		e.trycnt = TRY_CNT;
00000c  2002              MOVS     r0,#2
00000e  f88d0201          STRB     r0,[sp,#0x201]
;;;87     		e.addr   = addr; 
000012  f88d6202          STRB     r6,[sp,#0x202]
;;;88     		e.len    = len;
000016  9481              STR      r4,[sp,#0x204]
;;;89     		if(len > BUF_LEN)
000018  f5b47f00          CMP      r4,#0x200
00001c  dd03              BLE      |L4.38|
;;;90     		{
;;;91     			return 0;
00001e  2000              MOVS     r0,#0
                  |L4.32|
;;;92     		}
;;;93     		memset(e.buf,0,BUF_LEN);
;;;94     		memcpy(e.buf,pBuf,e.len);
;;;95     		GPRS_EnQueue(&g_GPRSQueue, e);
;;;96     		return 1;
;;;97       }
;;;98     }
000020  f50d6d81          ADD      sp,sp,#0x408
000024  bd70              POP      {r4-r6,pc}
                  |L4.38|
000026  f44f7100          MOV      r1,#0x200             ;93
00002a  a882              ADD      r0,sp,#0x208          ;93
00002c  f7fffffe          BL       __aeabi_memclr4
000030  4629              MOV      r1,r5                 ;94
000032  a882              ADD      r0,sp,#0x208          ;94
000034  9a81              LDR      r2,[sp,#0x204]        ;94
000036  f7fffffe          BL       __aeabi_memcpy
00003a  f44f72fe          MOV      r2,#0x1fc             ;95
00003e  a983              ADD      r1,sp,#0x20c          ;95
000040  4668              MOV      r0,sp                 ;95
000042  f7fffffe          BL       __aeabi_memcpy4
000046  4803              LDR      r0,|L4.84|
000048  a980              ADD      r1,sp,#0x200          ;95
00004a  c90e              LDM      r1,{r1-r3}            ;95
00004c  f7fffffe          BL       GPRS_EnQueue
000050  2001              MOVS     r0,#1                 ;96
000052  e7e5              B        |L4.32|
;;;99     
                          ENDP

                  |L4.84|
                          DCD      g_GPRSQueue

                          AREA ||i.AIR208_Switch_Check||, CODE, READONLY, ALIGN=2

                  AIR208_Switch_Check PROC
;;;108    */
;;;109    uint8_t AIR208_Switch_Check(void)
000000  b510              PUSH     {r4,lr}
;;;110    {
;;;111    	if(AIR208_STA)
000002  4805              LDR      r0,|L5.24|
000004  f7fffffe          BL       GPIO_ReadInputData
000008  f0100f20          TST      r0,#0x20
00000c  d001              BEQ      |L5.18|
;;;112    	{
;;;113    		return 1;
00000e  2001              MOVS     r0,#1
                  |L5.16|
;;;114      }
;;;115    	else
;;;116    	{
;;;117    		return 0;
;;;118      }
;;;119    }
000010  bd10              POP      {r4,pc}
                  |L5.18|
000012  2000              MOVS     r0,#0                 ;117
000014  e7fc              B        |L5.16|
;;;120    
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      0x40010c00

                          AREA ||i.AIR208_Switch_Ctl||, CODE, READONLY, ALIGN=2

                  AIR208_Switch_Ctl PROC
;;;151    */
;;;152    uint8_t AIR208_Switch_Ctl(uint8_t flag)
000000  b510              PUSH     {r4,lr}
;;;153    {
000002  4604              MOV      r4,r0
;;;154    	static uint8_t ctl_flag = 0;
;;;155    	if(flag)
000004  2c00              CMP      r4,#0
000006  d038              BEQ      |L6.122|
;;;156    	{
;;;157    		//开机
;;;158    		if(AIR208_Switch_Check())
000008  f7fffffe          BL       AIR208_Switch_Check
00000c  b120              CBZ      r0,|L6.24|
;;;159    		{
;;;160    			//已经开机
;;;161    			ctl_flag = 0;
00000e  2000              MOVS     r0,#0
000010  4936              LDR      r1,|L6.236|
000012  7008              STRB     r0,[r1,#0]
;;;162    			return 1;
000014  2001              MOVS     r0,#1
                  |L6.22|
;;;163        }
;;;164    		else
;;;165    		{
;;;166    			if(ctl_flag == 0)
;;;167    			{
;;;168    				//拉低2秒
;;;169    				AIR208_CLT_OFF;
;;;170    				bsp_StartTimer(NET_POWER_TMR_ID, 2*TIME_SEC);
;;;171    				ctl_flag = 1;
;;;172    			}
;;;173    			else if(ctl_flag == 1)
;;;174    			{
;;;175    				//等时间到
;;;176    				if(bsp_CheckTimer(NET_POWER_TMR_ID))
;;;177    				{
;;;178    					//拉高
;;;179    					AIR208_CLT_ON;
;;;180    					//用于判断3秒内是否开机，如果未开机，需要再次尝试关机再开机
;;;181    					bsp_StartTimer(NET_POWER_TMR_ID, 3*TIME_SEC);
;;;182    					ctl_flag = 2;
;;;183            }			
;;;184    			}
;;;185          else if(ctl_flag == 2)
;;;186    			{
;;;187    				if(bsp_CheckTimer(NET_POWER_TMR_ID))//等待3秒钟的时间，如果AIR208_Switch_Check()为假，则关闭208，再次循环开机
;;;188    				{
;;;189    					ctl_flag = 0;
;;;190            }
;;;191          }
;;;192    			//执行中
;;;193    			return 0xff;
;;;194        }
;;;195      }
;;;196    	else
;;;197    	{
;;;198    		//关机
;;;199    		if(AIR208_Switch_Check() == 0)
;;;200    		{
;;;201    			//已经关机
;;;202    			ctl_flag = 0;
;;;203    			return 0;
;;;204        }
;;;205    		else
;;;206    		{
;;;207    			if(ctl_flag == 0)
;;;208    			{
;;;209    				//拉低4秒
;;;210    				AIR208_CLT_OFF;
;;;211    				bsp_StartTimer(NET_POWER_TMR_ID, 4*TIME_SEC);
;;;212    				ctl_flag = 1;
;;;213    			}
;;;214    			else if(ctl_flag == 1)
;;;215    			{
;;;216    				//等时间到
;;;217    				if(bsp_CheckTimer(NET_POWER_TMR_ID))
;;;218    				{
;;;219    					//拉高
;;;220    					AIR208_CLT_ON;
;;;221    					//用于判断3秒内是否开机，如果未开机，需要再次尝试开机
;;;222    					bsp_StartTimer(NET_POWER_TMR_ID, 3*TIME_SEC);
;;;223    					ctl_flag = 2;
;;;224            }			
;;;225    			}
;;;226          else if(ctl_flag == 2)
;;;227    			{
;;;228    				if(bsp_CheckTimer(NET_POWER_TMR_ID))
;;;229    				{
;;;230    					ctl_flag = 0;
;;;231            }
;;;232          }
;;;233    			//执行中
;;;234    			return 0xff;
;;;235        }
;;;236      }
;;;237    }
000016  bd10              POP      {r4,pc}
                  |L6.24|
000018  4834              LDR      r0,|L6.236|
00001a  7800              LDRB     r0,[r0,#0]            ;166  ; ctl_flag
00001c  b958              CBNZ     r0,|L6.54|
00001e  2040              MOVS     r0,#0x40              ;169
000020  4933              LDR      r1,|L6.240|
000022  6008              STR      r0,[r1,#0]            ;169
000024  f44f61fa          MOV      r1,#0x7d0             ;170
000028  2012              MOVS     r0,#0x12              ;170
00002a  f7fffffe          BL       bsp_StartTimer
00002e  2001              MOVS     r0,#1                 ;171
000030  492e              LDR      r1,|L6.236|
000032  7008              STRB     r0,[r1,#0]            ;171
000034  e01f              B        |L6.118|
                  |L6.54|
000036  482d              LDR      r0,|L6.236|
000038  7800              LDRB     r0,[r0,#0]            ;173  ; ctl_flag
00003a  2801              CMP      r0,#1                 ;173
00003c  d110              BNE      |L6.96|
00003e  2012              MOVS     r0,#0x12              ;176
000040  f7fffffe          BL       bsp_CheckTimer
000044  b1b8              CBZ      r0,|L6.118|
000046  2040              MOVS     r0,#0x40              ;179
000048  4929              LDR      r1,|L6.240|
00004a  1d09              ADDS     r1,r1,#4              ;179
00004c  6008              STR      r0,[r1,#0]            ;179
00004e  f64031b8          MOV      r1,#0xbb8             ;181
000052  2012              MOVS     r0,#0x12              ;181
000054  f7fffffe          BL       bsp_StartTimer
000058  2002              MOVS     r0,#2                 ;182
00005a  4924              LDR      r1,|L6.236|
00005c  7008              STRB     r0,[r1,#0]            ;182
00005e  e00a              B        |L6.118|
                  |L6.96|
000060  4822              LDR      r0,|L6.236|
000062  7800              LDRB     r0,[r0,#0]            ;185  ; ctl_flag
000064  2802              CMP      r0,#2                 ;185
000066  d106              BNE      |L6.118|
000068  2012              MOVS     r0,#0x12              ;187
00006a  f7fffffe          BL       bsp_CheckTimer
00006e  b110              CBZ      r0,|L6.118|
000070  2000              MOVS     r0,#0                 ;189
000072  491e              LDR      r1,|L6.236|
000074  7008              STRB     r0,[r1,#0]            ;189
                  |L6.118|
000076  20ff              MOVS     r0,#0xff              ;193
000078  e7cd              B        |L6.22|
                  |L6.122|
00007a  f7fffffe          BL       AIR208_Switch_Check
00007e  b918              CBNZ     r0,|L6.136|
000080  2000              MOVS     r0,#0                 ;202
000082  491a              LDR      r1,|L6.236|
000084  7008              STRB     r0,[r1,#0]            ;202
000086  e7c6              B        |L6.22|
                  |L6.136|
000088  4818              LDR      r0,|L6.236|
00008a  7800              LDRB     r0,[r0,#0]            ;207  ; ctl_flag
00008c  b958              CBNZ     r0,|L6.166|
00008e  2040              MOVS     r0,#0x40              ;210
000090  4917              LDR      r1,|L6.240|
000092  6008              STR      r0,[r1,#0]            ;210
000094  f44f617a          MOV      r1,#0xfa0             ;211
000098  2012              MOVS     r0,#0x12              ;211
00009a  f7fffffe          BL       bsp_StartTimer
00009e  2001              MOVS     r0,#1                 ;212
0000a0  4912              LDR      r1,|L6.236|
0000a2  7008              STRB     r0,[r1,#0]            ;212
0000a4  e01f              B        |L6.230|
                  |L6.166|
0000a6  4811              LDR      r0,|L6.236|
0000a8  7800              LDRB     r0,[r0,#0]            ;214  ; ctl_flag
0000aa  2801              CMP      r0,#1                 ;214
0000ac  d110              BNE      |L6.208|
0000ae  2012              MOVS     r0,#0x12              ;217
0000b0  f7fffffe          BL       bsp_CheckTimer
0000b4  b1b8              CBZ      r0,|L6.230|
0000b6  2040              MOVS     r0,#0x40              ;220
0000b8  490d              LDR      r1,|L6.240|
0000ba  1d09              ADDS     r1,r1,#4              ;220
0000bc  6008              STR      r0,[r1,#0]            ;220
0000be  f64031b8          MOV      r1,#0xbb8             ;222
0000c2  2012              MOVS     r0,#0x12              ;222
0000c4  f7fffffe          BL       bsp_StartTimer
0000c8  2002              MOVS     r0,#2                 ;223
0000ca  4908              LDR      r1,|L6.236|
0000cc  7008              STRB     r0,[r1,#0]            ;223
0000ce  e00a              B        |L6.230|
                  |L6.208|
0000d0  4806              LDR      r0,|L6.236|
0000d2  7800              LDRB     r0,[r0,#0]            ;226  ; ctl_flag
0000d4  2802              CMP      r0,#2                 ;226
0000d6  d106              BNE      |L6.230|
0000d8  2012              MOVS     r0,#0x12              ;228
0000da  f7fffffe          BL       bsp_CheckTimer
0000de  b110              CBZ      r0,|L6.230|
0000e0  2000              MOVS     r0,#0                 ;230
0000e2  4902              LDR      r1,|L6.236|
0000e4  7008              STRB     r0,[r1,#0]            ;230
                  |L6.230|
0000e6  20ff              MOVS     r0,#0xff              ;234
0000e8  e795              B        |L6.22|
;;;238    
                          ENDP

0000ea  0000              DCW      0x0000
                  |L6.236|
                          DCD      ctl_flag
                  |L6.240|
                          DCD      0x40010c10

                          AREA ||i.AIR208_Task||, CODE, READONLY, ALIGN=2

                  AIR208_Task PROC
;;;981    */
;;;982    void AIR208_Task(void)
000000  b510              PUSH     {r4,lr}
;;;983    {
;;;984    	uint8_t ret = 0;
000002  2400              MOVS     r4,#0
;;;985    
;;;986    	//先打开电源
;;;987    	if(GPRS_Para.Air208RunStep == 0)
000004  482f              LDR      r0,|L7.196|
000006  7e00              LDRB     r0,[r0,#0x18]  ; GPRS_Para
000008  b958              CBNZ     r0,|L7.34|
;;;988    	{
;;;989    		AIR208_Power_Ctl(1);
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       AIR208_Power_Ctl
;;;990    		GPRS_Para.Air208RunStep = 1;
000010  2001              MOVS     r0,#1
000012  492c              LDR      r1,|L7.196|
000014  7608              STRB     r0,[r1,#0x18]
;;;991    		bsp_StartTimer(NET_POWER_TMR_ID, 2*TIME_SEC);
000016  f44f61fa          MOV      r1,#0x7d0
00001a  2012              MOVS     r0,#0x12
00001c  f7fffffe          BL       bsp_StartTimer
000020  e04f              B        |L7.194|
                  |L7.34|
;;;992    	}
;;;993    	//延时2秒在判断
;;;994    	else if(GPRS_Para.Air208RunStep == 1)
000022  4828              LDR      r0,|L7.196|
000024  7e00              LDRB     r0,[r0,#0x18]  ; GPRS_Para
000026  2801              CMP      r0,#1
000028  d10b              BNE      |L7.66|
;;;995    	{
;;;996    		//等时间到
;;;997    		if(bsp_CheckTimer(NET_POWER_TMR_ID))
00002a  2012              MOVS     r0,#0x12
00002c  f7fffffe          BL       bsp_CheckTimer
000030  2800              CMP      r0,#0
000032  d046              BEQ      |L7.194|
;;;998    		{
;;;999    			bsp_StopTimer(NET_POWER_TMR_ID);
000034  2012              MOVS     r0,#0x12
000036  f7fffffe          BL       bsp_StopTimer
;;;1000   			GPRS_Para.Air208RunStep = 2;
00003a  2002              MOVS     r0,#2
00003c  4921              LDR      r1,|L7.196|
00003e  7608              STRB     r0,[r1,#0x18]
000040  e03f              B        |L7.194|
                  |L7.66|
;;;1001   		}	
;;;1002   	}
;;;1003   	//开机
;;;1004   	else if(GPRS_Para.Air208RunStep == 2)
000042  4820              LDR      r0,|L7.196|
000044  7e00              LDRB     r0,[r0,#0x18]  ; GPRS_Para
000046  2802              CMP      r0,#2
000048  d110              BNE      |L7.108|
;;;1005   	{
;;;1006   		ret = AIR208_Switch_Ctl(1);
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       AIR208_Switch_Ctl
000050  4604              MOV      r4,r0
;;;1007   		if(ret == 1)
000052  2c01              CMP      r4,#1
000054  d135              BNE      |L7.194|
;;;1008   		{
;;;1009   			GPRS_Para.Air208RunStep = 3;
000056  2003              MOVS     r0,#3
000058  491a              LDR      r1,|L7.196|
00005a  7608              STRB     r0,[r1,#0x18]
;;;1010   			if(GPRS_Para.Air208RunSta == 0)
00005c  4608              MOV      r0,r1
00005e  7dc0              LDRB     r0,[r0,#0x17]  ; GPRS_Para
000060  bb20              CBNZ     r0,|L7.172|
;;;1011   			{
;;;1012   				GPRS_Para.Air208RunSta = 1;
000062  2001              MOVS     r0,#1
000064  75c8              STRB     r0,[r1,#0x17]
;;;1013   				//初始化软件部分
;;;1014   				AIR208_InitPara();
000066  f7fffffe          BL       AIR208_InitPara
00006a  e02a              B        |L7.194|
                  |L7.108|
;;;1015   			}
;;;1016   		}	
;;;1017   	}
;;;1018   	//正常收发任务
;;;1019   	else if(GPRS_Para.Air208RunStep == 3)
00006c  4815              LDR      r0,|L7.196|
00006e  7e00              LDRB     r0,[r0,#0x18]  ; GPRS_Para
000070  2803              CMP      r0,#3
000072  d10c              BNE      |L7.142|
;;;1020   	{
;;;1021   		//如果已经开机
;;;1022   		if((GPRS_Para.Air208RunSta)&&(AIR208_Switch_Check()))
000074  4813              LDR      r0,|L7.196|
000076  7dc0              LDRB     r0,[r0,#0x17]  ; GPRS_Para
000078  b128              CBZ      r0,|L7.134|
00007a  f7fffffe          BL       AIR208_Switch_Check
00007e  b110              CBZ      r0,|L7.134|
;;;1023   		{
;;;1024   			TransparentTask();
000080  f7fffffe          BL       TransparentTask
000084  e01d              B        |L7.194|
                  |L7.134|
;;;1025   		}
;;;1026   		//没开机
;;;1027   		else
;;;1028   		{
;;;1029   			GPRS_Para.Air208RunStep = 4;
000086  2004              MOVS     r0,#4
000088  490e              LDR      r1,|L7.196|
00008a  7608              STRB     r0,[r1,#0x18]
00008c  e019              B        |L7.194|
                  |L7.142|
;;;1030   		}
;;;1031   	}
;;;1032   	//执行关闭电源
;;;1033   	else if(GPRS_Para.Air208RunStep == 4)
00008e  480d              LDR      r0,|L7.196|
000090  7e00              LDRB     r0,[r0,#0x18]  ; GPRS_Para
000092  2804              CMP      r0,#4
000094  d10b              BNE      |L7.174|
;;;1034   	{
;;;1035   		AIR208_Power_Ctl(0);
000096  2000              MOVS     r0,#0
000098  f7fffffe          BL       AIR208_Power_Ctl
;;;1036   		bsp_StartTimer(NET_POWER_TMR_ID, 2*TIME_SEC);
00009c  f44f61fa          MOV      r1,#0x7d0
0000a0  2012              MOVS     r0,#0x12
0000a2  f7fffffe          BL       bsp_StartTimer
;;;1037   		GPRS_Para.Air208RunStep = 5;	
0000a6  2005              MOVS     r0,#5
0000a8  4906              LDR      r1,|L7.196|
0000aa  7608              STRB     r0,[r1,#0x18]
                  |L7.172|
0000ac  e009              B        |L7.194|
                  |L7.174|
;;;1038   	}
;;;1039   	//延时处理，在打开电源开机
;;;1040   	else
;;;1041   	{
;;;1042   		//等时间到
;;;1043   		if(bsp_CheckTimer(NET_POWER_TMR_ID))
0000ae  2012              MOVS     r0,#0x12
0000b0  f7fffffe          BL       bsp_CheckTimer
0000b4  b128              CBZ      r0,|L7.194|
;;;1044   		{
;;;1045   			bsp_StopTimer(NET_POWER_TMR_ID);
0000b6  2012              MOVS     r0,#0x12
0000b8  f7fffffe          BL       bsp_StopTimer
;;;1046   			GPRS_Para.Air208RunStep = 0;
0000bc  2000              MOVS     r0,#0
0000be  4901              LDR      r1,|L7.196|
0000c0  7608              STRB     r0,[r1,#0x18]
                  |L7.194|
;;;1047   		}	
;;;1048   	}
;;;1049   }
0000c2  bd10              POP      {r4,pc}
;;;1050   
                          ENDP

                  |L7.196|
                          DCD      GPRS_Para

                          AREA ||i.AliEnQueue||, CODE, READONLY, ALIGN=2

                  AliEnQueue PROC
;;;1059   */
;;;1060   void AliEnQueue(uint16_t Func, uint16_t Address)
000000  b530              PUSH     {r4,r5,lr}
;;;1061   {
000002  b08b              SUB      sp,sp,#0x2c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;1062   	  ElemType e;
;;;1063   		e.slave        = 1;
000008  2001              MOVS     r0,#1
00000a  f8ad0010          STRH     r0,[sp,#0x10]
;;;1064   		e.func         = Func;
00000e  f8ad4012          STRH     r4,[sp,#0x12]
;;;1065   		e.addr         = Address;	 	                    //保持寄存器的首地址，显示缓冲区
000012  f8ad5014          STRH     r5,[sp,#0x14]
;;;1066   		e.cnt          = 1;                            //根据从机个数确定写入的寄存器个数
000016  f8ad0016          STRH     r0,[sp,#0x16]
;;;1067   		e.startTimeout = bsp_GetRunTime();
00001a  f7fffffe          BL       bsp_GetRunTime
00001e  9006              STR      r0,[sp,#0x18]
;;;1068   		e.timeout      = 1000;	                        //命令 超时时间
000020  f44f707a          MOV      r0,#0x3e8
000024  9007              STR      r0,[sp,#0x1c]
;;;1069   		e.startPeriod  = bsp_GetRunTime();
000026  f7fffffe          BL       bsp_GetRunTime
00002a  9008              STR      r0,[sp,#0x20]
;;;1070   		e.period       = 5*1000;	                      //命令发送周期
00002c  f2413088          MOV      r0,#0x1388
000030  9009              STR      r0,[sp,#0x24]
;;;1071   		e.commCnt      = PERIOD_CNT;                    //不可删除命令
000032  f64f70ff          MOV      r0,#0xffff
000036  f8ad0028          STRH     r0,[sp,#0x28]
;;;1072   		e.timeoutcnt   = 0;		                          //错误计数清零
00003a  2000              MOVS     r0,#0
00003c  f8ad002a          STRH     r0,[sp,#0x2a]
;;;1073   		
;;;1074   		T_EnQueue(&Trans_Queue, e);
000040  a807              ADD      r0,sp,#0x1c
000042  c80f              LDM      r0,{r0-r3}
000044  e88d000f          STM      sp,{r0-r3}
000048  4803              LDR      r0,|L8.88|
00004a  a904              ADD      r1,sp,#0x10
00004c  c90e              LDM      r1,{r1-r3}
00004e  f7fffffe          BL       T_EnQueue
;;;1075   
;;;1076   }
000052  b00b              ADD      sp,sp,#0x2c
000054  bd30              POP      {r4,r5,pc}
;;;1077   
                          ENDP

000056  0000              DCW      0x0000
                  |L8.88|
                          DCD      Trans_Queue

                          AREA ||i.FeiyanIMEI||, CODE, READONLY, ALIGN=2

                  FeiyanIMEI PROC
;;;619    */
;;;620    char *FeiyanIMEI(char *sIMEI, char *dst)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;621    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;622    	  char *p = sIMEI;
000008  462f              MOV      r7,r5
;;;623        char *q = dst;
00000a  4626              MOV      r6,r4
;;;624    		*(q+30) = '\0';//将dst字符串最后一位写成结束标记
00000c  2000              MOVS     r0,#0
00000e  77b0              STRB     r0,[r6,#0x1e]
;;;625        strcat(q, "a1DNlQwHT07&dn=");
000010  a105              ADR      r1,|L9.40|
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       strcat
;;;626        strcat(q, p);
000018  4639              MOV      r1,r7
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       strcat
;;;627        return dst;
000020  4620              MOV      r0,r4
;;;628    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;629    
                          ENDP

000026  0000              DCW      0x0000
                  |L9.40|
000028  6131444e          DCB      "a1DNlQwHT07&dn=",0
00002c  6c517748
000030  54303726
000034  646e3d00

                          AREA ||i.FyIMEI||, CODE, READONLY, ALIGN=2

                  FyIMEI PROC
;;;598    */
;;;599    void FyIMEI(uint8_t *pAim, uint8_t array[])
000000  b570              PUSH     {r4-r6,lr}
;;;600    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;601    	char *pBuf;
;;;602    	pBuf = (char*)mymalloc(SRAMIN, 16);
000006  2110              MOVS     r1,#0x10
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       mymalloc
00000e  4606              MOV      r6,r0
;;;603    	memset(pBuf, 0 ,16);
000010  2110              MOVS     r1,#0x10
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       __aeabi_memclr
;;;604    	//strcat((char*)array,"https://g.aliplus.com/ilop/d.html?locale=all&pk=a1DNlQwHT07&dn=");//通用plc
;;;605    	//strcat((char*)array,"https://g.aliplus.com/ilop/d.html?locale=all&pk=a1d6JgYInkz&dn=");//北方电磁热风机
;;;606    	strcat((char*)array,"a1DNlQwHT07&dn=");//新规划plc只接收后面30个字符，前面的plc固定写死
000018  a108              ADR      r1,|L10.60|
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       strcat
;;;607    	strncpy(pBuf, (const char*)pAim, 15);
000020  220f              MOVS     r2,#0xf
000022  4621              MOV      r1,r4
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       strncpy
;;;608    	strcat((char*)array,(char*)pBuf);
00002a  4631              MOV      r1,r6
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       strcat
;;;609    	myfree(SRAMIN,(char*)pBuf);
000032  4631              MOV      r1,r6
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       myfree
;;;610    }
00003a  bd70              POP      {r4-r6,pc}
;;;611    
                          ENDP

                  |L10.60|
00003c  6131444e          DCB      "a1DNlQwHT07&dn=",0
000040  6c517748
000044  54303726
000048  646e3d00

                          AREA ||i.GetCsqSend||, CODE, READONLY, ALIGN=2

                  GetCsqSend PROC
;;;584    */
;;;585    void GetCsqSend(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;586    {
;;;587    	char  SendBuf[] = {"rrpc,getcsq\r\n"};
000002  a307              ADR      r3,|L11.32|
000004  cb0f              LDM      r3,{r0-r3}
000006  e88d000f          STM      sp,{r0-r3}
;;;588    	AIR208_Send((uint8_t*)SendBuf,strlen((char*)SendBuf),0);
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       strlen
000010  b284              UXTH     r4,r0
000012  2200              MOVS     r2,#0
000014  4621              MOV      r1,r4
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       AIR208_Send
;;;589    }
00001c  bd1f              POP      {r0-r4,pc}
;;;590    
                          ENDP

00001e  0000              DCW      0x0000
                  |L11.32|
000020  72727063          DCB      "rrpc,getcsq\r\n",0
000024  2c676574
000028  6373710d
00002c  0a00    
00002e  00                DCB      0
00002f  00                DCB      0

                          AREA ||i.GetICCIDSend||, CODE, READONLY, ALIGN=2

                  GetICCIDSend PROC
;;;637    */
;;;638    void GetICCIDSend(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;639    {
;;;640    	char  SendBuf[] = {"rrpc,geticcid\r\n"};
000002  a308              ADR      r3,|L12.36|
000004  cb0f              LDM      r3,{r0-r3}
000006  e88d000f          STM      sp,{r0-r3}
;;;641    	if(GPRS_Para.IccidGetOKFlag == 0) AIR208_Send((uint8_t*)SendBuf,strlen((char*)SendBuf),0);
00000a  480a              LDR      r0,|L12.52|
00000c  7d40              LDRB     r0,[r0,#0x15]  ; GPRS_Para
00000e  b940              CBNZ     r0,|L12.34|
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       strlen
000016  b284              UXTH     r4,r0
000018  2200              MOVS     r2,#0
00001a  4621              MOV      r1,r4
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       AIR208_Send
                  |L12.34|
;;;642    	//comSendBuf(UART208,(uint8_t*)SendBuf,strlen((char*)SendBuf));
;;;643    }
000022  bd1f              POP      {r0-r4,pc}
;;;644    
                          ENDP

                  |L12.36|
000024  72727063          DCB      "rrpc,geticcid\r\n",0
000028  2c676574
00002c  69636369
000030  640d0a00
                  |L12.52|
                          DCD      GPRS_Para

                          AREA ||i.GetIMEISend||, CODE, READONLY, ALIGN=2

                  GetIMEISend PROC
;;;569    */
;;;570    void GetIMEISend(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;571    {
;;;572    	char  SendBuf[] = {"rrpc,getimei\r\n"};
000002  a308              ADR      r3,|L13.36|
000004  cb0f              LDM      r3,{r0-r3}
000006  e88d000f          STM      sp,{r0-r3}
;;;573    	if(GPRS_Para.ImeiGetOKFlag == 0)AIR208_Send((uint8_t*)SendBuf,strlen((char*)SendBuf),0);
00000a  480a              LDR      r0,|L13.52|
00000c  7d00              LDRB     r0,[r0,#0x14]  ; GPRS_Para
00000e  b940              CBNZ     r0,|L13.34|
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       strlen
000016  b284              UXTH     r4,r0
000018  2200              MOVS     r2,#0
00001a  4621              MOV      r1,r4
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       AIR208_Send
                  |L13.34|
;;;574    }
000022  bd1f              POP      {r0-r4,pc}
;;;575    
                          ENDP

                  |L13.36|
000024  72727063          DCB      "rrpc,getimei\r\n",0
000028  2c676574
00002c  696d6569
000030  0d0a00  
000033  00                DCB      0
                  |L13.52|
                          DCD      GPRS_Para

                          AREA ||i.GetNtpTimeSend||, CODE, READONLY, ALIGN=2

                  GetNtpTimeSend PROC
;;;555    */
;;;556    void GetNtpTimeSend(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;557    {
;;;558    	char  SendBuf[] = {"rrpc,gettime\r\n"};
000002  a307              ADR      r3,|L14.32|
000004  cb0f              LDM      r3,{r0-r3}
000006  e88d000f          STM      sp,{r0-r3}
;;;559    	AIR208_Send((uint8_t*)SendBuf,strlen((char*)SendBuf),0);
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       strlen
000010  b284              UXTH     r4,r0
000012  2200              MOVS     r2,#0
000014  4621              MOV      r1,r4
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       AIR208_Send
;;;560    }
00001c  bd1f              POP      {r0-r4,pc}
;;;561    
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
000020  72727063          DCB      "rrpc,gettime\r\n",0
000024  2c676574
000028  74696d65
00002c  0d0a00  
00002f  00                DCB      0

                          AREA ||i.NetCheckSend||, CODE, READONLY, ALIGN=2

                  NetCheckSend PROC
;;;541    */
;;;542    void NetCheckSend(void)
000000  b510              PUSH     {r4,lr}
;;;543    {
000002  b086              SUB      sp,sp,#0x18
;;;544    	char  SendBuf[] = {"rrpc,netstatus\r\n"};
000004  2214              MOVS     r2,#0x14
000006  a107              ADR      r1,|L15.36|
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;545    	AIR208_Send((uint8_t*)SendBuf,strlen((char*)SendBuf),0);
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       strlen
000014  b284              UXTH     r4,r0
000016  2200              MOVS     r2,#0
000018  4621              MOV      r1,r4
00001a  a801              ADD      r0,sp,#4
00001c  f7fffffe          BL       AIR208_Send
;;;546    }
000020  b006              ADD      sp,sp,#0x18
000022  bd10              POP      {r4,pc}
;;;547    
                          ENDP

                  |L15.36|
000024  72727063          DCB      "rrpc,netstatus\r\n",0
000028  2c6e6574
00002c  73746174
000030  75730d0a
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0

                          AREA ||i.Parse_208||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  Parse_208 PROC
;;;1085   */
;;;1086   void Parse_208(const char *JSON)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;1087   {
000004  b086              SUB      sp,sp,#0x18
;;;1088   	uint16_t i;
;;;1089   	char  pBuf[6] = {0};
000006  2000              MOVS     r0,#0
000008  9004              STR      r0,[sp,#0x10]
00000a  9005              STR      r0,[sp,#0x14]
;;;1090   	char  str[4]  = {0};
00000c  9003              STR      r0,[sp,#0xc]
;;;1091   	cJSON *json = NULL, *cjson_params = NULL;
00000e  2600              MOVS     r6,#0
000010  9002              STR      r0,[sp,#8]
;;;1092   	cJSON *cjson_params_d460 = NULL;
000012  2700              MOVS     r7,#0
;;;1093   	cJSON *cjson_params_d461 = NULL;
000014  4680              MOV      r8,r0
;;;1094   	cJSON *cjson_params_d506 = NULL;
000016  4681              MOV      r9,r0
;;;1095   	cJSON *cjson_params_d507 = NULL;
000018  4682              MOV      r10,r0
;;;1096   	cJSON *cjson_params_d546 = NULL;
00001a  4683              MOV      r11,r0
;;;1097   	cJSON *cjson_params_d547 = NULL;
00001c  9001              STR      r0,[sp,#4]
;;;1098   	cJSON *cjson_params_d    = NULL;
00001e  2500              MOVS     r5,#0
;;;1099   	
;;;1100   	if(UART208_tUART.usRxCount > 68)
000020  4895              LDR      r0,|L16.632|
000022  8bc0              LDRH     r0,[r0,#0x1e]  ; g_tUart2
000024  2844              CMP      r0,#0x44
000026  dd6e              BLE      |L16.262|
;;;1101   	{
;;;1102   		json = cJSON_Parse(JSON);//解析串口的json
000028  9806              LDR      r0,[sp,#0x18]
00002a  f7fffffe          BL       cJSON_Parse
00002e  4606              MOV      r6,r0
;;;1103   		if (json)
000030  2e00              CMP      r6,#0
000032  d068              BEQ      |L16.262|
;;;1104   		{
;;;1105   			cjson_params = cJSON_GetObjectItem(json,"params");
000034  a191              ADR      r1,|L16.636|
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       cJSON_GetObjectItem
00003c  9002              STR      r0,[sp,#8]
;;;1106   				
;;;1107   			if(cjson_params!=NULL)
00003e  9802              LDR      r0,[sp,#8]
000040  2800              CMP      r0,#0
000042  d07c              BEQ      |L16.318|
;;;1108   			{	
;;;1109   					//M寄存器
;;;1110   				for(i=500; i<528; i++)
000044  f44f74fa          MOV      r4,#0x1f4
000048  e056              B        |L16.248|
                  |L16.74|
;;;1111   				{
;;;1112   					strcat(pBuf, "m");
00004a  a18e              ADR      r1,|L16.644|
00004c  a804              ADD      r0,sp,#0x10
00004e  f7fffffe          BL       strcat
;;;1113   					sprintf(str, "%d", i);
000052  4622              MOV      r2,r4
000054  a18c              ADR      r1,|L16.648|
000056  a803              ADD      r0,sp,#0xc
000058  f7fffffe          BL       __2sprintf
;;;1114   					strcat(pBuf, str);
00005c  a903              ADD      r1,sp,#0xc
00005e  a804              ADD      r0,sp,#0x10
000060  f7fffffe          BL       strcat
;;;1115   					cjson_params_d = cJSON_GetObjectItem(cjson_params, pBuf);
000064  a904              ADD      r1,sp,#0x10
000066  9802              LDR      r0,[sp,#8]
000068  f7fffffe          BL       cJSON_GetObjectItem
00006c  4605              MOV      r5,r0
;;;1116   					memset(pBuf,NULL,sizeof(pBuf));
00006e  2000              MOVS     r0,#0
000070  9004              STR      r0,[sp,#0x10]
000072  9005              STR      r0,[sp,#0x14]
;;;1117   					if(cjson_params_d != NULL)
000074  b3ed              CBZ      r5,|L16.242|
;;;1118   					{
;;;1119   						if(cjson_params_d->valueint)
000076  6968              LDR      r0,[r5,#0x14]
000078  b1d8              CBZ      r0,|L16.178|
;;;1120   						{
;;;1121   							g_PduGprs.BitCoil[i/16] |= BIT(i%16);
00007a  17e2              ASRS     r2,r4,#31
00007c  eb047212          ADD      r2,r4,r2,LSR #28
000080  1113              ASRS     r3,r2,#4
000082  4a82              LDR      r2,|L16.652|
000084  f8322013          LDRH     r2,[r2,r3,LSL #1]
000088  4621              MOV      r1,r4
00008a  17e3              ASRS     r3,r4,#31
00008c  eb047313          ADD      r3,r4,r3,LSR #28
000090  111b              ASRS     r3,r3,#4
000092  eba41c03          SUB      r12,r4,r3,LSL #4
000096  2301              MOVS     r3,#1
000098  fa03f30c          LSL      r3,r3,r12
00009c  431a              ORRS     r2,r2,r3
00009e  4620              MOV      r0,r4
0000a0  17e3              ASRS     r3,r4,#31
0000a2  eb047313          ADD      r3,r4,r3,LSR #28
0000a6  ea4f1c23          ASR      r12,r3,#4
0000aa  4b78              LDR      r3,|L16.652|
0000ac  f823201c          STRH     r2,[r3,r12,LSL #1]
0000b0  e01a              B        |L16.232|
                  |L16.178|
;;;1122   						}
;;;1123   						else
;;;1124   						{
;;;1125   							g_PduGprs.BitCoil[i/16] &= ~BIT(i%16);
0000b2  17e2              ASRS     r2,r4,#31
0000b4  eb047212          ADD      r2,r4,r2,LSR #28
0000b8  1113              ASRS     r3,r2,#4
0000ba  4a74              LDR      r2,|L16.652|
0000bc  f8322013          LDRH     r2,[r2,r3,LSL #1]
0000c0  4621              MOV      r1,r4
0000c2  17e3              ASRS     r3,r4,#31
0000c4  eb047313          ADD      r3,r4,r3,LSR #28
0000c8  111b              ASRS     r3,r3,#4
0000ca  eba41c03          SUB      r12,r4,r3,LSL #4
0000ce  2301              MOVS     r3,#1
0000d0  fa03f30c          LSL      r3,r3,r12
0000d4  439a              BICS     r2,r2,r3
0000d6  4620              MOV      r0,r4
0000d8  17e3              ASRS     r3,r4,#31
0000da  eb047313          ADD      r3,r4,r3,LSR #28
0000de  ea4f1c23          ASR      r12,r3,#4
0000e2  4b6a              LDR      r3,|L16.652|
0000e4  f823201c          STRH     r2,[r3,r12,LSL #1]
                  |L16.232|
;;;1126   						}						
;;;1127   						AliEnQueue(MB_BITCOIL_WT, i);
0000e8  4621              MOV      r1,r4
0000ea  2005              MOVS     r0,#5
0000ec  f7fffffe          BL       AliEnQueue
;;;1128   						break;
0000f0  e005              B        |L16.254|
                  |L16.242|
0000f2  e7ff              B        |L16.244|
                  |L16.244|
0000f4  1c60              ADDS     r0,r4,#1              ;1110
0000f6  b284              UXTH     r4,r0                 ;1110
                  |L16.248|
0000f8  f5b47f04          CMP      r4,#0x210             ;1110
0000fc  dba5              BLT      |L16.74|
                  |L16.254|
0000fe  bf00              NOP      
;;;1129   					}		
;;;1130   				}
;;;1131   				//D寄存器
;;;1132   				for(i=323; i<454; i++)
000100  f2401443          MOV      r4,#0x143
000104  e025              B        |L16.338|
                  |L16.262|
000106  e0b3              B        |L16.624|
                  |L16.264|
;;;1133   				{
;;;1134   					strcat(pBuf, "d");
000108  a161              ADR      r1,|L16.656|
00010a  a804              ADD      r0,sp,#0x10
00010c  f7fffffe          BL       strcat
;;;1135   					sprintf(str, "%d", i);
000110  4622              MOV      r2,r4
000112  a15d              ADR      r1,|L16.648|
000114  a803              ADD      r0,sp,#0xc
000116  f7fffffe          BL       __2sprintf
;;;1136   					strcat(pBuf, str);
00011a  a903              ADD      r1,sp,#0xc
00011c  a804              ADD      r0,sp,#0x10
00011e  f7fffffe          BL       strcat
;;;1137   					cjson_params_d = cJSON_GetObjectItem(cjson_params,pBuf);
000122  a904              ADD      r1,sp,#0x10
000124  9802              LDR      r0,[sp,#8]
000126  f7fffffe          BL       cJSON_GetObjectItem
00012a  4605              MOV      r5,r0
;;;1138   					memset(pBuf,NULL,sizeof(pBuf));
00012c  2000              MOVS     r0,#0
00012e  9004              STR      r0,[sp,#0x10]
000130  9005              STR      r0,[sp,#0x14]
;;;1139   					if(cjson_params_d != NULL)
000132  b165              CBZ      r5,|L16.334|
;;;1140   					{
;;;1141   						g_PduGprs.RegHold[i] = cjson_params_d->valueint;	
000134  8aa8              LDRH     r0,[r5,#0x14]
000136  b281              UXTH     r1,r0
000138  4854              LDR      r0,|L16.652|
00013a  3068              ADDS     r0,r0,#0x68
00013c  e000              B        |L16.320|
                  |L16.318|
00013e  e094              B        |L16.618|
                  |L16.320|
000140  f8201014          STRH     r1,[r0,r4,LSL #1]
;;;1142   						AliEnQueue(MB_REGHOLD_WT, i);
000144  4621              MOV      r1,r4
000146  2006              MOVS     r0,#6
000148  f7fffffe          BL       AliEnQueue
;;;1143   						break;
00014c  e004              B        |L16.344|
                  |L16.334|
00014e  1c60              ADDS     r0,r4,#1              ;1132
000150  b284              UXTH     r4,r0                 ;1132
                  |L16.338|
000152  f5b47fe3          CMP      r4,#0x1c6             ;1132
000156  dbd7              BLT      |L16.264|
                  |L16.344|
000158  bf00              NOP      
;;;1144   					}		
;;;1145   				}
;;;1146   				cjson_params_d460 = cJSON_GetObjectItem(cjson_params,"d460");
00015a  a14e              ADR      r1,|L16.660|
00015c  9802              LDR      r0,[sp,#8]
00015e  f7fffffe          BL       cJSON_GetObjectItem
000162  4607              MOV      r7,r0
;;;1147   				if(cjson_params_d460 != NULL)
000164  b157              CBZ      r7,|L16.380|
;;;1148   				{
;;;1149   					g_PduGprs.RegHold[460] = cjson_params_d460->valueint;
000166  8ab8              LDRH     r0,[r7,#0x14]
000168  b281              UXTH     r1,r0
00016a  4848              LDR      r0,|L16.652|
00016c  1f00              SUBS     r0,r0,#4
00016e  f8a01404          STRH     r1,[r0,#0x404]
;;;1150   					AliEnQueue(MB_REGHOLD_WT, 460);					
000172  f44f71e6          MOV      r1,#0x1cc
000176  2006              MOVS     r0,#6
000178  f7fffffe          BL       AliEnQueue
                  |L16.380|
;;;1151   				}	
;;;1152   				cjson_params_d461 = cJSON_GetObjectItem(cjson_params,"d461");
00017c  a147              ADR      r1,|L16.668|
00017e  9802              LDR      r0,[sp,#8]
000180  f7fffffe          BL       cJSON_GetObjectItem
000184  4680              MOV      r8,r0
;;;1153   				if(cjson_params_d461 != NULL)
000186  f1b80f00          CMP      r8,#0
00018a  d00b              BEQ      |L16.420|
;;;1154   				{
;;;1155   					g_PduGprs.RegHold[461] = cjson_params_d461->valueint;
00018c  f8b80014          LDRH     r0,[r8,#0x14]
000190  b281              UXTH     r1,r0
000192  483e              LDR      r0,|L16.652|
000194  1f00              SUBS     r0,r0,#4
000196  f8a01406          STRH     r1,[r0,#0x406]
;;;1156   					AliEnQueue(MB_REGHOLD_WT, 461);					
00019a  f24011cd          MOV      r1,#0x1cd
00019e  2006              MOVS     r0,#6
0001a0  f7fffffe          BL       AliEnQueue
                  |L16.420|
;;;1157   				}
;;;1158   				cjson_params_d506 = cJSON_GetObjectItem(cjson_params,"d506");
0001a4  a13f              ADR      r1,|L16.676|
0001a6  9802              LDR      r0,[sp,#8]
0001a8  f7fffffe          BL       cJSON_GetObjectItem
0001ac  4681              MOV      r9,r0
;;;1159   				if(cjson_params_d506 != NULL)
0001ae  f1b90f00          CMP      r9,#0
0001b2  d010              BEQ      |L16.470|
;;;1160   				{
;;;1161   					g_PduGprs.RegHold[506] = cjson_params_d506->valueint * 10;
0001b4  f8d90014          LDR      r0,[r9,#0x14]
0001b8  eb000080          ADD      r0,r0,r0,LSL #2
0001bc  f64f71ff          MOV      r1,#0xffff
0001c0  ea010140          AND      r1,r1,r0,LSL #1
0001c4  4831              LDR      r0,|L16.652|
0001c6  1f00              SUBS     r0,r0,#4
0001c8  f8a01460          STRH     r1,[r0,#0x460]
;;;1162   					AliEnQueue(MB_REGHOLD_WT, 506);					
0001cc  f44f71fd          MOV      r1,#0x1fa
0001d0  2006              MOVS     r0,#6
0001d2  f7fffffe          BL       AliEnQueue
                  |L16.470|
;;;1163   				}
;;;1164   				cjson_params_d507 = cJSON_GetObjectItem(cjson_params,"d507");
0001d6  a135              ADR      r1,|L16.684|
0001d8  9802              LDR      r0,[sp,#8]
0001da  f7fffffe          BL       cJSON_GetObjectItem
0001de  4682              MOV      r10,r0
;;;1165   				if(cjson_params_d507 != NULL)
0001e0  f1ba0f00          CMP      r10,#0
0001e4  d010              BEQ      |L16.520|
;;;1166   				{
;;;1167   					g_PduGprs.RegHold[507] = cjson_params_d507->valueint * 10;
0001e6  f8da0014          LDR      r0,[r10,#0x14]
0001ea  eb000080          ADD      r0,r0,r0,LSL #2
0001ee  f64f71ff          MOV      r1,#0xffff
0001f2  ea010140          AND      r1,r1,r0,LSL #1
0001f6  4825              LDR      r0,|L16.652|
0001f8  1f00              SUBS     r0,r0,#4
0001fa  f8a01462          STRH     r1,[r0,#0x462]
;;;1168   					AliEnQueue(MB_REGHOLD_WT, 507);					
0001fe  f24011fb          MOV      r1,#0x1fb
000202  2006              MOVS     r0,#6
000204  f7fffffe          BL       AliEnQueue
                  |L16.520|
;;;1169   				}
;;;1170   				cjson_params_d546 = cJSON_GetObjectItem(cjson_params,"d546");
000208  a12a              ADR      r1,|L16.692|
00020a  9802              LDR      r0,[sp,#8]
00020c  f7fffffe          BL       cJSON_GetObjectItem
000210  4683              MOV      r11,r0
;;;1171   				if(cjson_params_d546 != NULL)
000212  f1bb0f00          CMP      r11,#0
000216  d010              BEQ      |L16.570|
;;;1172   				{
;;;1173   					g_PduGprs.RegHold[546] = cjson_params_d546->valueint * 10;
000218  f8db0014          LDR      r0,[r11,#0x14]
00021c  eb000080          ADD      r0,r0,r0,LSL #2
000220  f64f71ff          MOV      r1,#0xffff
000224  ea010140          AND      r1,r1,r0,LSL #1
000228  4818              LDR      r0,|L16.652|
00022a  1f00              SUBS     r0,r0,#4
00022c  f8a014b0          STRH     r1,[r0,#0x4b0]
;;;1174   					AliEnQueue(MB_REGHOLD_WT, 546);					
000230  f2402122          MOV      r1,#0x222
000234  2006              MOVS     r0,#6
000236  f7fffffe          BL       AliEnQueue
                  |L16.570|
;;;1175   				}
;;;1176   				cjson_params_d547 = cJSON_GetObjectItem(cjson_params,"d547");
00023a  a120              ADR      r1,|L16.700|
00023c  9802              LDR      r0,[sp,#8]
00023e  f7fffffe          BL       cJSON_GetObjectItem
000242  9001              STR      r0,[sp,#4]
;;;1177   				if(cjson_params_d547 != NULL)
000244  9801              LDR      r0,[sp,#4]
000246  b180              CBZ      r0,|L16.618|
;;;1178   				{
;;;1179   					g_PduGprs.RegHold[547] = cjson_params_d547->valueint * 10;
000248  9801              LDR      r0,[sp,#4]
00024a  6940              LDR      r0,[r0,#0x14]
00024c  eb000080          ADD      r0,r0,r0,LSL #2
000250  f64f71ff          MOV      r1,#0xffff
000254  ea010140          AND      r1,r1,r0,LSL #1
000258  480c              LDR      r0,|L16.652|
00025a  1f00              SUBS     r0,r0,#4
00025c  f8a014b2          STRH     r1,[r0,#0x4b2]
;;;1180   					AliEnQueue(MB_REGHOLD_WT, 547);					
000260  f2402123          MOV      r1,#0x223
000264  2006              MOVS     r0,#6
000266  f7fffffe          BL       AliEnQueue
                  |L16.618|
;;;1181   				}			
;;;1182   				
;;;1183   			}
;;;1184   			cJSON_Delete(json); // 释放内存
00026a  4630              MOV      r0,r6
00026c  f7fffffe          BL       cJSON_Delete
                  |L16.624|
;;;1185   	}
;;;1186   	}
;;;1187   }
000270  b007              ADD      sp,sp,#0x1c
000272  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

000276  0000              DCW      0x0000
                  |L16.632|
                          DCD      g_tUart2
                  |L16.636|
00027c  70617261          DCB      "params",0
000280  6d7300  
000283  00                DCB      0
                  |L16.644|
000284  6d00              DCB      "m",0
000286  00                DCB      0
000287  00                DCB      0
                  |L16.648|
000288  256400            DCB      "%d",0
00028b  00                DCB      0
                  |L16.652|
                          DCD      g_PduGprs+0x4
                  |L16.656|
000290  6400              DCB      "d",0
000292  00                DCB      0
000293  00                DCB      0
                  |L16.660|
000294  64343630          DCB      "d460",0
000298  00      
000299  00                DCB      0
00029a  00                DCB      0
00029b  00                DCB      0
                  |L16.668|
00029c  64343631          DCB      "d461",0
0002a0  00      
0002a1  00                DCB      0
0002a2  00                DCB      0
0002a3  00                DCB      0
                  |L16.676|
0002a4  64353036          DCB      "d506",0
0002a8  00      
0002a9  00                DCB      0
0002aa  00                DCB      0
0002ab  00                DCB      0
                  |L16.684|
0002ac  64353037          DCB      "d507",0
0002b0  00      
0002b1  00                DCB      0
0002b2  00                DCB      0
0002b3  00                DCB      0
                  |L16.692|
0002b4  64353436          DCB      "d546",0
0002b8  00      
0002b9  00                DCB      0
0002ba  00                DCB      0
0002bb  00                DCB      0
                  |L16.700|
0002bc  64353437          DCB      "d547",0
0002c0  00      
0002c1  00                DCB      0
0002c2  00                DCB      0
0002c3  00                DCB      0

                          AREA ||i.ResolveCSQ||, CODE, READONLY, ALIGN=2

                  ResolveCSQ PROC
;;;286    */
;;;287    uint8_t ResolveCSQ(uint8_t *pBuf)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;288    {
000004  4606              MOV      r6,r0
;;;289    	uint8_t  cnt = 0;
000006  2500              MOVS     r5,#0
;;;290    	char     Val[5];
;;;291    	uint16_t temp = 0;
000008  2700              MOVS     r7,#0
;;;292    	char     *p;
;;;293    	
;;;294    		//去掉帧头
;;;295    		p = strstr((char*)pBuf,"rrpc,getcsq,");
00000a  a10e              ADR      r1,|L17.68|
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       strstr
000012  4604              MOV      r4,r0
;;;296    		p+=12;
000014  340c              ADDS     r4,r4,#0xc
;;;297    	
;;;298    	  cnt = 0;
000016  bf00              NOP      
;;;299    	  memset(Val,0,5);
000018  2000              MOVS     r0,#0
00001a  9000              STR      r0,[sp,#0]
00001c  9001              STR      r0,[sp,#4]
;;;300    	  do
00001e  bf00              NOP      
                  |L17.32|
;;;301    		{
;;;302    			Val[cnt] = *p;
000020  7820              LDRB     r0,[r4,#0]
000022  f80d0005          STRB     r0,[sp,r5]
;;;303    			cnt++;
000026  1c68              ADDS     r0,r5,#1
000028  b2c5              UXTB     r5,r0
;;;304    			p++;
00002a  1c64              ADDS     r4,r4,#1
;;;305        }while((*p != ',')&&(cnt <= 2));	
00002c  7820              LDRB     r0,[r4,#0]
00002e  282c              CMP      r0,#0x2c
000030  d001              BEQ      |L17.54|
000032  2d02              CMP      r5,#2
000034  ddf4              BLE      |L17.32|
                  |L17.54|
;;;306    		temp = atoi(Val);
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       atoi
00003c  b287              UXTH     r7,r0
;;;307    		return temp;
00003e  b2f8              UXTB     r0,r7
;;;308    }
000040  e8bd81fc          POP      {r2-r8,pc}
;;;309    
                          ENDP

                  |L17.68|
000044  72727063          DCB      "rrpc,getcsq,",0
000048  2c676574
00004c  6373712c
000050  00      
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.ResolveICCID_HEX||, CODE, READONLY, ALIGN=2

                  ResolveICCID_HEX PROC
;;;367    */
;;;368    void ResolveICCID_HEX(uint8_t *pBuf,uint8_t *pAim)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;369    {
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
;;;370    	char     *p;
;;;371    	uint8_t  i = 0;
000008  2400              MOVS     r4,#0
;;;372    
;;;373    	//去掉帧头
;;;374    	p = strstr((char*)pBuf,"rrpc,geticcid,");
00000a  a10f              ADR      r1,|L18.72|
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       strstr
000012  4605              MOV      r5,r0
;;;375    	p+=14;
000014  350e              ADDS     r5,r5,#0xe
;;;376    		
;;;377    	//20位有效
;;;378    	for(i=0;i<10;i++)
000016  bf00              NOP      
000018  e011              B        |L18.62|
                  |L18.26|
;;;379    	{
;;;380    		pAim[i] = (uint8_t)(Ascii2UINT8(p[2*i])<<4)|(uint8_t)(Ascii2UINT8(p[2*i+1])<<0);
00001a  f8150014          LDRB     r0,[r5,r4,LSL #1]
00001e  f7fffffe          BL       Ascii2UINT8
000022  0700              LSLS     r0,r0,#28
000024  ea4f6810          LSR      r8,r0,#24
000028  0061              LSLS     r1,r4,#1
00002a  1c49              ADDS     r1,r1,#1
00002c  5c68              LDRB     r0,[r5,r1]
00002e  f7fffffe          BL       Ascii2UINT8
000032  ea480800          ORR      r8,r8,r0
000036  f8068004          STRB     r8,[r6,r4]
00003a  1c60              ADDS     r0,r4,#1              ;378
00003c  b2c4              UXTB     r4,r0                 ;378
                  |L18.62|
00003e  2c0a              CMP      r4,#0xa               ;378
000040  dbeb              BLT      |L18.26|
;;;381    	}
;;;382    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;383    
                          ENDP

000046  0000              DCW      0x0000
                  |L18.72|
000048  72727063          DCB      "rrpc,geticcid,",0
00004c  2c676574
000050  69636369
000054  642c00  
000057  00                DCB      0

                          AREA ||i.ResolveICCIDstr||, CODE, READONLY, ALIGN=2

                  ResolveICCIDstr PROC
;;;391    */
;;;392    void ResolveICCIDstr(uint8_t *pBuf,uint8_t *pAim)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;393    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;394    	char     *p;
;;;395    	uint8_t  i = 0;
000008  2400              MOVS     r4,#0
;;;396    
;;;397    	//去掉帧头
;;;398    	p = strstr((char*)pBuf,"rrpc,geticcid,");
00000a  a108              ADR      r1,|L19.44|
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       strstr
000012  4606              MOV      r6,r0
;;;399    	p+=14;
000014  360e              ADDS     r6,r6,#0xe
;;;400    		
;;;401    	//20位有效
;;;402    	for(i=0;i<20;i++)
000016  bf00              NOP      
000018  e003              B        |L19.34|
                  |L19.26|
;;;403    	{
;;;404    		pAim[i] = p[i];
00001a  5d30              LDRB     r0,[r6,r4]
00001c  5528              STRB     r0,[r5,r4]
00001e  1c60              ADDS     r0,r4,#1              ;402
000020  b2c4              UXTB     r4,r0                 ;402
                  |L19.34|
000022  2c14              CMP      r4,#0x14              ;402
000024  dbf9              BLT      |L19.26|
;;;405    	}
;;;406    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;407    /*
                          ENDP

00002a  0000              DCW      0x0000
                  |L19.44|
00002c  72727063          DCB      "rrpc,geticcid,",0
000030  2c676574
000034  69636369
000038  642c00  
00003b  00                DCB      0

                          AREA ||i.ResolveIMEI_HEX||, CODE, READONLY, ALIGN=2

                  ResolveIMEI_HEX PROC
;;;317    */
;;;318    void ResolveIMEI_HEX(uint8_t *pBuf,uint8_t *pAim)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;319    {
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
;;;320    	char     *p;
;;;321    	uint8_t  i = 0;
000008  2400              MOVS     r4,#0
;;;322    
;;;323    	//去掉帧头
;;;324    	p = strstr((char*)pBuf,"rrpc,getimei,");
00000a  a112              ADR      r1,|L20.84|
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       strstr
000012  4605              MOV      r5,r0
;;;325    	p+=13;
000014  350d              ADDS     r5,r5,#0xd
;;;326    		
;;;327    	//只有15位有效	
;;;328    	for(i=0;i<7;i++)
000016  bf00              NOP      
000018  e011              B        |L20.62|
                  |L20.26|
;;;329    	{
;;;330    		pAim[i] = (uint8_t)(Ascii2UINT8(p[2*i])<<4)|(uint8_t)(Ascii2UINT8(p[2*i+1])<<0);
00001a  f8150014          LDRB     r0,[r5,r4,LSL #1]
00001e  f7fffffe          BL       Ascii2UINT8
000022  0700              LSLS     r0,r0,#28
000024  ea4f6810          LSR      r8,r0,#24
000028  0061              LSLS     r1,r4,#1
00002a  1c49              ADDS     r1,r1,#1
00002c  5c68              LDRB     r0,[r5,r1]
00002e  f7fffffe          BL       Ascii2UINT8
000032  ea480800          ORR      r8,r8,r0
000036  f8068004          STRB     r8,[r6,r4]
00003a  1c60              ADDS     r0,r4,#1              ;328
00003c  b2c4              UXTB     r4,r0                 ;328
                  |L20.62|
00003e  2c07              CMP      r4,#7                 ;328
000040  dbeb              BLT      |L20.26|
;;;331    	}
;;;332    	pAim[7] = (uint8_t)(Ascii2UINT8(p[14])<<4);	
000042  7ba8              LDRB     r0,[r5,#0xe]
000044  f7fffffe          BL       Ascii2UINT8
000048  0700              LSLS     r0,r0,#28
00004a  0e00              LSRS     r0,r0,#24
00004c  71f0              STRB     r0,[r6,#7]
;;;333    }
00004e  e8bd81f0          POP      {r4-r8,pc}
;;;334    
                          ENDP

000052  0000              DCW      0x0000
                  |L20.84|
000054  72727063          DCB      "rrpc,getimei,",0
000058  2c676574
00005c  696d6569
000060  2c00    
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.ResolveIMEIstr||, CODE, READONLY, ALIGN=2

                  ResolveIMEIstr PROC
;;;343    */
;;;344    void ResolveIMEIstr(uint8_t *pBuf,uint8_t *pAim)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;345    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;346    	char     *p;
;;;347    	uint8_t  i = 0;
000008  2400              MOVS     r4,#0
;;;348    
;;;349    	//去掉帧头
;;;350    	p = strstr((char*)pBuf,"rrpc,getimei,");
00000a  a108              ADR      r1,|L21.44|
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       strstr
000012  4606              MOV      r6,r0
;;;351    	p+=13;
000014  360d              ADDS     r6,r6,#0xd
;;;352    		
;;;353    	//只有15位有效	
;;;354    	for(i=0;i<15;i++)
000016  bf00              NOP      
000018  e003              B        |L21.34|
                  |L21.26|
;;;355    	{
;;;356    		pAim[i] = p[i];
00001a  5d30              LDRB     r0,[r6,r4]
00001c  5528              STRB     r0,[r5,r4]
00001e  1c60              ADDS     r0,r4,#1              ;354
000020  b2c4              UXTB     r4,r0                 ;354
                  |L21.34|
000022  2c0f              CMP      r4,#0xf               ;354
000024  dbf9              BLT      |L21.26|
;;;357    	}
;;;358    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;359    
                          ENDP

00002a  0000              DCW      0x0000
                  |L21.44|
00002c  72727063          DCB      "rrpc,getimei,",0
000030  2c676574
000034  696d6569
000038  2c00    
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||i.ResolveLinkID||, CODE, READONLY, ALIGN=2

                  ResolveLinkID PROC
;;;246    */
;;;247    uint8_t ResolveLinkID(uint8_t *pBuf)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;248    {
000004  4606              MOV      r6,r0
;;;249    	char     *p;
;;;250    	uint8_t  cnt = 0;
000006  2500              MOVS     r5,#0
;;;251    	char     Val[5];
;;;252    	uint16_t temp = 0;
000008  2700              MOVS     r7,#0
;;;253    	
;;;254    	if(strstr((char*)pBuf,"CONNECT LINK ID:") != NULL)
00000a  a117              ADR      r1,|L22.104|
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       strstr
000012  b130              CBZ      r0,|L22.34|
;;;255    	{
;;;256    		//去掉帧头
;;;257    		p = strstr((char*)pBuf,"CONNECT LINK ID:");
000014  a114              ADR      r1,|L22.104|
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       strstr
00001c  4604              MOV      r4,r0
;;;258    		p+=16;
00001e  3410              ADDS     r4,r4,#0x10
000020  e00a              B        |L22.56|
                  |L22.34|
;;;259      }
;;;260    	else if(strstr((char*)pBuf,"CLOSE LINK ID:") != NULL)
000022  a116              ADR      r1,|L22.124|
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       strstr
00002a  b128              CBZ      r0,|L22.56|
;;;261    	{
;;;262    		//去掉帧头
;;;263    		p = strstr((char*)pBuf,"CLOSE LINK ID:");
00002c  a113              ADR      r1,|L22.124|
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       strstr
000034  4604              MOV      r4,r0
;;;264    		p+=14;
000036  340e              ADDS     r4,r4,#0xe
                  |L22.56|
;;;265      }
;;;266    	
;;;267    	  cnt = 0;
000038  2500              MOVS     r5,#0
;;;268    	  memset(Val,0,5);
00003a  2000              MOVS     r0,#0
00003c  9000              STR      r0,[sp,#0]
00003e  9001              STR      r0,[sp,#4]
;;;269    	  do
000040  bf00              NOP      
                  |L22.66|
;;;270    		{
;;;271    			Val[cnt] = *p;
000042  7820              LDRB     r0,[r4,#0]
000044  f80d0005          STRB     r0,[sp,r5]
;;;272    			cnt++;
000048  1c68              ADDS     r0,r5,#1
00004a  b2c5              UXTB     r5,r0
;;;273    			p++;
00004c  1c64              ADDS     r4,r4,#1
;;;274        }while((*p != ',')&&(cnt <= 5));	
00004e  7820              LDRB     r0,[r4,#0]
000050  282c              CMP      r0,#0x2c
000052  d001              BEQ      |L22.88|
000054  2d05              CMP      r5,#5
000056  ddf4              BLE      |L22.66|
                  |L22.88|
;;;275    		temp = atoi(Val);
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       atoi
00005e  b287              UXTH     r7,r0
;;;276    		return temp;
000060  b2f8              UXTB     r0,r7
;;;277    } 
000062  e8bd81fc          POP      {r2-r8,pc}
;;;278    
                          ENDP

000066  0000              DCW      0x0000
                  |L22.104|
000068  434f4e4e          DCB      "CONNECT LINK ID:",0
00006c  45435420
000070  4c494e4b
000074  2049443a
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0
                  |L22.124|
00007c  434c4f53          DCB      "CLOSE LINK ID:",0
000080  45204c49
000084  4e4b2049
000088  443a00  
00008b  00                DCB      0

                          AREA ||i.ResolveNtpTime||, CODE, READONLY, ALIGN=2

                  ResolveNtpTime PROC
;;;414    //应答格式:rrpc,nettime,2019,12,12,22,53,31
;;;415    uint8_t ResolveNtpTime(uint8_t *pBuf,_RTC *pAim)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;416    {
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
;;;417    	char     *p;
;;;418    	uint8_t  cnt = 0;
000008  2500              MOVS     r5,#0
;;;419    	char     Val[5];
;;;420    	
;;;421    	//去掉帧头
;;;422    	p = strstr((char*)pBuf,"rrpc,nettime,");
00000a  a154              ADR      r1,|L23.348|
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       strstr
000012  4604              MOV      r4,r0
;;;423    	p+=13;
000014  340d              ADDS     r4,r4,#0xd
;;;424    	
;;;425    	//解析年
;;;426    	cnt = 0;
000016  bf00              NOP      
;;;427    	memset(Val,0,5);
000018  2000              MOVS     r0,#0
00001a  9000              STR      r0,[sp,#0]
00001c  9001              STR      r0,[sp,#4]
;;;428    	do
00001e  bf00              NOP      
                  |L23.32|
;;;429    	{
;;;430    		Val[cnt] = *p;
000020  7820              LDRB     r0,[r4,#0]
000022  f80d0005          STRB     r0,[sp,r5]
;;;431    		cnt++;
000026  1c68              ADDS     r0,r5,#1
000028  b2c5              UXTB     r5,r0
;;;432    		p++;
00002a  1c64              ADDS     r4,r4,#1
;;;433    	}while((*p != ',')&&(cnt < 4));	
00002c  7820              LDRB     r0,[r4,#0]
00002e  282c              CMP      r0,#0x2c
000030  d001              BEQ      |L23.54|
000032  2d04              CMP      r5,#4
000034  dbf4              BLT      |L23.32|
                  |L23.54|
;;;434    	pAim->Year = atoi(Val)%100;
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       atoi
00003c  2164              MOVS     r1,#0x64
00003e  fb90f2f1          SDIV     r2,r0,r1
000042  fb010012          MLS      r0,r1,r2,r0
000046  7030              STRB     r0,[r6,#0]
;;;435    	if(pAim->Year > 100)
000048  7830              LDRB     r0,[r6,#0]
00004a  2864              CMP      r0,#0x64
00004c  dd02              BLE      |L23.84|
;;;436    	{
;;;437    		return 0;
00004e  2000              MOVS     r0,#0
                  |L23.80|
;;;438      }
;;;439    	
;;;440    	//去掉,
;;;441    	p++;
;;;442    	
;;;443    	//解析月
;;;444    	cnt = 0;
;;;445    	memset(Val,0,5);
;;;446    	do
;;;447    	{
;;;448    		Val[cnt] = *p;
;;;449    		cnt++;
;;;450    		p++;
;;;451    	}while((*p != ',')&&(cnt < 2));	
;;;452    	pAim->Mon = atoi(Val);
;;;453    	if(pAim->Mon > 12)
;;;454    	{
;;;455    		return 0;
;;;456      }
;;;457    
;;;458    	
;;;459    	//去掉,
;;;460    	p++;
;;;461    	
;;;462    	//解析日
;;;463    	cnt = 0;
;;;464    	memset(Val,0,5);
;;;465    	do
;;;466    	{
;;;467    		Val[cnt] = *p;
;;;468    		cnt++;
;;;469    		p++;
;;;470    	}while((*p != ',')&&(cnt < 2));	
;;;471    	pAim->Day = atoi(Val);
;;;472    	if(pAim->Day > 31)
;;;473    	{
;;;474    		return 0;
;;;475      }
;;;476    
;;;477    	
;;;478    	//去掉,
;;;479    	p++;
;;;480    	
;;;481    	//解析时
;;;482    	cnt = 0;
;;;483    	memset(Val,0,5);
;;;484    	do
;;;485    	{
;;;486    		Val[cnt] = *p;
;;;487    		cnt++;
;;;488    		p++;
;;;489    	}while((*p != ',')&&(cnt < 2));	
;;;490    	pAim->Hour = atoi(Val);
;;;491    	if(pAim->Hour > 24)
;;;492    	{
;;;493    		return 0;
;;;494      }
;;;495    	
;;;496    	//去掉,
;;;497    	p++;
;;;498    	
;;;499    	//解析分
;;;500    	cnt = 0;
;;;501    	memset(Val,0,5);
;;;502    	do
;;;503    	{
;;;504    		Val[cnt] = *p;
;;;505    		cnt++;
;;;506    		p++;
;;;507    	}while((*p != ',')&&(cnt < 2));	
;;;508    	pAim->Min = atoi(Val);
;;;509    	if(pAim->Min > 59)
;;;510    	{
;;;511    		return 0;
;;;512      }
;;;513    	
;;;514    	//去掉,
;;;515    	p++;
;;;516    	
;;;517    	//解析秒
;;;518    	cnt = 0;
;;;519    	memset(Val,0,5);
;;;520    	do
;;;521    	{
;;;522    		Val[cnt] = *p;
;;;523    		cnt++;
;;;524    		p++;
;;;525    	}while((*p != ',')&&(cnt < 2));	
;;;526    	pAim->Sec = atoi(Val);
;;;527    	if(pAim->Sec > 59)
;;;528    	{
;;;529    		return 0;
;;;530      }
;;;531    	
;;;532    	return 1;
;;;533    }
000050  e8bd81fc          POP      {r2-r8,pc}
                  |L23.84|
000054  1c64              ADDS     r4,r4,#1              ;441
000056  2500              MOVS     r5,#0                 ;444
000058  2000              MOVS     r0,#0                 ;445
00005a  9000              STR      r0,[sp,#0]            ;445
00005c  9001              STR      r0,[sp,#4]            ;445
00005e  bf00              NOP                            ;446
                  |L23.96|
000060  7820              LDRB     r0,[r4,#0]            ;448
000062  f80d0005          STRB     r0,[sp,r5]            ;448
000066  1c68              ADDS     r0,r5,#1              ;449
000068  b2c5              UXTB     r5,r0                 ;449
00006a  1c64              ADDS     r4,r4,#1              ;450
00006c  7820              LDRB     r0,[r4,#0]            ;451
00006e  282c              CMP      r0,#0x2c              ;451
000070  d001              BEQ      |L23.118|
000072  2d02              CMP      r5,#2                 ;451
000074  dbf4              BLT      |L23.96|
                  |L23.118|
000076  4668              MOV      r0,sp                 ;452
000078  f7fffffe          BL       atoi
00007c  7070              STRB     r0,[r6,#1]            ;452
00007e  7870              LDRB     r0,[r6,#1]            ;453
000080  280c              CMP      r0,#0xc               ;453
000082  dd01              BLE      |L23.136|
000084  2000              MOVS     r0,#0                 ;455
000086  e7e3              B        |L23.80|
                  |L23.136|
000088  1c64              ADDS     r4,r4,#1              ;460
00008a  2500              MOVS     r5,#0                 ;463
00008c  2000              MOVS     r0,#0                 ;464
00008e  9000              STR      r0,[sp,#0]            ;464
000090  9001              STR      r0,[sp,#4]            ;464
000092  bf00              NOP                            ;465
                  |L23.148|
000094  7820              LDRB     r0,[r4,#0]            ;467
000096  f80d0005          STRB     r0,[sp,r5]            ;467
00009a  1c68              ADDS     r0,r5,#1              ;468
00009c  b2c5              UXTB     r5,r0                 ;468
00009e  1c64              ADDS     r4,r4,#1              ;469
0000a0  7820              LDRB     r0,[r4,#0]            ;470
0000a2  282c              CMP      r0,#0x2c              ;470
0000a4  d001              BEQ      |L23.170|
0000a6  2d02              CMP      r5,#2                 ;470
0000a8  dbf4              BLT      |L23.148|
                  |L23.170|
0000aa  4668              MOV      r0,sp                 ;471
0000ac  f7fffffe          BL       atoi
0000b0  70b0              STRB     r0,[r6,#2]            ;471
0000b2  78b0              LDRB     r0,[r6,#2]            ;472
0000b4  281f              CMP      r0,#0x1f              ;472
0000b6  dd01              BLE      |L23.188|
0000b8  2000              MOVS     r0,#0                 ;474
0000ba  e7c9              B        |L23.80|
                  |L23.188|
0000bc  1c64              ADDS     r4,r4,#1              ;479
0000be  2500              MOVS     r5,#0                 ;482
0000c0  2000              MOVS     r0,#0                 ;483
0000c2  9000              STR      r0,[sp,#0]            ;483
0000c4  9001              STR      r0,[sp,#4]            ;483
0000c6  bf00              NOP                            ;484
                  |L23.200|
0000c8  7820              LDRB     r0,[r4,#0]            ;486
0000ca  f80d0005          STRB     r0,[sp,r5]            ;486
0000ce  1c68              ADDS     r0,r5,#1              ;487
0000d0  b2c5              UXTB     r5,r0                 ;487
0000d2  1c64              ADDS     r4,r4,#1              ;488
0000d4  7820              LDRB     r0,[r4,#0]            ;489
0000d6  282c              CMP      r0,#0x2c              ;489
0000d8  d001              BEQ      |L23.222|
0000da  2d02              CMP      r5,#2                 ;489
0000dc  dbf4              BLT      |L23.200|
                  |L23.222|
0000de  4668              MOV      r0,sp                 ;490
0000e0  f7fffffe          BL       atoi
0000e4  70f0              STRB     r0,[r6,#3]            ;490
0000e6  78f0              LDRB     r0,[r6,#3]            ;491
0000e8  2818              CMP      r0,#0x18              ;491
0000ea  dd01              BLE      |L23.240|
0000ec  2000              MOVS     r0,#0                 ;493
0000ee  e7af              B        |L23.80|
                  |L23.240|
0000f0  1c64              ADDS     r4,r4,#1              ;497
0000f2  2500              MOVS     r5,#0                 ;500
0000f4  2000              MOVS     r0,#0                 ;501
0000f6  9000              STR      r0,[sp,#0]            ;501
0000f8  9001              STR      r0,[sp,#4]            ;501
0000fa  bf00              NOP                            ;502
                  |L23.252|
0000fc  7820              LDRB     r0,[r4,#0]            ;504
0000fe  f80d0005          STRB     r0,[sp,r5]            ;504
000102  1c68              ADDS     r0,r5,#1              ;505
000104  b2c5              UXTB     r5,r0                 ;505
000106  1c64              ADDS     r4,r4,#1              ;506
000108  7820              LDRB     r0,[r4,#0]            ;507
00010a  282c              CMP      r0,#0x2c              ;507
00010c  d001              BEQ      |L23.274|
00010e  2d02              CMP      r5,#2                 ;507
000110  dbf4              BLT      |L23.252|
                  |L23.274|
000112  4668              MOV      r0,sp                 ;508
000114  f7fffffe          BL       atoi
000118  7130              STRB     r0,[r6,#4]            ;508
00011a  7930              LDRB     r0,[r6,#4]            ;509
00011c  283b              CMP      r0,#0x3b              ;509
00011e  dd01              BLE      |L23.292|
000120  2000              MOVS     r0,#0                 ;511
000122  e795              B        |L23.80|
                  |L23.292|
000124  1c64              ADDS     r4,r4,#1              ;515
000126  2500              MOVS     r5,#0                 ;518
000128  2000              MOVS     r0,#0                 ;519
00012a  9000              STR      r0,[sp,#0]            ;519
00012c  9001              STR      r0,[sp,#4]            ;519
00012e  bf00              NOP                            ;520
                  |L23.304|
000130  7820              LDRB     r0,[r4,#0]            ;522
000132  f80d0005          STRB     r0,[sp,r5]            ;522
000136  1c68              ADDS     r0,r5,#1              ;523
000138  b2c5              UXTB     r5,r0                 ;523
00013a  1c64              ADDS     r4,r4,#1              ;524
00013c  7820              LDRB     r0,[r4,#0]            ;525
00013e  282c              CMP      r0,#0x2c              ;525
000140  d001              BEQ      |L23.326|
000142  2d02              CMP      r5,#2                 ;525
000144  dbf4              BLT      |L23.304|
                  |L23.326|
000146  4668              MOV      r0,sp                 ;526
000148  f7fffffe          BL       atoi
00014c  7170              STRB     r0,[r6,#5]            ;526
00014e  7970              LDRB     r0,[r6,#5]            ;527
000150  283b              CMP      r0,#0x3b              ;527
000152  dd01              BLE      |L23.344|
000154  2000              MOVS     r0,#0                 ;529
000156  e77b              B        |L23.80|
                  |L23.344|
000158  2001              MOVS     r0,#1                 ;532
00015a  e779              B        |L23.80|
;;;534    /*
                          ENDP

                  |L23.348|
00015c  72727063          DCB      "rrpc,nettime,",0
000160  2c6e6574
000164  74696d65
000168  2c00    
00016a  00                DCB      0
00016b  00                DCB      0

                          AREA ||i.TransparentTask||, CODE, READONLY, ALIGN=2

                  TransparentTask PROC
;;;652    */
;;;653    uint8_t TransparentTask(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;654    {
;;;655    	static ElemType_G e;
;;;656    	static uint8_t FirstStart = 0;
;;;657    	static uint8_t Air208RunSta_bak = 0xff;
;;;658    				 uint8_t LinkID = 0;
000002  2400              MOVS     r4,#0
;;;659    				 uint8_t i = 0;
000004  2500              MOVS     r5,#0
;;;660    				 uint8_t ret = 0;
000006  2600              MOVS     r6,#0
;;;661    //				 uint8_t cnt = 0;
;;;662    //	static uint8_t paramflag = 0;
;;;663    
;;;664    /*****************只有首次上电时，才发送*******************/		
;;;665    	if(FirstStart == 0)
000008  48eb              LDR      r0,|L24.952|
00000a  7800              LDRB     r0,[r0,#0]  ; FirstStart
00000c  b960              CBNZ     r0,|L24.40|
;;;666    	{
;;;667    		if((GPRS_Para.Air208RunSta == 2)&&(GPRS_Para.ImeiGetOKFlag)&&(GPRS_Para.IccidGetOKFlag))
00000e  48eb              LDR      r0,|L24.956|
000010  7dc0              LDRB     r0,[r0,#0x17]  ; GPRS_Para
000012  2802              CMP      r0,#2
000014  d108              BNE      |L24.40|
000016  48e9              LDR      r0,|L24.956|
000018  7d00              LDRB     r0,[r0,#0x14]  ; GPRS_Para
00001a  b128              CBZ      r0,|L24.40|
00001c  48e7              LDR      r0,|L24.956|
00001e  7d40              LDRB     r0,[r0,#0x15]  ; GPRS_Para
000020  b110              CBZ      r0,|L24.40|
;;;668    		{
;;;669    			FirstStart = 1;
000022  2001              MOVS     r0,#1
000024  49e4              LDR      r1,|L24.952|
000026  7008              STRB     r0,[r1,#0]
                  |L24.40|
;;;670    			//发送一次注册包，发送一次心跳包
;;;671    //			Send_HeatBeatMsg();
;;;672    		}	
;;;673    	}
;;;674    	
;;;675    	
;;;676    /*****************定时心跳*******************************/	
;;;677    	if((GPRS_Para.ImeiGetOKFlag)&&(GPRS_Para.IccidGetOKFlag))
000028  48e4              LDR      r0,|L24.956|
00002a  7d00              LDRB     r0,[r0,#0x14]  ; GPRS_Para
00002c  b398              CBZ      r0,|L24.150|
00002e  48e3              LDR      r0,|L24.956|
000030  7d40              LDRB     r0,[r0,#0x15]  ; GPRS_Para
000032  b380              CBZ      r0,|L24.150|
;;;678    	{
;;;679    		if(Air208RunSta_bak != GPRS_Para.Air208RunSta)
000034  48e1              LDR      r0,|L24.956|
000036  7dc0              LDRB     r0,[r0,#0x17]  ; GPRS_Para
000038  49e1              LDR      r1,|L24.960|
00003a  7809              LDRB     r1,[r1,#0]  ; Air208RunSta_bak
00003c  4288              CMP      r0,r1
00003e  d014              BEQ      |L24.106|
;;;680    		{
;;;681    			Air208RunSta_bak = GPRS_Para.Air208RunSta;
000040  48de              LDR      r0,|L24.956|
000042  7dc0              LDRB     r0,[r0,#0x17]  ; GPRS_Para
000044  49de              LDR      r1,|L24.960|
000046  7008              STRB     r0,[r1,#0]
;;;682    			if(GPRS_Para.Air208RunSta == 2)//联网,设备从断网变成联网，心跳定时开始
000048  48dc              LDR      r0,|L24.956|
00004a  7dc0              LDRB     r0,[r0,#0x17]  ; GPRS_Para
00004c  2802              CMP      r0,#2
00004e  d109              BNE      |L24.100|
;;;683    			{
;;;684    				bsp_StartTimer(NET_SEND_TMR_ID, GPRS_Para.heartbeat_period*TIME_SEC);
000050  48da              LDR      r0,|L24.956|
000052  8880              LDRH     r0,[r0,#4]  ; GPRS_Para
000054  f44f727a          MOV      r2,#0x3e8
000058  fb00f102          MUL      r1,r0,r2
00005c  200f              MOVS     r0,#0xf
00005e  f7fffffe          BL       bsp_StartTimer
000062  e002              B        |L24.106|
                  |L24.100|
;;;685    			}
;;;686    			else
;;;687    			{
;;;688    				bsp_StopTimer(NET_SEND_TMR_ID);
000064  200f              MOVS     r0,#0xf
000066  f7fffffe          BL       bsp_StopTimer
                  |L24.106|
;;;689    			}
;;;690    		}
;;;691    
;;;692    		//必须在线
;;;693    		if(GPRS_Para.Air208RunSta == 2)
00006a  48d4              LDR      r0,|L24.956|
00006c  7dc0              LDRB     r0,[r0,#0x17]  ; GPRS_Para
00006e  2802              CMP      r0,#2
000070  d118              BNE      |L24.164|
;;;694    		{
;;;695    			//时间到，定时发送
;;;696    			if(bsp_CheckTimer(NET_SEND_TMR_ID))
000072  200f              MOVS     r0,#0xf
000074  f7fffffe          BL       bsp_CheckTimer
000078  b1a0              CBZ      r0,|L24.164|
;;;697    			{
;;;698    				bsp_StartTimer(NET_SEND_TMR_ID, GPRS_Para.heartbeat_period*TIME_SEC);
00007a  48d0              LDR      r0,|L24.956|
00007c  8880              LDRH     r0,[r0,#4]  ; GPRS_Para
00007e  f44f727a          MOV      r2,#0x3e8
000082  fb00f102          MUL      r1,r0,r2
000086  200f              MOVS     r0,#0xf
000088  f7fffffe          BL       bsp_StartTimer
;;;699    				GetCsqSend();
00008c  f7fffffe          BL       GetCsqSend
;;;700    				Send_JsonHeatBeatMsg();
000090  f7fffffe          BL       Send_JsonHeatBeatMsg
000094  e006              B        |L24.164|
                  |L24.150|
000096  e7ff              B        |L24.152|
                  |L24.152|
;;;701    			}				
;;;702    		}
;;;703    	}
;;;704      else
;;;705    	{
;;;706    		Air208RunSta_bak = 0xff;
000098  20ff              MOVS     r0,#0xff
00009a  49c9              LDR      r1,|L24.960|
00009c  7008              STRB     r0,[r1,#0]
;;;707    		bsp_StopTimer(NET_SEND_TMR_ID);
00009e  200f              MOVS     r0,#0xf
0000a0  f7fffffe          BL       bsp_StopTimer
                  |L24.164|
;;;708    	}
;;;709    		
;;;710    /*****************网络状态查询****************************/	
;;;711    	if(bsp_CheckTimer(NET_CHECK_TMR_ID))
0000a4  2013              MOVS     r0,#0x13
0000a6  f7fffffe          BL       bsp_CheckTimer
0000aa  b310              CBZ      r0,|L24.242|
;;;712    	{
;;;713    		//读取一次IMEI
;;;714    		GetIMEISend();	
0000ac  f7fffffe          BL       GetIMEISend
;;;715    		GetICCIDSend();	
0000b0  f7fffffe          BL       GetICCIDSend
;;;716    		
;;;717    		if((GPRS_Para.Air208RunSta == 1)||(GPRS_Para.Air208RunSta == 0))
0000b4  48c1              LDR      r0,|L24.956|
0000b6  7dc0              LDRB     r0,[r0,#0x17]  ; GPRS_Para
0000b8  2801              CMP      r0,#1
0000ba  d002              BEQ      |L24.194|
0000bc  48bf              LDR      r0,|L24.956|
0000be  7dc0              LDRB     r0,[r0,#0x17]  ; GPRS_Para
0000c0  b970              CBNZ     r0,|L24.224|
                  |L24.194|
;;;718    		{
;;;719    			//断网，20秒查询一次
;;;720    			bsp_StartTimer(NET_CHECK_TMR_ID, 5*TIME_SEC);
0000c2  f2413188          MOV      r1,#0x1388
0000c6  2013              MOVS     r0,#0x13
0000c8  f7fffffe          BL       bsp_StartTimer
;;;721    			NetCheckSend();
0000cc  f7fffffe          BL       NetCheckSend
;;;722    			GetCsqSend();			
0000d0  f7fffffe          BL       GetCsqSend
;;;723    			//应答超时定时器
;;;724    			bsp_StartTimer(NET_TIMEOUT_TMR_ID, 3*TIME_SEC);
0000d4  f64031b8          MOV      r1,#0xbb8
0000d8  2011              MOVS     r0,#0x11
0000da  f7fffffe          BL       bsp_StartTimer
0000de  e008              B        |L24.242|
                  |L24.224|
;;;725    		}
;;;726    		else if(GPRS_Para.Air208RunSta == 2)
0000e0  48b6              LDR      r0,|L24.956|
0000e2  7dc0              LDRB     r0,[r0,#0x17]  ; GPRS_Para
0000e4  2802              CMP      r0,#2
0000e6  d104              BNE      |L24.242|
;;;727    		{
;;;728    			//联网，120秒查询一次
;;;729    			bsp_StartTimer(NET_CHECK_TMR_ID, 10*TIME_SEC);
0000e8  f2427110          MOV      r1,#0x2710
0000ec  2013              MOVS     r0,#0x13
0000ee  f7fffffe          BL       bsp_StartTimer
                  |L24.242|
;;;730    		}
;;;731    	}
;;;732    	//应答超时
;;;733    	if(bsp_CheckTimer(NET_TIMEOUT_TMR_ID))
0000f2  2011              MOVS     r0,#0x11
0000f4  f7fffffe          BL       bsp_CheckTimer
0000f8  b128              CBZ      r0,|L24.262|
;;;734    	{
;;;735    		bsp_StopTimer(NET_TIMEOUT_TMR_ID);
0000fa  2011              MOVS     r0,#0x11
0000fc  f7fffffe          BL       bsp_StopTimer
;;;736    		//断网
;;;737    		GPRS_Para.Air208RunSta = 1;	
000100  2001              MOVS     r0,#1
000102  49ae              LDR      r1,|L24.956|
000104  75c8              STRB     r0,[r1,#0x17]
                  |L24.262|
;;;738    	}
;;;739    	
;;;740    /*****************网络授时执行****************************/	
;;;741    	//必须联网后才进行网络授时
;;;742    	if(GPRS_Para.Air208RunSta == 2)
000106  48ad              LDR      r0,|L24.956|
000108  7dc0              LDRB     r0,[r0,#0x17]  ; GPRS_Para
00010a  2802              CMP      r0,#2
00010c  d130              BNE      |L24.368|
;;;743    	{
;;;744    		if(GPRS_Para.NtpTimeOKFlag == 0)
00010e  48ab              LDR      r0,|L24.956|
000110  7d80              LDRB     r0,[r0,#0x16]  ; GPRS_Para
000112  b940              CBNZ     r0,|L24.294|
;;;745    		{
;;;746    			//未授时,10秒后，开始查询时间
;;;747    			bsp_StartTimer(NTP_TIME_TMR_ID, 10*TIME_SEC);
000114  f2427110          MOV      r1,#0x2710
000118  2010              MOVS     r0,#0x10
00011a  f7fffffe          BL       bsp_StartTimer
;;;748    			GPRS_Para.NtpTimeOKFlag = 1;
00011e  2001              MOVS     r0,#1
000120  49a6              LDR      r1,|L24.956|
000122  7588              STRB     r0,[r1,#0x16]
000124  e024              B        |L24.368|
                  |L24.294|
;;;749        }
;;;750    		else if(GPRS_Para.NtpTimeOKFlag == 1)
000126  48a5              LDR      r0,|L24.956|
000128  7d80              LDRB     r0,[r0,#0x16]  ; GPRS_Para
00012a  2801              CMP      r0,#1
00012c  d10e              BNE      |L24.332|
;;;751    		{
;;;752    			if(bsp_CheckTimer(NTP_TIME_TMR_ID))
00012e  2010              MOVS     r0,#0x10
000130  f7fffffe          BL       bsp_CheckTimer
000134  b1e0              CBZ      r0,|L24.368|
;;;753    			{
;;;754    				//读取网络时间
;;;755    				GetNtpTimeSend();
000136  f7fffffe          BL       GetNtpTimeSend
;;;756    				GPRS_Para.NtpTimeOKFlag = 2;
00013a  2002              MOVS     r0,#2
00013c  499f              LDR      r1,|L24.956|
00013e  7588              STRB     r0,[r1,#0x16]
;;;757    				bsp_StartTimer(NTP_TIME_TMR_ID, 10*TIME_SEC);
000140  f2427110          MOV      r1,#0x2710
000144  2010              MOVS     r0,#0x10
000146  f7fffffe          BL       bsp_StartTimer
00014a  e011              B        |L24.368|
                  |L24.332|
;;;758    			}
;;;759        }
;;;760    		else if(GPRS_Para.NtpTimeOKFlag == 2)
00014c  489b              LDR      r0,|L24.956|
00014e  7d80              LDRB     r0,[r0,#0x16]  ; GPRS_Para
000150  2802              CMP      r0,#2
000152  d10c              BNE      |L24.366|
;;;761    		{
;;;762    			//空闲，等待授时成功
;;;763    			if(bsp_CheckTimer(NTP_TIME_TMR_ID))
000154  2010              MOVS     r0,#0x10
000156  f7fffffe          BL       bsp_CheckTimer
00015a  b148              CBZ      r0,|L24.368|
;;;764    			{
;;;765    				bsp_StartTimer(NTP_TIME_TMR_ID, 10*TIME_SEC);
00015c  f2427110          MOV      r1,#0x2710
000160  2010              MOVS     r0,#0x10
000162  f7fffffe          BL       bsp_StartTimer
;;;766    				GPRS_Para.NtpTimeOKFlag = 1;
000166  2001              MOVS     r0,#1
000168  4994              LDR      r1,|L24.956|
00016a  7588              STRB     r0,[r1,#0x16]
00016c  e000              B        |L24.368|
                  |L24.366|
;;;767          }
;;;768        }
;;;769    		else if(GPRS_Para.NtpTimeOKFlag == 3)
00016e  bf00              NOP      
                  |L24.368|
;;;770    		{
;;;771    // 			//已经授时成功,每6小时授时一次
;;;772    // 			bsp_StartTimer(NTP_TIME_TMR_ID, 6*TIME_HOUR);
;;;773    // 			GPRS_Para.NtpTimeOKFlag = 1;
;;;774        }
;;;775      }
;;;776    /********************************************************/
;;;777    
;;;778    
;;;779    /**********************接收部分***************************/	
;;;780    	//COM1，208接口
;;;781    	if(bsp_CheckTimer(UART208))
000170  2001              MOVS     r0,#1
000172  f7fffffe          BL       bsp_CheckTimer
000176  2800              CMP      r0,#0
000178  d07b              BEQ      |L24.626|
;;;782    	{
;;;783    		bsp_StopTimer(UART208);
00017a  2001              MOVS     r0,#1
00017c  f7fffffe          BL       bsp_StopTimer
;;;784    		
;;;785    			if(strstr((char*)UART208_RXBUF,"CONNECT LINK ID:") != NULL)
000180  a190              ADR      r1,|L24.964|
000182  4895              LDR      r0,|L24.984|
000184  f7fffffe          BL       strstr
000188  b180              CBZ      r0,|L24.428|
;;;786    			{
;;;787    				//联网
;;;788    				LinkID = ResolveLinkID(UART208_RXBUF);
00018a  4893              LDR      r0,|L24.984|
00018c  f7fffffe          BL       ResolveLinkID
000190  4604              MOV      r4,r0
;;;789    				if((LinkID >= 1)&&(LinkID <= MAX_LINK))
000192  2c01              CMP      r4,#1
000194  db06              BLT      |L24.420|
000196  2c06              CMP      r4,#6
000198  dc04              BGT      |L24.420|
;;;790    				{
;;;791    					GPRS_Para.link_flag[LinkID - 1] = 1;
00019a  2201              MOVS     r2,#1
00019c  1e60              SUBS     r0,r4,#1
00019e  4987              LDR      r1,|L24.956|
0001a0  313e              ADDS     r1,r1,#0x3e
0001a2  540a              STRB     r2,[r1,r0]
                  |L24.420|
;;;792    				}
;;;793    				
;;;794    				//联网
;;;795    				GPRS_Para.Air208RunSta = 2;
0001a4  2002              MOVS     r0,#2
0001a6  4985              LDR      r1,|L24.956|
0001a8  75c8              STRB     r0,[r1,#0x17]
                  |L24.426|
0001aa  e0c8              B        |L24.830|
                  |L24.428|
;;;796    								
;;;797    			}
;;;798    			else if(strstr((char*)UART208_RXBUF,"CLOSE LINK ID:") != NULL)
0001ac  a18b              ADR      r1,|L24.988|
0001ae  488a              LDR      r0,|L24.984|
0001b0  f7fffffe          BL       strstr
0001b4  b338              CBZ      r0,|L24.518|
;;;799    			{
;;;800    				//断网
;;;801    				LinkID = ResolveLinkID(UART208_RXBUF);
0001b6  4888              LDR      r0,|L24.984|
0001b8  f7fffffe          BL       ResolveLinkID
0001bc  4604              MOV      r4,r0
;;;802    				if((LinkID >= 1)&&(LinkID <= MAX_LINK))
0001be  2c01              CMP      r4,#1
0001c0  db06              BLT      |L24.464|
0001c2  2c06              CMP      r4,#6
0001c4  dc04              BGT      |L24.464|
;;;803    				{
;;;804    					GPRS_Para.link_flag[LinkID - 1] = 0;
0001c6  2200              MOVS     r2,#0
0001c8  1e60              SUBS     r0,r4,#1
0001ca  497c              LDR      r1,|L24.956|
0001cc  313e              ADDS     r1,r1,#0x3e
0001ce  540a              STRB     r2,[r1,r0]
                  |L24.464|
;;;805    			  }
;;;806    	
;;;807    					//全断网才断网
;;;808    					for(i=0;i<MAX_LINK;i++)
0001d0  2500              MOVS     r5,#0
0001d2  e006              B        |L24.482|
                  |L24.468|
;;;809    					{
;;;810    						if(GPRS_Para.link_flag[i])
0001d4  4879              LDR      r0,|L24.956|
0001d6  303e              ADDS     r0,r0,#0x3e
0001d8  5d40              LDRB     r0,[r0,r5]
0001da  b100              CBZ      r0,|L24.478|
;;;811    						{
;;;812    							break;
0001dc  e003              B        |L24.486|
                  |L24.478|
0001de  1c68              ADDS     r0,r5,#1              ;808
0001e0  b2c5              UXTB     r5,r0                 ;808
                  |L24.482|
0001e2  2d06              CMP      r5,#6                 ;808
0001e4  dbf6              BLT      |L24.468|
                  |L24.486|
0001e6  bf00              NOP      
;;;813    						}
;;;814    					}
;;;815    					if(i == MAX_LINK)
0001e8  2d06              CMP      r5,#6
0001ea  d108              BNE      |L24.510|
;;;816    					{
;;;817    						//断网
;;;818    						GPRS_Para.Air208RunSta = 1;
0001ec  2001              MOVS     r0,#1
0001ee  4973              LDR      r1,|L24.956|
0001f0  75c8              STRB     r0,[r1,#0x17]
;;;819    						//断网，20秒查询一次
;;;820    						bsp_StartTimer(NET_CHECK_TMR_ID, 20*TIME_SEC);
0001f2  f6446120          MOV      r1,#0x4e20
0001f6  2013              MOVS     r0,#0x13
0001f8  f7fffffe          BL       bsp_StartTimer
0001fc  e09f              B        |L24.830|
                  |L24.510|
;;;821    					}
;;;822    					else
;;;823    					{
;;;824    						//联网
;;;825    						GPRS_Para.Air208RunSta = 2;
0001fe  2002              MOVS     r0,#2
000200  496e              LDR      r1,|L24.956|
000202  75c8              STRB     r0,[r1,#0x17]
000204  e09b              B        |L24.830|
                  |L24.518|
;;;826    					}
;;;827          }
;;;828    			else if (strstr((char*)UART208_RXBUF, "rrpc,netstatus") != NULL)
000206  a179              ADR      r1,|L24.1004|
000208  4873              LDR      r0,|L24.984|
00020a  f7fffffe          BL       strstr
00020e  b1d0              CBZ      r0,|L24.582|
;;;829    			{
;;;830    				//应答
;;;831    				bsp_StopTimer(NET_TIMEOUT_TMR_ID);
000210  2011              MOVS     r0,#0x11
000212  f7fffffe          BL       bsp_StopTimer
;;;832    				if (strstr((char*)UART208_RXBUF, "rrpc,netstatus,OK") != NULL)
000216  a179              ADR      r1,|L24.1020|
000218  486f              LDR      r0,|L24.984|
00021a  f7fffffe          BL       strstr
00021e  b118              CBZ      r0,|L24.552|
;;;833    				{
;;;834    					//联网
;;;835    					GPRS_Para.Air208RunSta = 2;					
000220  2002              MOVS     r0,#2
000222  4966              LDR      r1,|L24.956|
000224  75c8              STRB     r0,[r1,#0x17]
000226  e08a              B        |L24.830|
                  |L24.552|
;;;836    				}
;;;837    				else if (strstr((char*)UART208_RXBUF, "rrpc,netstatus,ERROR") != NULL)
000228  a179              ADR      r1,|L24.1040|
00022a  486b              LDR      r0,|L24.984|
00022c  f7fffffe          BL       strstr
000230  2800              CMP      r0,#0
000232  d0ba              BEQ      |L24.426|
;;;838    				{
;;;839    					//断网
;;;840    					GPRS_Para.Air208RunSta = 1;
000234  2001              MOVS     r0,#1
000236  4961              LDR      r1,|L24.956|
000238  75c8              STRB     r0,[r1,#0x17]
;;;841    					memset(GPRS_Para.link_flag,0,MAX_LINK);
00023a  f101003e          ADD      r0,r1,#0x3e
00023e  2100              MOVS     r1,#0
000240  6001              STR      r1,[r0,#0]  ; GPRS_Para
000242  8081              STRH     r1,[r0,#4]
000244  e07b              B        |L24.830|
                  |L24.582|
;;;842    				}
;;;843    			}
;;;844    			else if (strstr((char*)UART208_RXBUF, "rrpc,nettime") != NULL)
000246  a178              ADR      r1,|L24.1064|
000248  4863              LDR      r0,|L24.984|
00024a  f7fffffe          BL       strstr
00024e  b188              CBZ      r0,|L24.628|
;;;845    			{
;;;846    				//网络授时时间
;;;847    				if (strstr((char*)UART208_RXBUF, "rrpc,nettime,error") != NULL)
000250  a179              ADR      r1,|L24.1080|
000252  4861              LDR      r0,|L24.984|
000254  f7fffffe          BL       strstr
000258  2800              CMP      r0,#0
00025a  d170              BNE      |L24.830|
;;;848    				{
;;;849    					//授时错误
;;;850            }
;;;851    				else
;;;852    				{
;;;853    					{
;;;854    						_RTC rtc;
;;;855    						ret = ResolveNtpTime(UART208_RXBUF,&rtc);
00025c  4669              MOV      r1,sp
00025e  485e              LDR      r0,|L24.984|
000260  f7fffffe          BL       ResolveNtpTime
000264  4606              MOV      r6,r0
;;;856    						if(ret == 1)
000266  2e01              CMP      r6,#1
000268  d102              BNE      |L24.624|
;;;857    						{
;;;858    //							rtc.Week = getweek(rtc.Year,rtc.Mon,rtc.Day);
;;;859    							//执行时间校准
;;;860    //							DS1302_SetTime(rtc);
;;;861    							//网络授时成功
;;;862    							GPRS_Para.NtpTimeOKFlag = 3;
00026a  2003              MOVS     r0,#3
00026c  4953              LDR      r1,|L24.956|
00026e  7588              STRB     r0,[r1,#0x16]
                  |L24.624|
;;;863                }
;;;864              }
000270  e065              B        |L24.830|
                  |L24.626|
000272  e067              B        |L24.836|
                  |L24.628|
;;;865            }
;;;866          }
;;;867    			else if (strstr((char*)UART208_RXBUF, "rrpc,getimei") != NULL)
000274  a175              ADR      r1,|L24.1100|
000276  4858              LDR      r0,|L24.984|
000278  f7fffffe          BL       strstr
00027c  b1b8              CBZ      r0,|L24.686|
;;;868    			{
;;;869    				if(UART208_tUART.usRxCount > 28)
00027e  4877              LDR      r0,|L24.1116|
000280  8bc0              LDRH     r0,[r0,#0x1e]  ; g_tUart2
000282  281c              CMP      r0,#0x1c
000284  dd5b              BLE      |L24.830|
;;;870    				{
;;;871    					//解析IMEI,为hex
;;;872    // 					memset(GPRS_Para.IMEI,0,10);
;;;873    // 					ResolveIMEI_HEX(UART208_RXBUF,GPRS_Para.IMEI);
;;;874    					
;;;875    					//解析IMEI,为str
;;;876    					memset(GPRS_Para.sIMEI,0,16);
000286  2110              MOVS     r1,#0x10
000288  484c              LDR      r0,|L24.956|
00028a  3019              ADDS     r0,r0,#0x19
00028c  f7fffffe          BL       __aeabi_memclr
;;;877    					ResolveIMEIstr(UART208_RXBUF,GPRS_Para.sIMEI);
000290  494a              LDR      r1,|L24.956|
000292  3119              ADDS     r1,r1,#0x19
000294  4850              LDR      r0,|L24.984|
000296  f7fffffe          BL       ResolveIMEIstr
;;;878    //					FyIMEI(GPRS_Para.sIMEI, GPRS_Para.FeiYanLink);
;;;879    					FeiyanIMEI((char*)GPRS_Para.sIMEI, (char*)GPRS_Para.FeiYanLink);
00029a  4948              LDR      r1,|L24.956|
00029c  314c              ADDS     r1,r1,#0x4c
00029e  f1a10033          SUB      r0,r1,#0x33
0002a2  f7fffffe          BL       FeiyanIMEI
;;;880    					
;;;881    					//获得IMEI
;;;882    					GPRS_Para.ImeiGetOKFlag = 1;
0002a6  2001              MOVS     r0,#1
0002a8  4944              LDR      r1,|L24.956|
0002aa  7508              STRB     r0,[r1,#0x14]
0002ac  e047              B        |L24.830|
                  |L24.686|
;;;883            }
;;;884          }
;;;885    			else if (strstr((char*)UART208_RXBUF, "rrpc,geticcid") != NULL)
0002ae  a16c              ADR      r1,|L24.1120|
0002b0  4849              LDR      r0,|L24.984|
0002b2  f7fffffe          BL       strstr
0002b6  b188              CBZ      r0,|L24.732|
;;;886    			{
;;;887    				if(UART208_tUART.usRxCount > 34)
0002b8  4868              LDR      r0,|L24.1116|
0002ba  8bc0              LDRH     r0,[r0,#0x1e]  ; g_tUart2
0002bc  2822              CMP      r0,#0x22
0002be  dd3e              BLE      |L24.830|
;;;888    				{
;;;889    					//解析ICCID为hex
;;;890    // 					memset(GPRS_Para.ICCID,0,10);
;;;891    // 					ResolveICCID_HEX(UART208_RXBUF,GPRS_Para.ICCID);
;;;892    					
;;;893    					//解析ICCID为str
;;;894    					memset(GPRS_Para.sICCID,0,21);
0002c0  2115              MOVS     r1,#0x15
0002c2  483e              LDR      r0,|L24.956|
0002c4  3029              ADDS     r0,r0,#0x29
0002c6  f7fffffe          BL       __aeabi_memclr
;;;895    					ResolveICCIDstr(UART208_RXBUF,GPRS_Para.sICCID);
0002ca  493c              LDR      r1,|L24.956|
0002cc  3129              ADDS     r1,r1,#0x29
0002ce  4842              LDR      r0,|L24.984|
0002d0  f7fffffe          BL       ResolveICCIDstr
;;;896    					
;;;897    // 					GPRS_Para.ICCID[40] = '\0';					
;;;898    // 					To_Hex((char*)GPRS_Para.sICCID, 20, (char*)GPRS_Para.ICCID);
;;;899    					//获得ICCID
;;;900    					GPRS_Para.IccidGetOKFlag = 1;	
0002d4  2001              MOVS     r0,#1
0002d6  4939              LDR      r1,|L24.956|
0002d8  7548              STRB     r0,[r1,#0x15]
0002da  e030              B        |L24.830|
                  |L24.732|
;;;901            }
;;;902          }
;;;903    			
;;;904    			else if (strstr((char*)UART208_RXBUF, "rrpc,getcsq") != NULL)
0002dc  a164              ADR      r1,|L24.1136|
0002de  483e              LDR      r0,|L24.984|
0002e0  f7fffffe          BL       strstr
0002e4  b318              CBZ      r0,|L24.814|
;;;905    			{
;;;906    				if (strstr((char*)UART208_RXBUF, "error") != NULL)
0002e6  a165              ADR      r1,|L24.1148|
0002e8  483b              LDR      r0,|L24.984|
0002ea  f7fffffe          BL       strstr
0002ee  bb30              CBNZ     r0,|L24.830|
;;;907    				{
;;;908    
;;;909            }
;;;910    				else
;;;911    				{
;;;912    					GPRS_Para.CSQ = ResolveCSQ(UART208_RXBUF);
0002f0  4839              LDR      r0,|L24.984|
0002f2  f7fffffe          BL       ResolveCSQ
0002f6  4931              LDR      r1,|L24.956|
0002f8  f881006c          STRB     r0,[r1,#0x6c]
;;;913    					
;;;914    					if(GPRS_Para.IMEISendCntFlag == 0)
0002fc  4608              MOV      r0,r1
0002fe  f890006b          LDRB     r0,[r0,#0x6b]  ; GPRS_Para
000302  b920              CBNZ     r0,|L24.782|
;;;915    					{
;;;916    						//此时触发一次M寄存器上报
;;;917    						GPRS_Para.ParamChangeFlag |= BIT(4);
000304  4608              MOV      r0,r1
000306  6c80              LDR      r0,[r0,#0x48]  ; GPRS_Para
000308  f0400010          ORR      r0,r0,#0x10
00030c  6488              STR      r0,[r1,#0x48]  ; GPRS_Para
                  |L24.782|
;;;918              }
;;;919    					GPRS_Para.IMEISendCntFlag++;
00030e  482b              LDR      r0,|L24.956|
000310  f890006b          LDRB     r0,[r0,#0x6b]  ; GPRS_Para
000314  1c40              ADDS     r0,r0,#1
000316  4929              LDR      r1,|L24.956|
000318  f881006b          STRB     r0,[r1,#0x6b]
;;;920    					if(GPRS_Para.IMEISendCntFlag >= 30)
00031c  4608              MOV      r0,r1
00031e  f890006b          LDRB     r0,[r0,#0x6b]  ; GPRS_Para
000322  281e              CMP      r0,#0x1e
000324  db0b              BLT      |L24.830|
;;;921    					{
;;;922    						GPRS_Para.IMEISendCntFlag = 0;
000326  2000              MOVS     r0,#0
000328  f881006b          STRB     r0,[r1,#0x6b]
00032c  e007              B        |L24.830|
                  |L24.814|
;;;923              }
;;;924            }
;;;925          }
;;;926    			else if(strstr((char*)UART208_RXBUF, "service.property.set"))
00032e  a155              ADR      r1,|L24.1156|
000330  4829              LDR      r0,|L24.984|
000332  f7fffffe          BL       strstr
000336  b110              CBZ      r0,|L24.830|
;;;927    			{
;;;928    				  //解析json
;;;929             Parse_208((const char*)UART208_RXBUF);
000338  4827              LDR      r0,|L24.984|
00033a  f7fffffe          BL       Parse_208
                  |L24.830|
;;;930          }
;;;931    
;;;932    		//清空接收
;;;933    		comClearRxFifo(UART208);
00033e  2001              MOVS     r0,#1
000340  f7fffffe          BL       comClearRxFifo
                  |L24.836|
;;;934      }
;;;935    
;;;936    /**********************发送部分***************************/	
;;;937    		//循环发送队列
;;;938    	  if(GPRS_Para.NetSendFlag == 0)
000344  481d              LDR      r0,|L24.956|
000346  f8900044          LDRB     r0,[r0,#0x44]  ; GPRS_Para
00034a  b9a0              CBNZ     r0,|L24.886|
;;;939    		{
;;;940    			{
;;;941    				//首先判断队列中是否存在有效命令
;;;942    				if(!GPRS_IsQueueEmpty(&g_GPRSQueue))
00034c  4853              LDR      r0,|L24.1180|
00034e  f7fffffe          BL       GPRS_IsQueueEmpty
000352  bb78              CBNZ     r0,|L24.948|
;;;943    				{
;;;944    					//获得队头元素
;;;945    					//GPRS_GetHead(&g_GPRSQueue,&e);
;;;946    					GPRS_DeQueue(&g_GPRSQueue,&e);
000354  4952              LDR      r1,|L24.1184|
000356  4851              LDR      r0,|L24.1180|
000358  f7fffffe          BL       GPRS_DeQueue
;;;947    					
;;;948    					//数据发送
;;;949    			    comSendBuf(UART208,(uint8_t*)e.buf,e.len);//SIM800C_UART
00035c  4850              LDR      r0,|L24.1184|
00035e  8880              LDRH     r0,[r0,#4]  ; e
000360  b282              UXTH     r2,r0
000362  494f              LDR      r1,|L24.1184|
000364  3108              ADDS     r1,r1,#8
000366  2001              MOVS     r0,#1
000368  f7fffffe          BL       comSendBuf
;;;950    					GPRS_Para.NetSendFlag = 1;
00036c  2001              MOVS     r0,#1
00036e  4913              LDR      r1,|L24.956|
000370  f8810044          STRB     r0,[r1,#0x44]
000374  e01e              B        |L24.948|
                  |L24.886|
;;;951    				}			
;;;952    			}
;;;953        }
;;;954        else if(GPRS_Para.NetSendFlag == 1)
000376  4811              LDR      r0,|L24.956|
000378  f8900044          LDRB     r0,[r0,#0x44]  ; GPRS_Para
00037c  2801              CMP      r0,#1
00037e  d109              BNE      |L24.916|
;;;955    		{
;;;956    			//开启一个200ms定时器，最小命令时间间隔
;;;957    			bsp_StartTimer(NET_SEND_DELAY_TMR_ID, 800);//之前是200
000380  f44f7148          MOV      r1,#0x320
000384  200b              MOVS     r0,#0xb
000386  f7fffffe          BL       bsp_StartTimer
;;;958    			GPRS_Para.NetSendFlag = 2;
00038a  2002              MOVS     r0,#2
00038c  490b              LDR      r1,|L24.956|
00038e  f8810044          STRB     r0,[r1,#0x44]
000392  e00f              B        |L24.948|
                  |L24.916|
;;;959    		}			
;;;960    		else if(GPRS_Para.NetSendFlag == 2)
000394  4809              LDR      r0,|L24.956|
000396  f8900044          LDRB     r0,[r0,#0x44]  ; GPRS_Para
00039a  2802              CMP      r0,#2
00039c  d10a              BNE      |L24.948|
;;;961    		{
;;;962    			//判断是否应答超时
;;;963    			if(bsp_CheckTimer(NET_SEND_DELAY_TMR_ID))
00039e  200b              MOVS     r0,#0xb
0003a0  f7fffffe          BL       bsp_CheckTimer
0003a4  b130              CBZ      r0,|L24.948|
;;;964    			{
;;;965    				bsp_StopTimer(NET_SEND_DELAY_TMR_ID);
0003a6  200b              MOVS     r0,#0xb
0003a8  f7fffffe          BL       bsp_StopTimer
;;;966    				GPRS_Para.NetSendFlag = 0;
0003ac  2000              MOVS     r0,#0
0003ae  4903              LDR      r1,|L24.956|
0003b0  f8810044          STRB     r0,[r1,#0x44]
                  |L24.948|
;;;967          }		
;;;968    		}
;;;969    		
;;;970    	return 0;
0003b4  2000              MOVS     r0,#0
;;;971    
;;;972    }
0003b6  bd7c              POP      {r2-r6,pc}
;;;973    
                          ENDP

                  |L24.952|
                          DCD      FirstStart
                  |L24.956|
                          DCD      GPRS_Para
                  |L24.960|
                          DCD      Air208RunSta_bak
                  |L24.964|
0003c4  434f4e4e          DCB      "CONNECT LINK ID:",0
0003c8  45435420
0003cc  4c494e4b
0003d0  2049443a
0003d4  00      
0003d5  00                DCB      0
0003d6  00                DCB      0
0003d7  00                DCB      0
                  |L24.984|
                          DCD      g_RxBuf2
                  |L24.988|
0003dc  434c4f53          DCB      "CLOSE LINK ID:",0
0003e0  45204c49
0003e4  4e4b2049
0003e8  443a00  
0003eb  00                DCB      0
                  |L24.1004|
0003ec  72727063          DCB      "rrpc,netstatus",0
0003f0  2c6e6574
0003f4  73746174
0003f8  757300  
0003fb  00                DCB      0
                  |L24.1020|
0003fc  72727063          DCB      "rrpc,netstatus,OK",0
000400  2c6e6574
000404  73746174
000408  75732c4f
00040c  4b00    
00040e  00                DCB      0
00040f  00                DCB      0
                  |L24.1040|
000410  72727063          DCB      "rrpc,netstatus,ERROR",0
000414  2c6e6574
000418  73746174
00041c  75732c45
000420  52524f52
000424  00      
000425  00                DCB      0
000426  00                DCB      0
000427  00                DCB      0
                  |L24.1064|
000428  72727063          DCB      "rrpc,nettime",0
00042c  2c6e6574
000430  74696d65
000434  00      
000435  00                DCB      0
000436  00                DCB      0
000437  00                DCB      0
                  |L24.1080|
000438  72727063          DCB      "rrpc,nettime,error",0
00043c  2c6e6574
000440  74696d65
000444  2c657272
000448  6f7200  
00044b  00                DCB      0
                  |L24.1100|
00044c  72727063          DCB      "rrpc,getimei",0
000450  2c676574
000454  696d6569
000458  00      
000459  00                DCB      0
00045a  00                DCB      0
00045b  00                DCB      0
                  |L24.1116|
                          DCD      g_tUart2
                  |L24.1120|
000460  72727063          DCB      "rrpc,geticcid",0
000464  2c676574
000468  69636369
00046c  6400    
00046e  00                DCB      0
00046f  00                DCB      0
                  |L24.1136|
000470  72727063          DCB      "rrpc,getcsq",0
000474  2c676574
000478  63737100
                  |L24.1148|
00047c  6572726f          DCB      "error",0
000480  7200    
000482  00                DCB      0
000483  00                DCB      0
                  |L24.1156|
000484  73657276          DCB      "service.property.set",0
000488  6963652e
00048c  70726f70
000490  65727479
000494  2e736574
000498  00      
000499  00                DCB      0
00049a  00                DCB      0
00049b  00                DCB      0
                  |L24.1180|
                          DCD      g_GPRSQueue
                  |L24.1184|
                          DCD      e

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  e
                          %        520

                          AREA ||.data||, DATA, ALIGN=0

                  ctl_flag
000000  00                DCB      0x00
                  FirstStart
000001  00                DCB      0x00
                  Air208RunSta_bak
000002  ff                DCB      0xff

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\luat_air208.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_luat_air208_c_38a98a87____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_luat_air208_c_38a98a87____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_luat_air208_c_38a98a87____REVSH|
#line 128
|__asm___13_luat_air208_c_38a98a87____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
