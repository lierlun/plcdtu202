; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\bsp_spi_bus.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\bsp_spi_bus.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -I..\..\Malloc -I..\..\User\Modbus -Id:\Keil_v4\ARM\RV31\INC -Id:\Keil_v4\ARM\CMSIS\Include -Id:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Flash\Obj\bsp_spi_bus.crf ..\..\User\bsp\src\bsp_spi_bus.c]
                          THUMB

                          AREA ||i.bsp_InitSPIBus||, CODE, READONLY, ALIGN=2

                  bsp_InitSPIBus PROC
;;;71     */
;;;72     void bsp_InitSPIBus(void)
000000  b508              PUSH     {r3,lr}
;;;73     {
;;;74     #ifdef SOFT_SPI		/* 软件SPI */
;;;75     	GPIO_InitTypeDef  GPIO_InitStructure;
;;;76     
;;;77     	/* 打开GPIO时钟 */
;;;78     	RCC_APB2PeriphClockCmd(RCC_SCK | RCC_MOSI | RCC_MISO, ENABLE);	
;;;79     
;;;80     	/* 配置SPI引脚SCK、MISO 和 MOSI为复用推挽模式 */
;;;81     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;82     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
;;;83     	GPIO_InitStructure.GPIO_Pin = PIN_SCK;
;;;84     	GPIO_Init(PORT_SCK, &GPIO_InitStructure);
;;;85     
;;;86     	GPIO_InitStructure.GPIO_Pin = PIN_MOSI;
;;;87     	GPIO_Init(PORT_MOSI, &GPIO_InitStructure);	
;;;88     
;;;89     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;		/* MISO 设置为输入上拉 */
;;;90     	GPIO_InitStructure.GPIO_Pin = PIN_MISO;
;;;91     	GPIO_Init(PORT_MISO, &GPIO_InitStructure);
;;;92     #endif
;;;93     
;;;94     #ifdef HARD_SPI		/* 硬件SPI */
;;;95     	GPIO_InitTypeDef GPIO_InitStructure;
;;;96     
;;;97     	/* 开启 SPI 时钟 */
;;;98     	//RCC_APB2PeriphClockCmd(RCC_SPI, ENABLE);
;;;99     	
;;;100    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
000002  2101              MOVS     r1,#1
000004  0308              LSLS     r0,r1,#12
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;101    	
;;;102    	/* 使能 GPIO 时钟 */
;;;103    	RCC_APB2PeriphClockCmd(RCC_SCK | RCC_MOSI | RCC_MISO, ENABLE);	
00000a  2101              MOVS     r1,#1
00000c  2004              MOVS     r0,#4
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;104    
;;;105    	/* 配置 SPI引脚SCK、MISO 和 MOSI为复用推挽模式 */
;;;106    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000012  2018              MOVS     r0,#0x18
000014  f88d0003          STRB     r0,[sp,#3]
;;;107    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
00001a  f88d0002          STRB     r0,[sp,#2]
;;;108    	GPIO_InitStructure.GPIO_Pin = PIN_SCK;	
00001e  2020              MOVS     r0,#0x20
000020  f8ad0000          STRH     r0,[sp,#0]
;;;109    	GPIO_Init(PORT_SCK, &GPIO_InitStructure);
000024  4669              MOV      r1,sp
000026  4813              LDR      r0,|L1.116|
000028  f7fffffe          BL       GPIO_Init
;;;110    	
;;;111    	GPIO_InitStructure.GPIO_Pin = PIN_MISO;	
00002c  2040              MOVS     r0,#0x40
00002e  f8ad0000          STRH     r0,[sp,#0]
;;;112    	GPIO_Init(PORT_MISO, &GPIO_InitStructure);
000032  4669              MOV      r1,sp
000034  480f              LDR      r0,|L1.116|
000036  f7fffffe          BL       GPIO_Init
;;;113    
;;;114    	GPIO_InitStructure.GPIO_Pin = PIN_MOSI;	
00003a  2080              MOVS     r0,#0x80
00003c  f8ad0000          STRH     r0,[sp,#0]
;;;115    	GPIO_Init(PORT_MOSI, &GPIO_InitStructure);
000040  4669              MOV      r1,sp
000042  480c              LDR      r0,|L1.116|
000044  f7fffffe          BL       GPIO_Init
;;;116    		
;;;117    	bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
000048  f44f704b          MOV      r0,#0x32c
00004c  f7fffffe          BL       bsp_SPI_Init
;;;118    		| SPI_CPOL_Low | SPI_CPHA_1Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_64 | SPI_FirstBit_MSB);	
;;;119    	
;;;120    	/* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;121    	SPI_HARD->I2SCFGR &= SPI_Mode_Select;		/* 选择SPI模式，不是I2S模式 */
000050  4809              LDR      r0,|L1.120|
000052  8b80              LDRH     r0,[r0,#0x1c]
000054  f24f71ff          MOV      r1,#0xf7ff
000058  4008              ANDS     r0,r0,r1
00005a  4907              LDR      r1,|L1.120|
00005c  8388              STRH     r0,[r1,#0x1c]
;;;122    
;;;123    	/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;124    	/* Write to SPIx CRCPOLY */
;;;125    	SPI_HARD->CRCPR = 7;		/* 一般不用 */
00005e  2007              MOVS     r0,#7
000060  8208              STRH     r0,[r1,#0x10]
;;;126    
;;;127    
;;;128    	SPI_Cmd(SPI_HARD, DISABLE);			/* 先禁止SPI  */
000062  2100              MOVS     r1,#0
000064  4804              LDR      r0,|L1.120|
000066  f7fffffe          BL       SPI_Cmd
;;;129    
;;;130    	SPI_Cmd(SPI_HARD, ENABLE);			/* 使能SPI  */
00006a  2101              MOVS     r1,#1
00006c  4802              LDR      r0,|L1.120|
00006e  f7fffffe          BL       SPI_Cmd
;;;131    #endif
;;;132    }
000072  bd08              POP      {r3,pc}
;;;133    
                          ENDP

                  |L1.116|
                          DCD      0x40010800
                  |L1.120|
                          DCD      0x40013000

                          AREA ||i.bsp_SPI_Init||, CODE, READONLY, ALIGN=2

                  bsp_SPI_Init PROC
;;;142    #ifdef HARD_SPI		/* 硬件SPI */
;;;143    void bsp_SPI_Init(uint16_t _cr1)
000000  4909              LDR      r1,|L2.40|
;;;144    {
;;;145    	SPI_HARD->CR1 = ((SPI_HARD->CR1 & CR1_CLEAR_Mask) | _cr1);
000002  8809              LDRH     r1,[r1,#0]
000004  f4015141          AND      r1,r1,#0x3040
000008  4301              ORRS     r1,r1,r0
00000a  4a07              LDR      r2,|L2.40|
00000c  8011              STRH     r1,[r2,#0]
;;;146    	  
;;;147    	//SPI_Cmd(SPI_HARD, DISABLE);			/* 先禁止SPI  */	    
;;;148        SPI_HARD->CR1 &= CR1_SPE_Reset;	/* Disable the selected SPI peripheral */
00000e  4611              MOV      r1,r2
000010  8809              LDRH     r1,[r1,#0]
000012  f64f72bf          MOV      r2,#0xffbf
000016  4011              ANDS     r1,r1,r2
000018  4a03              LDR      r2,|L2.40|
00001a  8011              STRH     r1,[r2,#0]
;;;149    
;;;150    	//SPI_Cmd(SPI_HARD, ENABLE);			/* 使能SPI  */		    
;;;151        SPI_HARD->CR1 |= CR1_SPE_Set;	  /* Enable the selected SPI peripheral */
00001c  4611              MOV      r1,r2
00001e  8809              LDRH     r1,[r1,#0]
000020  f0410140          ORR      r1,r1,#0x40
000024  8011              STRH     r1,[r2,#0]
;;;152    }
000026  4770              BX       lr
;;;153    #endif
                          ENDP

                  |L2.40|
                          DCD      0x40013000

                          AREA ||i.bsp_SpiBusBusy||, CODE, READONLY, ALIGN=2

                  bsp_SpiBusBusy PROC
;;;397    */
;;;398    uint8_t bsp_SpiBusBusy(void)
000000  4801              LDR      r0,|L3.8|
;;;399    {
;;;400    	return g_spi_busy;
000002  7800              LDRB     r0,[r0,#0]  ; g_spi_busy
;;;401    }
000004  4770              BX       lr
;;;402    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      g_spi_busy

                          AREA ||i.bsp_SpiBusEnter||, CODE, READONLY, ALIGN=2

                  bsp_SpiBusEnter PROC
;;;371    */
;;;372    void bsp_SpiBusEnter(void)
000000  2001              MOVS     r0,#1
;;;373    {
;;;374    	g_spi_busy = 1;
000002  4901              LDR      r1,|L4.8|
000004  7008              STRB     r0,[r1,#0]
;;;375    }
000006  4770              BX       lr
;;;376    
                          ENDP

                  |L4.8|
                          DCD      g_spi_busy

                          AREA ||i.bsp_SpiBusExit||, CODE, READONLY, ALIGN=2

                  bsp_SpiBusExit PROC
;;;384    */
;;;385    void bsp_SpiBusExit(void)
000000  2000              MOVS     r0,#0
;;;386    {
;;;387    	g_spi_busy = 0;
000002  4901              LDR      r1,|L5.8|
000004  7008              STRB     r0,[r1,#0]
;;;388    }
000006  4770              BX       lr
;;;389    
                          ENDP

                  |L5.8|
                          DCD      g_spi_busy

                          AREA ||i.bsp_spiRead0||, CODE, READONLY, ALIGN=2

                  bsp_spiRead0 PROC
;;;226    */
;;;227    uint8_t bsp_spiRead0(void)
000000  b510              PUSH     {r4,lr}
;;;228    {
;;;229    #ifdef SOFT_SPI		/* 软件SPI */
;;;230    	uint8_t i;
;;;231    	uint8_t read = 0;
;;;232    
;;;233    	for (i = 0; i < 8; i++)
;;;234    	{
;;;235    		read = read<<1;
;;;236    
;;;237    		if (MISO_IS_HIGH())
;;;238    		{
;;;239    			read++;
;;;240    		}
;;;241    		SCK_1();
;;;242    		bsp_spiDelay();
;;;243    		SCK_0();
;;;244    		bsp_spiDelay();
;;;245    	}
;;;246    	return read;
;;;247    #endif
;;;248    
;;;249    #ifdef HARD_SPI		/* 硬件SPI */
;;;250    	uint8_t read;
;;;251    
;;;252    	/* 等待发送缓冲区空 */
;;;253    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000002  bf00              NOP      
                  |L6.4|
000004  2102              MOVS     r1,#2
000006  480b              LDR      r0,|L6.52|
000008  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000c  2800              CMP      r0,#0
00000e  d0f9              BEQ      |L6.4|
;;;254    
;;;255    	/* 发送一个字节 */
;;;256    	SPI_I2S_SendData(SPI1, 0);
000010  2100              MOVS     r1,#0
000012  4808              LDR      r0,|L6.52|
000014  f7fffffe          BL       SPI_I2S_SendData
;;;257    
;;;258    	/* 等待数据接收完毕 */
;;;259    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
000018  bf00              NOP      
                  |L6.26|
00001a  2101              MOVS     r1,#1
00001c  4805              LDR      r0,|L6.52|
00001e  f7fffffe          BL       SPI_I2S_GetFlagStatus
000022  2800              CMP      r0,#0
000024  d0f9              BEQ      |L6.26|
;;;260    
;;;261    	/* 读取接收到的数据 */
;;;262    	read = SPI_I2S_ReceiveData(SPI1);
000026  4803              LDR      r0,|L6.52|
000028  f7fffffe          BL       SPI_I2S_ReceiveData
00002c  b2c4              UXTB     r4,r0
;;;263    
;;;264    	/* 返回读到的数据 */
;;;265    	return read;
00002e  4620              MOV      r0,r4
;;;266    #endif
;;;267    }
000030  bd10              POP      {r4,pc}
;;;268    
                          ENDP

000032  0000              DCW      0x0000
                  |L6.52|
                          DCD      0x40013000

                          AREA ||i.bsp_spiRead1||, CODE, READONLY, ALIGN=2

                  bsp_spiRead1 PROC
;;;322    */
;;;323    uint8_t bsp_spiRead1(void)
000000  b510              PUSH     {r4,lr}
;;;324    {
;;;325    #ifdef SOFT_SPI		/* 软件SPI */
;;;326    	uint8_t i;
;;;327    	uint8_t read = 0;
;;;328    
;;;329    	for (i = 0; i < 8; i++)
;;;330    	{
;;;331    		SCK_0();
;;;332    		bsp_spiDelay();
;;;333    		read = read << 1;
;;;334    		if (MISO_IS_HIGH())
;;;335    		{
;;;336    			read++;
;;;337    		}
;;;338    		SCK_1();
;;;339    		bsp_spiDelay();
;;;340    	}
;;;341    	return read;
;;;342    #endif
;;;343    
;;;344    #ifdef HARD_SPI		/* 硬件SPI */
;;;345    	uint8_t read;
;;;346    
;;;347    	/* 等待发送缓冲区空 */
;;;348    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000002  bf00              NOP      
                  |L7.4|
000004  2102              MOVS     r1,#2
000006  480b              LDR      r0,|L7.52|
000008  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000c  2800              CMP      r0,#0
00000e  d0f9              BEQ      |L7.4|
;;;349    
;;;350    	/* 发送一个字节 */
;;;351    	SPI_I2S_SendData(SPI1, 0);
000010  2100              MOVS     r1,#0
000012  4808              LDR      r0,|L7.52|
000014  f7fffffe          BL       SPI_I2S_SendData
;;;352    
;;;353    	/* 等待数据接收完毕 */
;;;354    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
000018  bf00              NOP      
                  |L7.26|
00001a  2101              MOVS     r1,#1
00001c  4805              LDR      r0,|L7.52|
00001e  f7fffffe          BL       SPI_I2S_GetFlagStatus
000022  2800              CMP      r0,#0
000024  d0f9              BEQ      |L7.26|
;;;355    
;;;356    	/* 读取接收到的数据 */
;;;357    	read = SPI_I2S_ReceiveData(SPI1);
000026  4803              LDR      r0,|L7.52|
000028  f7fffffe          BL       SPI_I2S_ReceiveData
00002c  b2c4              UXTB     r4,r0
;;;358    
;;;359    	/* 返回读到的数据 */
;;;360    	return read;
00002e  4620              MOV      r0,r4
;;;361    #endif
;;;362    }
000030  bd10              POP      {r4,pc}
;;;363    
                          ENDP

000032  0000              DCW      0x0000
                  |L7.52|
                          DCD      0x40013000

                          AREA ||i.bsp_spiWrite0||, CODE, READONLY, ALIGN=2

                  bsp_spiWrite0 PROC
;;;179    */
;;;180    void bsp_spiWrite0(uint8_t _ucByte)
000000  b510              PUSH     {r4,lr}
;;;181    {
000002  4604              MOV      r4,r0
;;;182    #ifdef SOFT_SPI		/* 软件SPI */
;;;183    	uint8_t i;
;;;184    
;;;185    	for(i = 0; i < 8; i++)
;;;186    	{
;;;187    		if (_ucByte & 0x80)
;;;188    		{
;;;189    			MOSI_1();
;;;190    		}
;;;191    		else
;;;192    		{
;;;193    			MOSI_0();
;;;194    		}
;;;195    		bsp_spiDelay();
;;;196    		SCK_1();
;;;197    		_ucByte <<= 1;
;;;198    		bsp_spiDelay();
;;;199    		SCK_0();
;;;200    	}
;;;201    	bsp_spiDelay();
;;;202    #endif
;;;203    
;;;204    #ifdef HARD_SPI		/* 硬件SPI */
;;;205    	/* 等待发送缓冲区空 */
;;;206    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000004  bf00              NOP      
                  |L8.6|
000006  2102              MOVS     r1,#2
000008  4809              LDR      r0,|L8.48|
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L8.6|
;;;207    
;;;208    	/* 发送一个字节 */
;;;209    	SPI_I2S_SendData(SPI1, _ucByte);
000012  4621              MOV      r1,r4
000014  4806              LDR      r0,|L8.48|
000016  f7fffffe          BL       SPI_I2S_SendData
;;;210    
;;;211    	/* 等待数据接收完毕 */
;;;212    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
00001a  bf00              NOP      
                  |L8.28|
00001c  2101              MOVS     r1,#1
00001e  4804              LDR      r0,|L8.48|
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L8.28|
;;;213    
;;;214    	/* 读取接收到的数据 */
;;;215    	SPI_I2S_ReceiveData(SPI1);
000028  4801              LDR      r0,|L8.48|
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
;;;216    #endif
;;;217    }
00002e  bd10              POP      {r4,pc}
;;;218    
                          ENDP

                  |L8.48|
                          DCD      0x40013000

                          AREA ||i.bsp_spiWrite1||, CODE, READONLY, ALIGN=2

                  bsp_spiWrite1 PROC
;;;276    */
;;;277    void bsp_spiWrite1(uint8_t _ucByte)
000000  b510              PUSH     {r4,lr}
;;;278    {
000002  4604              MOV      r4,r0
;;;279    #ifdef SOFT_SPI		/* 软件SPI */
;;;280    	uint8_t i;
;;;281    
;;;282    	for(i = 0; i < 8; i++)
;;;283    	{
;;;284    		if (_ucByte & 0x80)
;;;285    		{
;;;286    			MOSI_1();
;;;287    		}
;;;288    		else
;;;289    		{
;;;290    			MOSI_0();
;;;291    		}
;;;292    		SCK_0();
;;;293    		_ucByte <<= 1;
;;;294    		bsp_spiDelay();
;;;295    		SCK_1();				/* SCK上升沿采集数据, SCK空闲时为高电平 */
;;;296    		bsp_spiDelay();
;;;297    	}
;;;298    #endif
;;;299    
;;;300    #ifdef HARD_SPI		/* 硬件SPI */
;;;301    	/* 等待发送缓冲区空 */
;;;302    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000004  bf00              NOP      
                  |L9.6|
000006  2102              MOVS     r1,#2
000008  4809              LDR      r0,|L9.48|
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L9.6|
;;;303    
;;;304    	/* 发送一个字节 */
;;;305    	SPI_I2S_SendData(SPI1, _ucByte);
000012  4621              MOV      r1,r4
000014  4806              LDR      r0,|L9.48|
000016  f7fffffe          BL       SPI_I2S_SendData
;;;306    
;;;307    	/* 等待数据接收完毕 */
;;;308    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
00001a  bf00              NOP      
                  |L9.28|
00001c  2101              MOVS     r1,#1
00001e  4804              LDR      r0,|L9.48|
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L9.28|
;;;309    
;;;310    	/* 读取接收到的数据 */
;;;311    	SPI_I2S_ReceiveData(SPI1);
000028  4801              LDR      r0,|L9.48|
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
;;;312    #endif
;;;313    }
00002e  bd10              POP      {r4,pc}
;;;314    
                          ENDP

                  |L9.48|
                          DCD      0x40013000

                          AREA ||.data||, DATA, ALIGN=0

                  g_spi_busy
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_spi_bus.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_bsp_spi_bus_c_c88bcf96____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_spi_bus_c_c88bcf96____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_bsp_spi_bus_c_c88bcf96____REVSH|
#line 128
|__asm___13_bsp_spi_bus_c_c88bcf96____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
