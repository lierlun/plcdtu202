L 1 "..\..\User\Modbus\Trans_queue.c"
N#include "Trans_queue.h"
L 1 "..\..\User\Modbus\Trans_queue.h" 1
N#ifndef _TRANS_QUEUE_H
N#define _TRANS_QUEUE_H
N#include "modbus.h"
L 1 "..\..\User\Modbus\modbus.h" 1
N#ifndef _MODBUS_H_
N#define _MODBUS_H_
N#include <stdint.h>
L 1 "d:\Keil_v4\ARM\ARMCC\bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5030024
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N * '__int64' is used instead of 'long long' so that this header
N * can be used in --strict mode.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed       __int64 intmax_t;
Ntypedef unsigned       __int64 uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __ESCAPE__(~0x7fffffffffffffffll) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#define INTPTR_MIN (~0x7fffffff)
N
N    /* maximum value of pointer-holding signed integer type */
N#define INTPTR_MAX   2147483647
N
N    /* maximum value of pointer-holding unsigned integer type */
N#define UINTPTR_MAX  4294967295u
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#define PTRDIFF_MIN (~0x7fffffff)
N#define PTRDIFF_MAX   2147483647
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#define SIZE_MAX 4294967295u
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32)
X#if 0L
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __ESCAPE__(x ## ll)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __ESCAPE__(x ## ull)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif 
N  #endif /* __cplusplus */
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
N
N
N
L 4 "..\..\User\Modbus\modbus.h" 2
N
N#define ON			                        1
N#define OFF			                        0
N
N#define ASCII                           0
N#define RTU                             1
N
N#define D8BITNUM			                  8
N#define D16BITNUM			                  16
N
N
N//MODBUS
N#define MB_BITCOIL_RD		    0x01		//读线圈
N#define MB_BITINP_RD		    0x02		//读离散量输入
N#define MB_REGHOLD_RD		    0x03		//读保持寄存器
N#define MB_REGINP_RD		    0x04		//读输入寄存器
N#define MB_BITCOIL_WT		    0x05		//写单个线圈
N#define MB_REGHOLD_WT		    0x06		//写单个保持寄存器
N#define MB_MULTICOIL_WT		  0x0F		//写多个线圈
N#define MB_MULTIREG_WT		  0x10		//写多个保持寄存器
N
N#define MB_ERR_FUNCODE		  0x01		//非法功能
N#define MB_ERR_ADDR		      0x02		//非法数据地址
N#define MB_ERR_DATE		      0x03		//非法数据值
N#define MB_ERR_SLAVE		    0x04		//从设备故障
N#define MB_ERR_HANDLE		    0x05		//执行确认
N#define MB_ERR_SLBUSY		    0x06		//从设备忙
N#define MB_ERR_ODDEVEN		  0x07		//存储奇偶校验错误
N
N
N#define	MBMAX_BITINP_RD		2000L		  //离散输入量连续读取最大数量
N#define	MBMAX_BITCOIL_RD	2000L		  //线圈连续读取的最大数量
N#define	MBMAX_BITCOIL_WT	2000L		  //线圈连续写入的最大数量
N#define	MBMAX_REGINP_RD		512L		  //输入寄存器连续读取的最大数量
N#define	MBMAX_REGHOLD_RD	512L		  //保持寄存器连续读取的最大数量
N#define	MBMAX_REGHOLD_WT	512L		  //保持寄存器连续写入的最大数量
N
N
N#define	MB_OFF				  (uint16_t)0x0000
N#define	MB_ON				    (uint16_t)0xFF00
N
N	                        
Ntypedef union	_DAT16
N{
N	uint16_t d16;
N	struct
N	{
N		uint8_t Lo;
N		uint8_t Hi;
N	}d8;
N}uDAT16;
N
Ntypedef union	_DAT32
N{
N	uint32_t d32;
N	union _DAT16 d16[2];
N}uDAT32;
N
N
N#define PERIOD_CNT            0xffff
N//modbus主机命令结构体
Ntypedef struct
N{
N	uint16_t slave;           //从机地址
N	uint16_t func;	          //功能码			
N	uint16_t addr;				    //首地址
N	uint16_t cnt;							//待读取个数
N	uint32_t startTimeout;    //通讯超时起始时间            
N	uint32_t timeout;					//通讯超时时间间隔
N	uint32_t startPeriod;     //通讯周期起始时间            
N	uint32_t period;          //通讯周期间隔     
N	uint16_t commCnt;         //该条命令的通讯次数，0xffff表示无限次数   
N	uint16_t timeoutcnt;      //错误计数
N}_CMD;
N
N//modbus主机状态
Ntypedef struct 
N{
N	uint16_t rep;																				
N	uint8_t  PLCCOMFlag;	 	            
N}_MTCMD;
N
N#endif
L 4 "..\..\User\Modbus\Trans_queue.h" 2
N#include "queue.h"
L 1 "..\..\User\Modbus\queue.h" 1
N#ifndef _QUEUE_H
N#define _QUEUE_H
N#include "modbus.h"
N//定义函数结果状态码
N#ifndef OK
N#define OK         1
N#endif
N
N#ifndef ERROR
N#define ERROR      0
N#endif
N
N#ifndef TRUE
N#define TRUE       1
N#endif
N
N#ifndef FALSE
N#define FALSE      0
N#endif
N
N//定义循环队列空间大小
N#define QUEUESIZE 50
N
N//定义数据类型
Ntypedef _CMD           ElemType ;
N//定义程序返回状态类型
Ntypedef unsigned char  State;
N
N//循环队列存储结构
Ntypedef struct _CircleQueue
N{
N    ElemType data[QUEUESIZE];//存储队列元素
X    ElemType data[50];
N    int      front;          //队列头指针
N    int      rear;           //队列尾指针
N    int      count;          //队列元素个数
N}CircleQueue;
N
Nextern CircleQueue g_M485Cmd;
N
NState InitQueue(CircleQueue *queue);
NState IsQueueEmpty(CircleQueue *queue);
NState IsQueueFull(CircleQueue *queue);
NState EnQueue(CircleQueue *queue, ElemType e);
NState DeQueue(CircleQueue *queue,ElemType *e);
NState GetHead(CircleQueue *queue,ElemType *e);
NState SetHead(CircleQueue *queue,ElemType e);
NState ClearQueue(CircleQueue *queue );
Nint   GetLength(CircleQueue *queue);
N#endif
L 5 "..\..\User\Modbus\Trans_queue.h" 2
N//定义函数结果状态码
N#ifndef OK
S#define OK         1
N#endif
N
N#ifndef ERROR
S#define ERROR      0
N#endif
N
N#ifndef TRUE
S#define TRUE       1
N#endif
N
N#ifndef FALSE
S#define FALSE      0
N#endif
N
N//定义循环队列空间大小
N#define T_QUEUESIZE 15
N
N#define T_BUF_LEN        100
Ntypedef struct
N{
N	char len;
N	char buf[T_BUF_LEN];
X	char buf[100];
N}TRANS_BUF;
N
N//定义数据类型
Ntypedef TRANS_BUF      T_ElemType ;
N
N//定义程序返回状态类型
Ntypedef unsigned char  State;
N
N//循环队列存储结构
Ntypedef struct _TCircleQueue
N{
N    //T_ElemType data[T_QUEUESIZE];//存储队列元素
N	  ElemType   data[T_QUEUESIZE];//存储队列元素
X	  ElemType   data[15];
N    int        front;            //队列头指针
N    int        rear;             //队列尾指针
N    int        count;            //队列元素个数
N}TCircleQueue;
N
Nextern TCircleQueue Trans_Queue;
N
NState T_InitQueue(TCircleQueue *queue);
NState T_IsQueueEmpty(TCircleQueue *queue);
NState T_IsQueueFull(TCircleQueue *queue);
NState T_EnQueue(TCircleQueue *queue, ElemType e);
NState T_DeQueue(TCircleQueue *queue,ElemType *e);
NState T_GetHead(TCircleQueue *queue,ElemType *e);
NState T_SetHead(TCircleQueue *queue,ElemType e);
NState T_ClearQueue(TCircleQueue *queue );
Nint   T_GetLength(TCircleQueue *queue);
N#endif
L 2 "..\..\User\Modbus\Trans_queue.c" 2
NTCircleQueue Trans_Queue;
N
N/*---------------------------InitQueue----------------------------------------
N *  功能：    初始化队列
N *  参数:     queue：需要初始化的队列                   
N *  返回:     成功返回OK
N *  编写时间：2014年4月22日
N *  编写人：  张永强
N *  修改时间：
N *  修改人：
N *---------------------------------------------------------------------------*/
NState T_InitQueue(TCircleQueue *queue)
N{
N    queue->front = 0; 
N	  queue->rear = 0;
N    queue->count = 0;
N    return OK;
X    return 1;
N}
N
N//判断队列为空和满
N//1、使用计数器count,队列为空和满时，front都等于rear
N//2、少用一个元素的空间，约定队列满时：(rear+1)%QUEUESIZE=front,为空时front=rear
N//rear指向队尾元素的下一个位置，始终为空；队列的长度为(rear-front+QUEUESIZE)%QUEUESIZE
N
N/*---------------------------IsQueueEmpty------------------------------------
N *  功能：    判断队列是否为空
N *  参数:     queue：指向相应队列的指针                   
N *  返回:     成功返回OK
N *  编写时间：2014年4月22日
N *  编写人：  张永强
N *  修改时间：
N *  修改人：
N *---------------------------------------------------------------------------*/
NState T_IsQueueEmpty(TCircleQueue *queue)
N{
N    if(queue->count == 0)
N        return TRUE;
X        return 1;
N    else
N        return FALSE;
X        return 0;
N}
N
N/*---------------------------IsQueueFull------------------------------------
N *  功能：    判断队列是否满
N *  参数:     queue：指向相应队列的指针                   
N *  返回:     成功返回OK
N *  编写时间：2014年4月22日
N *  编写人：  张永强
N *  修改时间：
N *  修改人：
N *---------------------------------------------------------------------------*/
NState T_IsQueueFull(TCircleQueue *queue)
N{
N    if(queue->count == T_QUEUESIZE)
X    if(queue->count == 15)
N        return TRUE;
X        return 1;
N    else
N        return FALSE;
X        return 0;
N}
N
N/*---------------------------EnQueue----------------------------------------
N *  功能：    判断队列是否满
N *  参数:     queue：指向相应队列的指针 
N *            e:需要入队的元素                  
N *  返回:     成功返回OK
N *  编写时间：2014年4月22日
N *  编写人：  张永强
N *  修改时间：
N *  修改人：
N *---------------------------------------------------------------------------*/
NState T_EnQueue(TCircleQueue *queue, ElemType e)
N{
N    //验证队列是否已满
N    if(queue->count == T_QUEUESIZE)
X    if(queue->count == 15)
N       return ERROR;
X       return 0;
N    //入队
N    queue->data[queue->rear] = e;
N    //对尾指针后移
N    queue->rear = (queue->rear + 1) % T_QUEUESIZE;
X    queue->rear = (queue->rear + 1) % 15;
N    //更新队列长度
N    queue->count++;
N    return OK;
X    return 1;
N
N}
N
N/*---------------------------DeQueue----------------------------------------
N *  功能：    出队
N *  参数:     queue：指向相应队列的指针 
N *            e:指向取出元素的指针                  
N *  返回:     成功返回OK
N *  编写时间：2014年4月22日
N *  编写人：  张永强
N *  修改时间：
N *  修改人：
N *---------------------------------------------------------------------------*/
NState T_DeQueue(TCircleQueue *queue,ElemType *e)
N{
N    //判断队列是否为空
N    if(queue->count == 0)
N	  return ERROR;
X	  return 0;
N    //保存返回值
N    *e = queue->data[queue->front];
N    //更新队头指针
N    queue->front = (queue->front + 1) % T_QUEUESIZE;
X    queue->front = (queue->front + 1) % 15;
N    //更新队列长度
N    queue->count--;
N    return OK;
X    return 1;
N
N}
N
N
N/*---------------------------GetHead----------------------------------------
N *  功能：    获取队列的队首元素
N *  参数:     queue：指向相应队列的指针 
N *            e:指向队首元素的指针                  
N *  返回:     成功返回OK
N *  编写时间：2014年4月22日
N *  编写人：  张永强
N *  修改时间：
N *  修改人：
N *---------------------------------------------------------------------------*/
NState T_GetHead(TCircleQueue *queue,ElemType *e)
N{
N    //判断队列是否为空
N    if(queue->count == 0)
N	   return ERROR;
X	   return 0;
N
N    *e = queue->data[queue->front];
N	return OK;
X	return 1;
N}
N
N/*---------------------------SetHead----------------------------------------
N *  功能：    设置队列的队首元素
N *  参数:     queue：指向相应队列的指针 
N *            e:指向队首元素的指针                  
N *  返回:     成功返回OK
N *  编写时间：2014年4月22日
N *  编写人：  张永强
N *  修改时间：
N *  修改人：
N *---------------------------------------------------------------------------*/
NState T_SetHead(TCircleQueue *queue,ElemType e)
N{
N    //判断队列是否为空
N    if(queue->count == 0)
N	   return ERROR;
X	   return 0;
N
N    queue->data[queue->front] = e;
N	return OK;
X	return 1;
N}
N
N/*---------------------------ClearQueue----------------------------------------
N *  功能：    清空队列
N *  参数:     queue：指向相应队列的指针                 
N *  返回:     成功返回OK
N *  编写时间：2014年4月22日
N *  编写人：  张永强
N *  修改时间：
N *  修改人：
N *---------------------------------------------------------------------------*/
NState T_ClearQueue(TCircleQueue *queue )
N{
N    queue->front = 0;
N	  queue->rear = 0;
N    queue->count = 0;
N    return OK;
X    return 1;
N
N}
N
N/*---------------------------GetLength----------------------------------------
N *  功能：    获取队列的长度
N *  参数:     queue：指向相应队列的指针                 
N *  返回:     成功返回OK
N *  编写时间：2014年4月22日
N *  编写人：  张永强
N *  修改时间：
N *  修改人：
N *---------------------------------------------------------------------------*/
Nint T_GetLength(TCircleQueue *queue)
N{
N    return queue->count;
N}
