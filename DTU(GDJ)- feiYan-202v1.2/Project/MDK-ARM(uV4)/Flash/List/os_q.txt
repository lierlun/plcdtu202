; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\os_q.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\os_q.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -I..\..\Malloc -I..\..\User\Modbus -Id:\Keil_v4\ARM\RV31\INC -Id:\Keil_v4\ARM\CMSIS\Include -Id:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Flash\Obj\os_q.crf ..\..\uCOS-III\uCOS-III\Source\os_q.c]
                          THUMB

                          AREA ||i.OSQCreate||, CODE, READONLY, ALIGN=2

                  OSQCreate PROC
;;;72     
;;;73     void  OSQCreate (OS_Q        *p_q,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;74                      CPU_CHAR    *p_name,
;;;75                      OS_MSG_QTY   max_qty,
;;;76                      OS_ERR      *p_err)
;;;77     
;;;78     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;79         CPU_SR_ALLOC();
00000c  f04f0800          MOV      r8,#0
;;;80     
;;;81     
;;;82     
;;;83     #ifdef OS_SAFETY_CRITICAL
;;;84         if (p_err == DEF_NULL) {
;;;85             OS_SAFETY_CRITICAL_EXCEPTION();
;;;86             return;
;;;87         }
;;;88     #endif
;;;89     
;;;90     #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;91         if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;92            *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
;;;93             return;
;;;94         }
;;;95     #endif
;;;96     
;;;97     #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;98         if (OSIntNestingCtr > 0u) {                                 /* Not allowed to be called from an ISR                 */
000010  4818              LDR      r0,|L1.116|
000012  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000014  b120              CBZ      r0,|L1.32|
;;;99            *p_err = OS_ERR_CREATE_ISR;
000016  f64260e1          MOV      r0,#0x2ee1
00001a  8028              STRH     r0,[r5,#0]
                  |L1.28|
;;;100            return;
;;;101        }
;;;102    #endif
;;;103    
;;;104    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;105        if (p_q == DEF_NULL) {                                      /* Validate arguments                                   */
;;;106           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;107            return;
;;;108        }
;;;109        if (max_qty == 0u) {                                        /* Cannot specify a zero size queue                     */
;;;110           *p_err = OS_ERR_Q_SIZE;
;;;111            return;
;;;112        }
;;;113    #endif
;;;114    
;;;115        OS_CRITICAL_ENTER();
;;;116    #if (OS_OBJ_TYPE_REQ == DEF_ENABLED)
;;;117        p_q->Type    = OS_OBJ_TYPE_Q;                               /* Mark the data structure as a message queue           */
;;;118    #endif
;;;119    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;120        p_q->NamePtr = p_name;
;;;121    #else
;;;122        (void)&p_name;
;;;123    #endif
;;;124        OS_MsgQInit(&p_q->MsgQ,                                     /* Initialize the queue                                 */
;;;125                    max_qty);
;;;126        OS_PendListInit(&p_q->PendList);                            /* Initialize the waiting list                          */
;;;127    
;;;128    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;129        OS_QDbgListAdd(p_q);
;;;130        OSQQty++;                                                   /* One more queue created                               */
;;;131    #endif
;;;132    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;133        TRACE_OS_Q_CREATE(p_q, p_name);                             /* Record the event.                                    */
;;;134    #endif
;;;135        OS_CRITICAL_EXIT_NO_SCHED();
;;;136       *p_err = OS_ERR_NONE;
;;;137    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.32|
000020  bf00              NOP                            ;115
000022  bf00              NOP                            ;115
000024  f7fffffe          BL       CPU_SR_Save
000028  4680              MOV      r8,r0                 ;115
00002a  bf00              NOP                            ;115
00002c  f7fffffe          BL       CPU_IntDisMeasStart
000030  bf00              NOP                            ;115
000032  4811              LDR      r0,|L1.120|
000034  6020              STR      r0,[r4,#0]            ;117
000036  6066              STR      r6,[r4,#4]            ;120
000038  4639              MOV      r1,r7                 ;124
00003a  f1040020          ADD      r0,r4,#0x20           ;124
00003e  f7fffffe          BL       OS_MsgQInit
000042  f1040008          ADD      r0,r4,#8              ;126
000046  f7fffffe          BL       OS_PendListInit
00004a  4620              MOV      r0,r4                 ;129
00004c  f7fffffe          BL       OS_QDbgListAdd
000050  480a              LDR      r0,|L1.124|
000052  8800              LDRH     r0,[r0,#0]            ;130  ; OSQQty
000054  1c40              ADDS     r0,r0,#1              ;130
000056  4909              LDR      r1,|L1.124|
000058  8008              STRH     r0,[r1,#0]            ;130
00005a  bf00              NOP                            ;135
00005c  f7fffffe          BL       CPU_IntDisMeasStop
000060  bf00              NOP                            ;135
000062  4640              MOV      r0,r8                 ;135
000064  f7fffffe          BL       CPU_SR_Restore
000068  bf00              NOP                            ;135
00006a  bf00              NOP                            ;135
00006c  2000              MOVS     r0,#0                 ;136
00006e  8028              STRH     r0,[r5,#0]            ;136
000070  bf00              NOP      
000072  e7d3              B        |L1.28|
;;;138    
                          ENDP

                  |L1.116|
                          DCD      OSIntNestingCtr
                  |L1.120|
                          DCD      0x55455551
                  |L1.124|
                          DCD      OSQQty

                          AREA ||i.OSQDel||, CODE, READONLY, ALIGN=2

                  OSQDel PROC
;;;177    #if (OS_CFG_Q_DEL_EN == DEF_ENABLED)
;;;178    OS_OBJ_QTY  OSQDel (OS_Q    *p_q,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;179                        OS_OPT   opt,
;;;180                        OS_ERR  *p_err)
;;;181    {
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
;;;182        OS_OBJ_QTY     nbr_tasks;
;;;183        OS_PEND_DATA  *p_pend_data;
;;;184        OS_PEND_LIST  *p_pend_list;
;;;185        OS_TCB        *p_tcb;
;;;186        CPU_TS         ts;
;;;187        CPU_SR_ALLOC();
00000a  f04f0b00          MOV      r11,#0
;;;188    
;;;189    
;;;190    
;;;191    #ifdef OS_SAFETY_CRITICAL
;;;192        if (p_err == DEF_NULL) {
;;;193            OS_SAFETY_CRITICAL_EXCEPTION();
;;;194            return (0u);
;;;195        }
;;;196    #endif
;;;197    
;;;198    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;199        if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;200           *p_err = OS_ERR_ILLEGAL_DEL_RUN_TIME;
;;;201            return (0u);
;;;202        }
;;;203    #endif
;;;204    
;;;205    #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;206        if (OSIntNestingCtr > 0u) {                                 /* Can't delete a message queue from an ISR             */
00000e  4843              LDR      r0,|L2.284|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  b128              CBZ      r0,|L2.32|
;;;207           *p_err = OS_ERR_DEL_ISR;
000014  f24320c9          MOV      r0,#0x32c9
000018  8020              STRH     r0,[r4,#0]
;;;208            return (0u);
00001a  2000              MOVS     r0,#0
                  |L2.28|
;;;209        }
;;;210    #endif
;;;211    
;;;212    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;213        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;214           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;215            return (0u);
;;;216        }
;;;217    #endif
;;;218    
;;;219    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;220        if (p_q == DEF_NULL) {                                      /* Validate 'p_q'                                       */
;;;221           *p_err =  OS_ERR_OBJ_PTR_NULL;
;;;222            return (0u);
;;;223        }
;;;224    #endif
;;;225    
;;;226    #if (OS_CFG_OBJ_TYPE_CHK_EN == DEF_ENABLED)
;;;227        if (p_q->Type != OS_OBJ_TYPE_Q) {                           /* Make sure message queue was created                  */
;;;228           *p_err = OS_ERR_OBJ_TYPE;
;;;229            return (0u);
;;;230        }
;;;231    #endif
;;;232    
;;;233        CPU_CRITICAL_ENTER();
;;;234        p_pend_list = &p_q->PendList;
;;;235        nbr_tasks   = 0u;
;;;236        switch (opt) {
;;;237            case OS_OPT_DEL_NO_PEND:                                /* Delete message queue only if no task waiting         */
;;;238                 if (p_pend_list->HeadPtr == DEF_NULL) {
;;;239    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;240                     OS_QDbgListRemove(p_q);
;;;241                     OSQQty--;
;;;242    #endif
;;;243    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;244                     TRACE_OS_Q_DEL(p_q);                           /* Record the event.                                    */
;;;245    #endif
;;;246                     OS_QClr(p_q);
;;;247                     CPU_CRITICAL_EXIT();
;;;248                    *p_err = OS_ERR_NONE;
;;;249                 } else {
;;;250                     CPU_CRITICAL_EXIT();
;;;251                    *p_err = OS_ERR_TASK_WAITING;
;;;252                 }
;;;253                 break;
;;;254    
;;;255            case OS_OPT_DEL_ALWAYS:                                 /* Always delete the message queue                      */
;;;256                 OS_CRITICAL_ENTER_CPU_EXIT();
;;;257    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;258                 ts = OS_TS_GET();                                  /* Get local time stamp so all tasks get the same time  */
;;;259    #else
;;;260                 ts = 0u;
;;;261    #endif
;;;262                 while (p_pend_list->HeadPtr != DEF_NULL) {         /* Remove all tasks from the pend list                  */
;;;263                     p_pend_data = p_pend_list->HeadPtr;
;;;264                     p_tcb       = p_pend_data->TCBPtr;
;;;265                     OS_PendObjDel((OS_PEND_OBJ *)((void *)p_q),
;;;266                                   p_tcb,
;;;267                                   ts);
;;;268                     nbr_tasks++;
;;;269                 }
;;;270    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;271                 OS_QDbgListRemove(p_q);
;;;272                 OSQQty--;
;;;273    #endif
;;;274    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;275                 TRACE_OS_Q_DEL(p_q);                               /* Record the event.                                    */
;;;276    #endif
;;;277                 OS_QClr(p_q);
;;;278                 OS_CRITICAL_EXIT_NO_SCHED();
;;;279                 OSSched();                                         /* Find highest priority task ready to run              */
;;;280                *p_err = OS_ERR_NONE;
;;;281                 break;
;;;282    
;;;283            default:
;;;284                 CPU_CRITICAL_EXIT();
;;;285                *p_err = OS_ERR_OPT_INVALID;
;;;286                 break;
;;;287        }
;;;288        return (nbr_tasks);
;;;289    }
00001c  e8bd8ff8          POP      {r3-r11,pc}
                  |L2.32|
000020  493f              LDR      r1,|L2.288|
000022  6830              LDR      r0,[r6,#0]            ;227
000024  4288              CMP      r0,r1                 ;227
000026  d004              BEQ      |L2.50|
000028  f64550c4          MOV      r0,#0x5dc4            ;228
00002c  8020              STRH     r0,[r4,#0]            ;228
00002e  2000              MOVS     r0,#0                 ;229
000030  e7f4              B        |L2.28|
                  |L2.50|
000032  bf00              NOP                            ;233
000034  bf00              NOP                            ;233
000036  f7fffffe          BL       CPU_SR_Save
00003a  4683              MOV      r11,r0                ;233
00003c  bf00              NOP                            ;233
00003e  f7fffffe          BL       CPU_IntDisMeasStart
000042  bf00              NOP                            ;233
000044  f1060508          ADD      r5,r6,#8              ;234
000048  2700              MOVS     r7,#0                 ;235
00004a  f1b80f00          CMP      r8,#0                 ;236
00004e  d003              BEQ      |L2.88|
000050  f1b80f01          CMP      r8,#1                 ;236
000054  d151              BNE      |L2.250|
000056  e025              B        |L2.164|
                  |L2.88|
000058  6828              LDR      r0,[r5,#0]            ;238
00005a  b9b0              CBNZ     r0,|L2.138|
00005c  4630              MOV      r0,r6                 ;240
00005e  f7fffffe          BL       OS_QDbgListRemove
000062  4830              LDR      r0,|L2.292|
000064  8800              LDRH     r0,[r0,#0]            ;241  ; OSQQty
000066  1e40              SUBS     r0,r0,#1              ;241
000068  492e              LDR      r1,|L2.292|
00006a  8008              STRH     r0,[r1,#0]            ;241
00006c  4630              MOV      r0,r6                 ;246
00006e  f7fffffe          BL       OS_QClr
000072  bf00              NOP                            ;247
000074  f7fffffe          BL       CPU_IntDisMeasStop
000078  bf00              NOP                            ;247
00007a  4658              MOV      r0,r11                ;247
00007c  f7fffffe          BL       CPU_SR_Restore
000080  bf00              NOP                            ;247
000082  bf00              NOP                            ;247
000084  2000              MOVS     r0,#0                 ;248
000086  8020              STRH     r0,[r4,#0]            ;248
000088  e00b              B        |L2.162|
                  |L2.138|
00008a  bf00              NOP                            ;250
00008c  f7fffffe          BL       CPU_IntDisMeasStop
000090  bf00              NOP                            ;250
000092  4658              MOV      r0,r11                ;250
000094  f7fffffe          BL       CPU_SR_Restore
000098  bf00              NOP                            ;250
00009a  bf00              NOP                            ;250
00009c  f247105f          MOV      r0,#0x715f            ;251
0000a0  8020              STRH     r0,[r4,#0]            ;251
                  |L2.162|
0000a2  e037              B        |L2.276|
                  |L2.164|
0000a4  f7fffffe          BL       CPU_TS_TmrRd
0000a8  9000              STR      r0,[sp,#0]            ;258
0000aa  e00a              B        |L2.194|
                  |L2.172|
0000ac  f8d59000          LDR      r9,[r5,#0]            ;263
0000b0  f8d9a008          LDR      r10,[r9,#8]           ;264
0000b4  4651              MOV      r1,r10                ;265
0000b6  4630              MOV      r0,r6                 ;265
0000b8  9a00              LDR      r2,[sp,#0]            ;265
0000ba  f7fffffe          BL       OS_PendObjDel
0000be  1c78              ADDS     r0,r7,#1              ;268
0000c0  b287              UXTH     r7,r0                 ;268
                  |L2.194|
0000c2  6828              LDR      r0,[r5,#0]            ;262
0000c4  2800              CMP      r0,#0                 ;262
0000c6  d1f1              BNE      |L2.172|
0000c8  4630              MOV      r0,r6                 ;271
0000ca  f7fffffe          BL       OS_QDbgListRemove
0000ce  4815              LDR      r0,|L2.292|
0000d0  8800              LDRH     r0,[r0,#0]            ;272  ; OSQQty
0000d2  1e40              SUBS     r0,r0,#1              ;272
0000d4  4913              LDR      r1,|L2.292|
0000d6  8008              STRH     r0,[r1,#0]            ;272
0000d8  4630              MOV      r0,r6                 ;277
0000da  f7fffffe          BL       OS_QClr
0000de  bf00              NOP                            ;278
0000e0  f7fffffe          BL       CPU_IntDisMeasStop
0000e4  bf00              NOP                            ;278
0000e6  4658              MOV      r0,r11                ;278
0000e8  f7fffffe          BL       CPU_SR_Restore
0000ec  bf00              NOP                            ;278
0000ee  bf00              NOP                            ;278
0000f0  f7fffffe          BL       OSSched
0000f4  2000              MOVS     r0,#0                 ;280
0000f6  8020              STRH     r0,[r4,#0]            ;280
0000f8  e00c              B        |L2.276|
                  |L2.250|
0000fa  bf00              NOP                            ;284
0000fc  f7fffffe          BL       CPU_IntDisMeasStop
000100  bf00              NOP                            ;284
000102  4658              MOV      r0,r11                ;284
000104  f7fffffe          BL       CPU_SR_Restore
000108  bf00              NOP                            ;284
00010a  bf00              NOP                            ;284
00010c  f6456025          MOV      r0,#0x5e25            ;285
000110  8020              STRH     r0,[r4,#0]            ;285
000112  bf00              NOP                            ;286
                  |L2.276|
000114  bf00              NOP                            ;253
000116  4638              MOV      r0,r7                 ;288
000118  e780              B        |L2.28|
;;;290    #endif
                          ENDP

00011a  0000              DCW      0x0000
                  |L2.284|
                          DCD      OSIntNestingCtr
                  |L2.288|
                          DCD      0x55455551
                  |L2.292|
                          DCD      OSQQty

                          AREA ||i.OSQFlush||, CODE, READONLY, ALIGN=2

                  OSQFlush PROC
;;;319    #if (OS_CFG_Q_FLUSH_EN == DEF_ENABLED)
;;;320    OS_MSG_QTY  OSQFlush (OS_Q    *p_q,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;321                          OS_ERR  *p_err)
;;;322    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;323        OS_MSG_QTY  entries;
;;;324        CPU_SR_ALLOC();
000008  2600              MOVS     r6,#0
;;;325    
;;;326    
;;;327    
;;;328    #ifdef OS_SAFETY_CRITICAL
;;;329        if (p_err == DEF_NULL) {
;;;330            OS_SAFETY_CRITICAL_EXCEPTION();
;;;331            return (0u);
;;;332        }
;;;333    #endif
;;;334    
;;;335    #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;336        if (OSIntNestingCtr > 0u) {                                 /* Can't flush a message queue from an ISR              */
00000a  4816              LDR      r0,|L3.100|
00000c  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
00000e  b128              CBZ      r0,|L3.28|
;;;337           *p_err = OS_ERR_FLUSH_ISR;
000010  f44f506c          MOV      r0,#0x3b00
000014  8020              STRH     r0,[r4,#0]
;;;338            return (0u);
000016  2000              MOVS     r0,#0
                  |L3.24|
;;;339        }
;;;340    #endif
;;;341    
;;;342    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;343        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;344           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;345            return (0u);
;;;346        }
;;;347    #endif
;;;348    
;;;349    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;350        if (p_q == DEF_NULL) {                                      /* Validate arguments                                   */
;;;351           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;352            return (0u);
;;;353        }
;;;354    #endif
;;;355    
;;;356    #if (OS_CFG_OBJ_TYPE_CHK_EN == DEF_ENABLED)
;;;357        if (p_q->Type != OS_OBJ_TYPE_Q) {                           /* Make sure message queue was created                  */
;;;358           *p_err = OS_ERR_OBJ_TYPE;
;;;359            return (0u);
;;;360        }
;;;361    #endif
;;;362    
;;;363        OS_CRITICAL_ENTER();
;;;364        entries = OS_MsgQFreeAll(&p_q->MsgQ);                       /* Return all OS_MSGs to the OS_MSG pool                */
;;;365        OS_CRITICAL_EXIT();
;;;366       *p_err   = OS_ERR_NONE;
;;;367        return (entries);
;;;368    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L3.28|
00001c  4912              LDR      r1,|L3.104|
00001e  6828              LDR      r0,[r5,#0]            ;357
000020  4288              CMP      r0,r1                 ;357
000022  d004              BEQ      |L3.46|
000024  f64550c4          MOV      r0,#0x5dc4            ;358
000028  8020              STRH     r0,[r4,#0]            ;358
00002a  2000              MOVS     r0,#0                 ;359
00002c  e7f4              B        |L3.24|
                  |L3.46|
00002e  bf00              NOP                            ;363
000030  bf00              NOP                            ;363
000032  f7fffffe          BL       CPU_SR_Save
000036  4606              MOV      r6,r0                 ;363
000038  bf00              NOP                            ;363
00003a  f7fffffe          BL       CPU_IntDisMeasStart
00003e  bf00              NOP                            ;363
000040  f1050020          ADD      r0,r5,#0x20           ;364
000044  f7fffffe          BL       OS_MsgQFreeAll
000048  4607              MOV      r7,r0                 ;364
00004a  bf00              NOP                            ;365
00004c  f7fffffe          BL       CPU_IntDisMeasStop
000050  bf00              NOP                            ;365
000052  4630              MOV      r0,r6                 ;365
000054  f7fffffe          BL       CPU_SR_Restore
000058  bf00              NOP                            ;365
00005a  bf00              NOP                            ;365
00005c  2000              MOVS     r0,#0                 ;366
00005e  8020              STRH     r0,[r4,#0]            ;366
000060  4638              MOV      r0,r7                 ;367
000062  e7d9              B        |L3.24|
;;;369    #endif
                          ENDP

                  |L3.100|
                          DCD      OSIntNestingCtr
                  |L3.104|
                          DCD      0x55455551

                          AREA ||i.OSQPend||, CODE, READONLY, ALIGN=2

                  OSQPend PROC
;;;423    
;;;424    void  *OSQPend (OS_Q         *p_q,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;425                    OS_TICK       timeout,
;;;426                    OS_OPT        opt,
;;;427                    OS_MSG_SIZE  *p_msg_size,
;;;428                    CPU_TS       *p_ts,
;;;429                    OS_ERR       *p_err)
;;;430    {
000004  b089              SUB      sp,sp,#0x24
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
00000c  461e              MOV      r6,r3
00000e  e9dd4512          LDRD     r4,r5,[sp,#0x48]
;;;431        OS_PEND_DATA  pend_data;
;;;432        void         *p_void;
;;;433        CPU_SR_ALLOC();
000012  f04f0b00          MOV      r11,#0
;;;434    
;;;435    
;;;436    #ifdef OS_SAFETY_CRITICAL
;;;437        if (p_err == DEF_NULL) {
;;;438            OS_SAFETY_CRITICAL_EXCEPTION();
;;;439            return (DEF_NULL);
;;;440        }
;;;441    #endif
;;;442    
;;;443    #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;444        if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
000016  4862              LDR      r0,|L4.416|
000018  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
00001a  b130              CBZ      r0,|L4.42|
;;;445    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;446            TRACE_OS_Q_PEND_FAILED(p_q);                            /* Record the event.                                    */
;;;447    #endif
;;;448           *p_err = OS_ERR_PEND_ISR;
00001c  f24610ae          MOV      r0,#0x61ae
000020  8028              STRH     r0,[r5,#0]
;;;449            return (DEF_NULL);
000022  2000              MOVS     r0,#0
                  |L4.36|
;;;450        }
;;;451    #endif
;;;452    
;;;453    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;454        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;455           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;456            return (DEF_NULL);
;;;457        }
;;;458    #endif
;;;459    
;;;460    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;461        if (p_q == DEF_NULL) {                                      /* Validate arguments                                   */
;;;462    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;463            TRACE_OS_Q_PEND_FAILED(p_q);                            /* Record the event.                                    */
;;;464    #endif
;;;465           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;466            return (DEF_NULL);
;;;467        }
;;;468        if (p_msg_size == DEF_NULL) {
;;;469    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;470            TRACE_OS_Q_PEND_FAILED(p_q);                            /* Record the event.                                    */
;;;471    #endif
;;;472           *p_err = OS_ERR_PTR_INVALID;
;;;473            return (DEF_NULL);
;;;474        }
;;;475        switch (opt) {
;;;476            case OS_OPT_PEND_BLOCKING:
;;;477            case OS_OPT_PEND_NON_BLOCKING:
;;;478                 break;
;;;479    
;;;480            default:
;;;481    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;482                 TRACE_OS_Q_PEND_FAILED(p_q);                       /* Record the event.                                    */
;;;483    #endif
;;;484                *p_err = OS_ERR_OPT_INVALID;
;;;485                 return (DEF_NULL);
;;;486        }
;;;487    #endif
;;;488    
;;;489    #if (OS_CFG_OBJ_TYPE_CHK_EN == DEF_ENABLED)
;;;490        if (p_q->Type != OS_OBJ_TYPE_Q) {                           /* Make sure message queue was created                  */
;;;491    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;492            TRACE_OS_Q_PEND_FAILED(p_q);                            /* Record the event.                                    */
;;;493    #endif
;;;494           *p_err = OS_ERR_OBJ_TYPE;
;;;495            return (DEF_NULL);
;;;496        }
;;;497    #endif
;;;498    
;;;499        if (p_ts != DEF_NULL) {
;;;500           *p_ts = 0u;                                              /* Initialize the returned timestamp                    */
;;;501        }
;;;502    
;;;503        CPU_CRITICAL_ENTER();
;;;504        p_void = OS_MsgQGet(&p_q->MsgQ,                             /* Any message waiting in the message queue?            */
;;;505                            p_msg_size,
;;;506                            p_ts,
;;;507                            p_err);
;;;508        if (*p_err == OS_ERR_NONE) {
;;;509            CPU_CRITICAL_EXIT();
;;;510    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;511            TRACE_OS_Q_PEND(p_q);                                   /* Record the event.                                    */
;;;512    #endif
;;;513            return (p_void);                                        /* Yes, Return message received                         */
;;;514        }
;;;515    
;;;516        if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {               /* Caller wants to block if not available?              */
;;;517            CPU_CRITICAL_EXIT();
;;;518    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;519            TRACE_OS_Q_PEND_FAILED(p_q);                            /* Record the event.                                    */
;;;520    #endif
;;;521           *p_err = OS_ERR_PEND_WOULD_BLOCK;                        /* No                                                   */
;;;522            return (DEF_NULL);
;;;523        } else {
;;;524            if (OSSchedLockNestingCtr > 0u) {                       /* Can't pend when the scheduler is locked              */
;;;525                CPU_CRITICAL_EXIT();
;;;526    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;527                TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                    */
;;;528    #endif
;;;529               *p_err = OS_ERR_SCHED_LOCKED;
;;;530                return (DEF_NULL);
;;;531            }
;;;532        }
;;;533                                                                    /* Lock the scheduler/re-enable interrupts              */
;;;534        OS_CRITICAL_ENTER_CPU_EXIT();
;;;535        OS_Pend(&pend_data,                                         /* Block task pending on Message Queue                  */
;;;536                (OS_PEND_OBJ *)((void *)p_q),
;;;537                OS_TASK_PEND_ON_Q,
;;;538                timeout);
;;;539        OS_CRITICAL_EXIT_NO_SCHED();
;;;540    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;541        TRACE_OS_Q_PEND_BLOCK(p_q);                                 /* Record the event.                                    */
;;;542    #endif
;;;543        OSSched();                                                  /* Find the next highest priority task ready to run     */
;;;544    
;;;545        CPU_CRITICAL_ENTER();
;;;546        switch (OSTCBCurPtr->PendStatus) {
;;;547            case OS_STATUS_PEND_OK:                                 /* Extract message from TCB (Put there by Post)         */
;;;548                 p_void     = OSTCBCurPtr->MsgPtr;
;;;549                *p_msg_size = OSTCBCurPtr->MsgSize;
;;;550    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;551                 if (p_ts  != DEF_NULL) {
;;;552                    *p_ts  =  OSTCBCurPtr->TS;
;;;553                 }
;;;554    #endif
;;;555    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;556                 TRACE_OS_Q_PEND(p_q);                              /* Record the event.                                    */
;;;557    #endif
;;;558                *p_err      = OS_ERR_NONE;
;;;559                 break;
;;;560    
;;;561            case OS_STATUS_PEND_ABORT:                              /* Indicate that we aborted                             */
;;;562                 p_void     = DEF_NULL;
;;;563                *p_msg_size = 0u;
;;;564    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;565                 if (p_ts  != DEF_NULL) {
;;;566                    *p_ts  =  OSTCBCurPtr->TS;
;;;567                 }
;;;568    #endif
;;;569    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;570                 TRACE_OS_Q_PEND_FAILED(p_q);                       /* Record the event.                                    */
;;;571    #endif
;;;572                *p_err      = OS_ERR_PEND_ABORT;
;;;573                 break;
;;;574    
;;;575            case OS_STATUS_PEND_TIMEOUT:                            /* Indicate that we didn't get event within TO          */
;;;576                 p_void     = DEF_NULL;
;;;577                *p_msg_size = 0u;
;;;578                 if (p_ts  != DEF_NULL) {
;;;579                    *p_ts  = 0u;
;;;580                 }
;;;581    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;582                 TRACE_OS_Q_PEND_FAILED(p_q);                       /* Record the event.                                    */
;;;583    #endif
;;;584                *p_err      = OS_ERR_TIMEOUT;
;;;585                 break;
;;;586    
;;;587            case OS_STATUS_PEND_DEL:                                /* Indicate that object pended on has been deleted      */
;;;588                 p_void     = DEF_NULL;
;;;589                *p_msg_size = 0u;
;;;590    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;591                 if (p_ts  != DEF_NULL) {
;;;592                    *p_ts  =  OSTCBCurPtr->TS;
;;;593                 }
;;;594    #endif
;;;595    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;596                 TRACE_OS_Q_PEND_FAILED(p_q);                       /* Record the event.                                    */
;;;597    #endif
;;;598                *p_err      = OS_ERR_OBJ_DEL;
;;;599                 break;
;;;600    
;;;601            default:
;;;602                 p_void     = DEF_NULL;
;;;603                *p_msg_size = 0u;
;;;604    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;605                 TRACE_OS_Q_PEND_FAILED(p_q);                       /* Record the event.                                    */
;;;606    #endif
;;;607                *p_err      = OS_ERR_STATUS_INVALID;
;;;608                 break;
;;;609        }
;;;610        CPU_CRITICAL_EXIT();
;;;611        return (p_void);
;;;612    }
000024  b009              ADD      sp,sp,#0x24
000026  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.42|
00002a  495e              LDR      r1,|L4.420|
00002c  6838              LDR      r0,[r7,#0]            ;490
00002e  4288              CMP      r0,r1                 ;490
000030  d004              BEQ      |L4.60|
000032  f64550c4          MOV      r0,#0x5dc4            ;494
000036  8028              STRH     r0,[r5,#0]            ;494
000038  2000              MOVS     r0,#0                 ;495
00003a  e7f3              B        |L4.36|
                  |L4.60|
00003c  b10c              CBZ      r4,|L4.66|
00003e  2000              MOVS     r0,#0                 ;500
000040  6020              STR      r0,[r4,#0]            ;500
                  |L4.66|
000042  bf00              NOP                            ;503
000044  bf00              NOP                            ;503
000046  f7fffffe          BL       CPU_SR_Save
00004a  4683              MOV      r11,r0                ;503
00004c  bf00              NOP                            ;503
00004e  f7fffffe          BL       CPU_IntDisMeasStart
000052  bf00              NOP                            ;503
000054  462b              MOV      r3,r5                 ;504
000056  4622              MOV      r2,r4                 ;504
000058  4631              MOV      r1,r6                 ;504
00005a  f1070020          ADD      r0,r7,#0x20           ;504
00005e  f7fffffe          BL       OS_MsgQGet
000062  4682              MOV      r10,r0                ;504
000064  8828              LDRH     r0,[r5,#0]            ;508
000066  b950              CBNZ     r0,|L4.126|
000068  bf00              NOP                            ;509
00006a  f7fffffe          BL       CPU_IntDisMeasStop
00006e  bf00              NOP                            ;509
000070  4658              MOV      r0,r11                ;509
000072  f7fffffe          BL       CPU_SR_Restore
000076  bf00              NOP                            ;509
000078  bf00              NOP                            ;509
00007a  4650              MOV      r0,r10                ;513
00007c  e7d2              B        |L4.36|
                  |L4.126|
00007e  f4194f00          TST      r9,#0x8000            ;516
000082  d00d              BEQ      |L4.160|
000084  bf00              NOP                            ;517
000086  f7fffffe          BL       CPU_IntDisMeasStop
00008a  bf00              NOP                            ;517
00008c  4658              MOV      r0,r11                ;517
00008e  f7fffffe          BL       CPU_SR_Restore
000092  bf00              NOP                            ;517
000094  bf00              NOP                            ;517
000096  f24610b0          MOV      r0,#0x61b0            ;521
00009a  8028              STRH     r0,[r5,#0]            ;521
00009c  2000              MOVS     r0,#0                 ;522
00009e  e7c1              B        |L4.36|
                  |L4.160|
0000a0  4841              LDR      r0,|L4.424|
0000a2  7800              LDRB     r0,[r0,#0]            ;524  ; OSSchedLockNestingCtr
0000a4  b168              CBZ      r0,|L4.194|
0000a6  bf00              NOP                            ;525
0000a8  f7fffffe          BL       CPU_IntDisMeasStop
0000ac  bf00              NOP                            ;525
0000ae  4658              MOV      r0,r11                ;525
0000b0  f7fffffe          BL       CPU_SR_Restore
0000b4  bf00              NOP                            ;525
0000b6  bf00              NOP                            ;525
0000b8  f6465063          MOV      r0,#0x6d63            ;529
0000bc  8028              STRH     r0,[r5,#0]            ;529
0000be  2000              MOVS     r0,#0                 ;530
0000c0  e7b0              B        |L4.36|
                  |L4.194|
0000c2  4643              MOV      r3,r8                 ;535
0000c4  2205              MOVS     r2,#5                 ;535
0000c6  4639              MOV      r1,r7                 ;535
0000c8  a801              ADD      r0,sp,#4              ;535
0000ca  f7fffffe          BL       OS_Pend
0000ce  bf00              NOP                            ;539
0000d0  f7fffffe          BL       CPU_IntDisMeasStop
0000d4  bf00              NOP                            ;539
0000d6  4658              MOV      r0,r11                ;539
0000d8  f7fffffe          BL       CPU_SR_Restore
0000dc  bf00              NOP                            ;539
0000de  bf00              NOP                            ;539
0000e0  f7fffffe          BL       OSSched
0000e4  bf00              NOP                            ;545
0000e6  bf00              NOP                            ;545
0000e8  f7fffffe          BL       CPU_SR_Save
0000ec  4683              MOV      r11,r0                ;545
0000ee  bf00              NOP                            ;545
0000f0  f7fffffe          BL       CPU_IntDisMeasStart
0000f4  bf00              NOP                            ;545
0000f6  482d              LDR      r0,|L4.428|
0000f8  6800              LDR      r0,[r0,#0]            ;546  ; OSTCBCurPtr
0000fa  f8900035          LDRB     r0,[r0,#0x35]         ;546
0000fe  b130              CBZ      r0,|L4.270|
000100  2801              CMP      r0,#1                 ;546
000102  d015              BEQ      |L4.304|
000104  2802              CMP      r0,#2                 ;546
000106  d02a              BEQ      |L4.350|
000108  2803              CMP      r0,#3                 ;546
00010a  d135              BNE      |L4.376|
00010c  e01d              B        |L4.330|
                  |L4.270|
00010e  4827              LDR      r0,|L4.428|
000110  6800              LDR      r0,[r0,#0]            ;548  ; OSTCBCurPtr
000112  f8d0a058          LDR      r10,[r0,#0x58]        ;548
000116  4825              LDR      r0,|L4.428|
000118  6800              LDR      r0,[r0,#0]            ;549  ; OSTCBCurPtr
00011a  f8b0005c          LDRH     r0,[r0,#0x5c]         ;549
00011e  8030              STRH     r0,[r6,#0]            ;549
000120  b11c              CBZ      r4,|L4.298|
000122  4822              LDR      r0,|L4.428|
000124  6800              LDR      r0,[r0,#0]            ;552  ; OSTCBCurPtr
000126  6c80              LDR      r0,[r0,#0x48]         ;552
000128  6020              STR      r0,[r4,#0]            ;552
                  |L4.298|
00012a  2000              MOVS     r0,#0                 ;558
00012c  8028              STRH     r0,[r5,#0]            ;558
00012e  e02b              B        |L4.392|
                  |L4.304|
000130  f04f0a00          MOV      r10,#0                ;562
000134  2000              MOVS     r0,#0                 ;563
000136  8030              STRH     r0,[r6,#0]            ;563
000138  b11c              CBZ      r4,|L4.322|
00013a  481c              LDR      r0,|L4.428|
00013c  6800              LDR      r0,[r0,#0]            ;566  ; OSTCBCurPtr
00013e  6c80              LDR      r0,[r0,#0x48]         ;566
000140  6020              STR      r0,[r4,#0]            ;566
                  |L4.322|
000142  f24610a9          MOV      r0,#0x61a9            ;572
000146  8028              STRH     r0,[r5,#0]            ;572
000148  e01e              B        |L4.392|
                  |L4.330|
00014a  f04f0a00          MOV      r10,#0                ;576
00014e  2000              MOVS     r0,#0                 ;577
000150  8030              STRH     r0,[r6,#0]            ;577
000152  b104              CBZ      r4,|L4.342|
000154  6020              STR      r0,[r4,#0]            ;579
                  |L4.342|
000156  f24720d9          MOV      r0,#0x72d9            ;584
00015a  8028              STRH     r0,[r5,#0]            ;584
00015c  e014              B        |L4.392|
                  |L4.350|
00015e  f04f0a00          MOV      r10,#0                ;588
000162  2000              MOVS     r0,#0                 ;589
000164  8030              STRH     r0,[r6,#0]            ;589
000166  b11c              CBZ      r4,|L4.368|
000168  4810              LDR      r0,|L4.428|
00016a  6800              LDR      r0,[r0,#0]            ;592  ; OSTCBCurPtr
00016c  6c80              LDR      r0,[r0,#0x48]         ;592
00016e  6020              STR      r0,[r4,#0]            ;592
                  |L4.368|
000170  f64550c2          MOV      r0,#0x5dc2            ;598
000174  8028              STRH     r0,[r5,#0]            ;598
000176  e007              B        |L4.392|
                  |L4.376|
000178  f04f0a00          MOV      r10,#0                ;602
00017c  2000              MOVS     r0,#0                 ;603
00017e  8030              STRH     r0,[r6,#0]            ;603
000180  f646602e          MOV      r0,#0x6e2e            ;607
000184  8028              STRH     r0,[r5,#0]            ;607
000186  bf00              NOP                            ;608
                  |L4.392|
000188  bf00              NOP                            ;559
00018a  bf00              NOP                            ;610
00018c  f7fffffe          BL       CPU_IntDisMeasStop
000190  bf00              NOP                            ;610
000192  4658              MOV      r0,r11                ;610
000194  f7fffffe          BL       CPU_SR_Restore
000198  bf00              NOP                            ;610
00019a  bf00              NOP                            ;610
00019c  4650              MOV      r0,r10                ;611
00019e  e741              B        |L4.36|
;;;613    
                          ENDP

                  |L4.416|
                          DCD      OSIntNestingCtr
                  |L4.420|
                          DCD      0x55455551
                  |L4.424|
                          DCD      OSSchedLockNestingCtr
                  |L4.428|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSQPendAbort||, CODE, READONLY, ALIGN=2

                  OSQPendAbort PROC
;;;649    #if (OS_CFG_Q_PEND_ABORT_EN == DEF_ENABLED)
;;;650    OS_OBJ_QTY  OSQPendAbort (OS_Q    *p_q,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;651                              OS_OPT   opt,
;;;652                              OS_ERR  *p_err)
;;;653    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;654        OS_PEND_LIST  *p_pend_list;
;;;655        OS_TCB        *p_tcb;
;;;656        CPU_TS         ts;
;;;657        OS_OBJ_QTY     nbr_tasks;
;;;658        CPU_SR_ALLOC();
00000a  f04f0a00          MOV      r10,#0
;;;659    
;;;660    
;;;661    
;;;662    #ifdef OS_SAFETY_CRITICAL
;;;663        if (p_err == DEF_NULL) {
;;;664            OS_SAFETY_CRITICAL_EXCEPTION();
;;;665            return (0u);
;;;666        }
;;;667    #endif
;;;668    
;;;669    #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;670        if (OSIntNestingCtr > 0u) {                                 /* Not allowed to Pend Abort from an ISR                */
00000e  482c              LDR      r0,|L5.192|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  b128              CBZ      r0,|L5.32|
;;;671           *p_err =  OS_ERR_PEND_ABORT_ISR;
000014  f24610aa          MOV      r0,#0x61aa
000018  8020              STRH     r0,[r4,#0]
;;;672            return (0u);
00001a  2000              MOVS     r0,#0
                  |L5.28|
;;;673        }
;;;674    #endif
;;;675    
;;;676    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;677        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;678           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;679            return (0u);
;;;680        }
;;;681    #endif
;;;682    
;;;683    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;684        if (p_q == DEF_NULL) {                                      /* Validate 'p_q'                                       */
;;;685           *p_err =  OS_ERR_OBJ_PTR_NULL;
;;;686            return (0u);
;;;687        }
;;;688        switch (opt) {                                              /* Validate 'opt'                                       */
;;;689            case OS_OPT_PEND_ABORT_1:
;;;690            case OS_OPT_PEND_ABORT_ALL:
;;;691            case OS_OPT_PEND_ABORT_1   | OS_OPT_POST_NO_SCHED:
;;;692            case OS_OPT_PEND_ABORT_ALL | OS_OPT_POST_NO_SCHED:
;;;693                 break;
;;;694    
;;;695            default:
;;;696                *p_err =  OS_ERR_OPT_INVALID;
;;;697                 return (0u);
;;;698        }
;;;699    #endif
;;;700    
;;;701    #if (OS_CFG_OBJ_TYPE_CHK_EN == DEF_ENABLED)
;;;702        if (p_q->Type != OS_OBJ_TYPE_Q) {                           /* Make sure queue was created                          */
;;;703           *p_err =  OS_ERR_OBJ_TYPE;
;;;704            return (0u);
;;;705        }
;;;706    #endif
;;;707    
;;;708        CPU_CRITICAL_ENTER();
;;;709        p_pend_list = &p_q->PendList;
;;;710        if (p_pend_list->HeadPtr == DEF_NULL) {                     /* Any task waiting on queue?                           */
;;;711            CPU_CRITICAL_EXIT();                                    /* No                                                   */
;;;712           *p_err =  OS_ERR_PEND_ABORT_NONE;
;;;713            return (0u);
;;;714        }
;;;715    
;;;716        OS_CRITICAL_ENTER_CPU_EXIT();
;;;717        nbr_tasks = 0u;
;;;718    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;719        ts        = OS_TS_GET();                                    /* Get local time stamp so all tasks get the same time  */
;;;720    #else
;;;721        ts        = 0u;
;;;722    #endif
;;;723        while (p_pend_list->HeadPtr != DEF_NULL) {
;;;724            p_tcb = p_pend_list->HeadPtr->TCBPtr;
;;;725            OS_PendAbort((OS_PEND_OBJ *)((void *)p_q),
;;;726                         p_tcb,
;;;727                         ts);
;;;728            nbr_tasks++;
;;;729            if (opt != OS_OPT_PEND_ABORT_ALL) {                     /* Pend abort all tasks waiting?                        */
;;;730                break;                                              /* No                                                   */
;;;731            }
;;;732        }
;;;733        OS_CRITICAL_EXIT_NO_SCHED();
;;;734    
;;;735        if ((opt & OS_OPT_POST_NO_SCHED) == 0u) {
;;;736            OSSched();                                              /* Run the scheduler                                    */
;;;737        }
;;;738    
;;;739       *p_err = OS_ERR_NONE;
;;;740        return (nbr_tasks);
;;;741    }
00001c  e8bd9ff0          POP      {r4-r12,pc}
                  |L5.32|
000020  4928              LDR      r1,|L5.196|
000022  6830              LDR      r0,[r6,#0]            ;702
000024  4288              CMP      r0,r1                 ;702
000026  d004              BEQ      |L5.50|
000028  f64550c4          MOV      r0,#0x5dc4            ;703
00002c  8020              STRH     r0,[r4,#0]            ;703
00002e  2000              MOVS     r0,#0                 ;704
000030  e7f4              B        |L5.28|
                  |L5.50|
000032  bf00              NOP                            ;708
000034  bf00              NOP                            ;708
000036  f7fffffe          BL       CPU_SR_Save
00003a  4682              MOV      r10,r0                ;708
00003c  bf00              NOP                            ;708
00003e  f7fffffe          BL       CPU_IntDisMeasStart
000042  bf00              NOP                            ;708
000044  f1060508          ADD      r5,r6,#8              ;709
000048  6828              LDR      r0,[r5,#0]            ;710
00004a  b968              CBNZ     r0,|L5.104|
00004c  bf00              NOP                            ;711
00004e  f7fffffe          BL       CPU_IntDisMeasStop
000052  bf00              NOP                            ;711
000054  4650              MOV      r0,r10                ;711
000056  f7fffffe          BL       CPU_SR_Restore
00005a  bf00              NOP                            ;711
00005c  bf00              NOP                            ;711
00005e  f24610ab          MOV      r0,#0x61ab            ;712
000062  8020              STRH     r0,[r4,#0]            ;712
000064  2000              MOVS     r0,#0                 ;713
000066  e7d9              B        |L5.28|
                  |L5.104|
000068  f04f0800          MOV      r8,#0                 ;717
00006c  f7fffffe          BL       CPU_TS_TmrRd
000070  4683              MOV      r11,r0                ;719
000072  e00f              B        |L5.148|
                  |L5.116|
000074  6828              LDR      r0,[r5,#0]            ;724
000076  f8d09008          LDR      r9,[r0,#8]            ;724
00007a  465a              MOV      r2,r11                ;725
00007c  4649              MOV      r1,r9                 ;725
00007e  4630              MOV      r0,r6                 ;725
000080  f7fffffe          BL       OS_PendAbort
000084  f1080001          ADD      r0,r8,#1              ;728
000088  fa1ff880          UXTH     r8,r0                 ;728
00008c  f5b77f80          CMP      r7,#0x100             ;729
000090  d000              BEQ      |L5.148|
000092  e002              B        |L5.154|
                  |L5.148|
000094  6828              LDR      r0,[r5,#0]            ;723
000096  2800              CMP      r0,#0                 ;723
000098  d1ec              BNE      |L5.116|
                  |L5.154|
00009a  bf00              NOP                            ;730
00009c  bf00              NOP                            ;733
00009e  f7fffffe          BL       CPU_IntDisMeasStop
0000a2  bf00              NOP                            ;733
0000a4  4650              MOV      r0,r10                ;733
0000a6  f7fffffe          BL       CPU_SR_Restore
0000aa  bf00              NOP                            ;733
0000ac  bf00              NOP                            ;733
0000ae  f4174f00          TST      r7,#0x8000            ;735
0000b2  d101              BNE      |L5.184|
0000b4  f7fffffe          BL       OSSched
                  |L5.184|
0000b8  2000              MOVS     r0,#0                 ;739
0000ba  8020              STRH     r0,[r4,#0]            ;739
0000bc  4640              MOV      r0,r8                 ;740
0000be  e7ad              B        |L5.28|
;;;742    #endif
                          ENDP

                  |L5.192|
                          DCD      OSIntNestingCtr
                  |L5.196|
                          DCD      0x55455551

                          AREA ||i.OSQPost||, CODE, READONLY, ALIGN=2

                  OSQPost PROC
;;;798    
;;;799    void  OSQPost (OS_Q         *p_q,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;800                   void         *p_void,
;;;801                   OS_MSG_SIZE   msg_size,
;;;802                   OS_OPT        opt,
;;;803                   OS_ERR       *p_err)
;;;804    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  9d0a              LDR      r5,[sp,#0x28]
;;;805        CPU_TS  ts;
;;;806    
;;;807    
;;;808    
;;;809    #ifdef OS_SAFETY_CRITICAL
;;;810        if (p_err == DEF_NULL) {
;;;811            OS_SAFETY_CRITICAL_EXCEPTION();
;;;812            return;
;;;813        }
;;;814    #endif
;;;815    
;;;816    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;817        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;818           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;819            return;
;;;820        }
;;;821    #endif
;;;822    
;;;823    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;824        if (p_q == DEF_NULL) {                                      /* Validate 'p_q'                                       */
;;;825    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;826            TRACE_OS_Q_POST_FAILED(p_q);                            /* Record the event.                                    */
;;;827    #endif
;;;828           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;829            return;
;;;830        }
;;;831        switch (opt) {                                              /* Validate 'opt'                                       */
;;;832            case OS_OPT_POST_FIFO:
;;;833            case OS_OPT_POST_LIFO:
;;;834            case OS_OPT_POST_FIFO | OS_OPT_POST_ALL:
;;;835            case OS_OPT_POST_LIFO | OS_OPT_POST_ALL:
;;;836            case OS_OPT_POST_FIFO | OS_OPT_POST_NO_SCHED:
;;;837            case OS_OPT_POST_LIFO | OS_OPT_POST_NO_SCHED:
;;;838            case OS_OPT_POST_FIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
;;;839            case OS_OPT_POST_LIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
;;;840                 break;
;;;841    
;;;842            default:
;;;843    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;844                 TRACE_OS_Q_POST_FAILED(p_q);                       /* Record the event.                                    */
;;;845    #endif
;;;846                *p_err =  OS_ERR_OPT_INVALID;
;;;847                 return;
;;;848        }
;;;849    #endif
;;;850    
;;;851    #if (OS_CFG_OBJ_TYPE_CHK_EN == DEF_ENABLED)
;;;852        if (p_q->Type != OS_OBJ_TYPE_Q) {                           /* Make sure message queue was created                  */
00000e  490b              LDR      r1,|L6.60|
000010  6820              LDR      r0,[r4,#0]
000012  4288              CMP      r0,r1
000014  d004              BEQ      |L6.32|
;;;853    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;854            TRACE_OS_Q_POST_FAILED(p_q);                            /* Record the event.                                    */
;;;855    #endif
;;;856           *p_err = OS_ERR_OBJ_TYPE;
000016  f64550c4          MOV      r0,#0x5dc4
00001a  8028              STRH     r0,[r5,#0]
                  |L6.28|
;;;857            return;
;;;858        }
;;;859    #endif
;;;860    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;861        ts = OS_TS_GET();                                           /* Get timestamp                                        */
;;;862    #else
;;;863        ts = 0u;
;;;864    #endif
;;;865    
;;;866    #if (OS_CFG_ISR_POST_DEFERRED_EN == DEF_ENABLED)
;;;867        if (OSIntNestingCtr > 0u) {
;;;868            OS_IntQPost(OS_OBJ_TYPE_Q,                              /* Post to ISR queue                                    */
;;;869                        (void      *)p_q,
;;;870                        (void      *)p_void,
;;;871                        msg_size,
;;;872                        0u,
;;;873                        opt,
;;;874                        ts,
;;;875                        p_err);
;;;876            return;
;;;877        }
;;;878    #endif
;;;879    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;880        TRACE_OS_Q_POST(p_q);                                       /* Record the event.                                    */
;;;881    #endif
;;;882        OS_QPost(p_q,
;;;883                 p_void,
;;;884                 msg_size,
;;;885                 opt,
;;;886                 ts,
;;;887                 p_err);
;;;888    }
00001c  e8bd87fc          POP      {r2-r10,pc}
                  |L6.32|
000020  f7fffffe          BL       CPU_TS_TmrRd
000024  4606              MOV      r6,r0                 ;861
000026  464b              MOV      r3,r9                 ;882
000028  4642              MOV      r2,r8                 ;882
00002a  4639              MOV      r1,r7                 ;882
00002c  4620              MOV      r0,r4                 ;882
00002e  e9cd6500          STRD     r6,r5,[sp,#0]         ;882
000032  f7fffffe          BL       OS_QPost
000036  bf00              NOP      
000038  e7f0              B        |L6.28|
;;;889    
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
                          DCD      0x55455551

                          AREA ||i.OS_QClr||, CODE, READONLY, ALIGN=2

                  OS_QClr PROC
;;;906    
;;;907    void  OS_QClr (OS_Q  *p_q)
000000  b510              PUSH     {r4,lr}
;;;908    {
000002  4604              MOV      r4,r0
;;;909        (void)OS_MsgQFreeAll (&p_q->MsgQ);                          /* Return all OS_MSGs to the free list                  */
000004  f1040020          ADD      r0,r4,#0x20
000008  f7fffffe          BL       OS_MsgQFreeAll
;;;910    #if (OS_OBJ_TYPE_REQ == DEF_ENABLED)
;;;911        p_q->Type    =  OS_OBJ_TYPE_NONE;                           /* Mark the data structure as a NONE                    */
00000c  4806              LDR      r0,|L7.40|
00000e  6020              STR      r0,[r4,#0]
;;;912    #endif
;;;913    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;914        p_q->NamePtr = (CPU_CHAR *)((void *)"?Q");
000010  a006              ADR      r0,|L7.44|
000012  6060              STR      r0,[r4,#4]
;;;915    #endif
;;;916        OS_MsgQInit (&p_q->MsgQ,                                    /* Initialize the list of OS_MSGs                       */
000014  2100              MOVS     r1,#0
000016  f1040020          ADD      r0,r4,#0x20
00001a  f7fffffe          BL       OS_MsgQInit
;;;917                     0u);
;;;918        OS_PendListInit (&p_q->PendList);                           /* Initialize the waiting list                          */
00001e  f1040008          ADD      r0,r4,#8
000022  f7fffffe          BL       OS_PendListInit
;;;919    }
000026  bd10              POP      {r4,pc}
;;;920    
                          ENDP

                  |L7.40|
                          DCD      0x454e4f4e
                  |L7.44|
00002c  3f5100            DCB      "?Q",0
00002f  00                DCB      0

                          AREA ||i.OS_QDbgListAdd||, CODE, READONLY, ALIGN=2

                  OS_QDbgListAdd PROC
;;;938    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;939    void  OS_QDbgListAdd (OS_Q  *p_q)
000000  a109              ADR      r1,|L8.40|
;;;940    {
;;;941        p_q->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
000002  61c1              STR      r1,[r0,#0x1c]
;;;942        p_q->DbgPrevPtr               = DEF_NULL;
000004  2100              MOVS     r1,#0
000006  6141              STR      r1,[r0,#0x14]
;;;943        if (OSQDbgListPtr == DEF_NULL) {
000008  4908              LDR      r1,|L8.44|
00000a  6809              LDR      r1,[r1,#0]  ; OSQDbgListPtr
00000c  b911              CBNZ     r1,|L8.20|
;;;944            p_q->DbgNextPtr           = DEF_NULL;
00000e  2100              MOVS     r1,#0
000010  6181              STR      r1,[r0,#0x18]
000012  e005              B        |L8.32|
                  |L8.20|
;;;945        } else {
;;;946            p_q->DbgNextPtr           =  OSQDbgListPtr;
000014  4905              LDR      r1,|L8.44|
000016  6809              LDR      r1,[r1,#0]  ; OSQDbgListPtr
000018  6181              STR      r1,[r0,#0x18]
;;;947            OSQDbgListPtr->DbgPrevPtr =  p_q;
00001a  4904              LDR      r1,|L8.44|
00001c  6809              LDR      r1,[r1,#0]  ; OSQDbgListPtr
00001e  6148              STR      r0,[r1,#0x14]
                  |L8.32|
;;;948        }
;;;949        OSQDbgListPtr                 =  p_q;
000020  4902              LDR      r1,|L8.44|
000022  6008              STR      r0,[r1,#0]  ; OSQDbgListPtr
;;;950    }
000024  4770              BX       lr
;;;951    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
000028  2000              DCB      " ",0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L8.44|
                          DCD      OSQDbgListPtr

                          AREA ||i.OS_QDbgListRemove||, CODE, READONLY, ALIGN=2

                  OS_QDbgListRemove PROC
;;;953    
;;;954    void  OS_QDbgListRemove (OS_Q  *p_q)
000000  6942              LDR      r2,[r0,#0x14]
;;;955    {
;;;956        OS_Q  *p_q_next;
;;;957        OS_Q  *p_q_prev;
;;;958    
;;;959    
;;;960        p_q_prev = p_q->DbgPrevPtr;
;;;961        p_q_next = p_q->DbgNextPtr;
000002  6981              LDR      r1,[r0,#0x18]
;;;962    
;;;963        if (p_q_prev == DEF_NULL) {
000004  b93a              CBNZ     r2,|L9.22|
;;;964            OSQDbgListPtr = p_q_next;
000006  4b09              LDR      r3,|L9.44|
000008  6019              STR      r1,[r3,#0]  ; OSQDbgListPtr
;;;965            if (p_q_next != DEF_NULL) {
00000a  b109              CBZ      r1,|L9.16|
;;;966                p_q_next->DbgPrevPtr = DEF_NULL;
00000c  2300              MOVS     r3,#0
00000e  614b              STR      r3,[r1,#0x14]
                  |L9.16|
;;;967            }
;;;968            p_q->DbgNextPtr = DEF_NULL;
000010  2300              MOVS     r3,#0
000012  6183              STR      r3,[r0,#0x18]
000014  e009              B        |L9.42|
                  |L9.22|
;;;969    
;;;970        } else if (p_q_next == DEF_NULL) {
000016  b919              CBNZ     r1,|L9.32|
;;;971            p_q_prev->DbgNextPtr = DEF_NULL;
000018  2300              MOVS     r3,#0
00001a  6193              STR      r3,[r2,#0x18]
;;;972            p_q->DbgPrevPtr      = DEF_NULL;
00001c  6143              STR      r3,[r0,#0x14]
00001e  e004              B        |L9.42|
                  |L9.32|
;;;973    
;;;974        } else {
;;;975            p_q_prev->DbgNextPtr =  p_q_next;
000020  6191              STR      r1,[r2,#0x18]
;;;976            p_q_next->DbgPrevPtr =  p_q_prev;
000022  614a              STR      r2,[r1,#0x14]
;;;977            p_q->DbgNextPtr      = DEF_NULL;
000024  2300              MOVS     r3,#0
000026  6183              STR      r3,[r0,#0x18]
;;;978            p_q->DbgPrevPtr      = DEF_NULL;
000028  6143              STR      r3,[r0,#0x14]
                  |L9.42|
;;;979        }
;;;980    }
00002a  4770              BX       lr
;;;981    #endif
                          ENDP

                  |L9.44|
                          DCD      OSQDbgListPtr

                          AREA ||i.OS_QPost||, CODE, READONLY, ALIGN=1

                  OS_QPost PROC
;;;1020   
;;;1021   void  OS_QPost (OS_Q         *p_q,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1022                   void         *p_void,
;;;1023                   OS_MSG_SIZE   msg_size,
;;;1024                   OS_OPT        opt,
;;;1025                   CPU_TS        ts,
;;;1026                   OS_ERR       *p_err)
;;;1027   {
000004  b085              SUB      sp,sp,#0x14
000006  4606              MOV      r6,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  461c              MOV      r4,r3
00000e  f8ddb038          LDR      r11,[sp,#0x38]
;;;1028       OS_OPT         post_type;
;;;1029       OS_PEND_LIST  *p_pend_list;
;;;1030       OS_PEND_DATA  *p_pend_data;
;;;1031       OS_PEND_DATA  *p_pend_data_next;
;;;1032       OS_TCB        *p_tcb;
;;;1033       CPU_SR_ALLOC();
000012  2000              MOVS     r0,#0
000014  9002              STR      r0,[sp,#8]
;;;1034   
;;;1035   
;;;1036   
;;;1037       OS_CRITICAL_ENTER();
000016  bf00              NOP      
000018  bf00              NOP      
00001a  f7fffffe          BL       CPU_SR_Save
00001e  9002              STR      r0,[sp,#8]
000020  bf00              NOP      
000022  f7fffffe          BL       CPU_IntDisMeasStart
000026  bf00              NOP      
;;;1038       p_pend_list = &p_q->PendList;
000028  f1060808          ADD      r8,r6,#8
;;;1039       if (p_pend_list->HeadPtr == DEF_NULL) {                     /* Any task waiting on message queue?                   */
00002c  f8d80000          LDR      r0,[r8,#0]
000030  b9d8              CBNZ     r0,|L10.106|
;;;1040           if ((opt & OS_OPT_POST_LIFO) == 0u) {                   /* Determine whether we post FIFO or LIFO               */
000032  f0140f10          TST      r4,#0x10
000036  d101              BNE      |L10.60|
;;;1041               post_type = OS_OPT_POST_FIFO;
000038  2700              MOVS     r7,#0
00003a  e000              B        |L10.62|
                  |L10.60|
;;;1042           } else {
;;;1043               post_type = OS_OPT_POST_LIFO;
00003c  2710              MOVS     r7,#0x10
                  |L10.62|
;;;1044           }
;;;1045           OS_MsgQPut(&p_q->MsgQ,                                  /* Place message in the message queue                   */
00003e  980f              LDR      r0,[sp,#0x3c]
000040  463b              MOV      r3,r7
000042  4652              MOV      r2,r10
000044  4649              MOV      r1,r9
000046  e9cdb000          STRD     r11,r0,[sp,#0]
00004a  f1060020          ADD      r0,r6,#0x20
00004e  f7fffffe          BL       OS_MsgQPut
;;;1046                      p_void,
;;;1047                      msg_size,
;;;1048                      post_type,
;;;1049                      ts,
;;;1050                      p_err);
;;;1051           OS_CRITICAL_EXIT();
000052  bf00              NOP      
000054  f7fffffe          BL       CPU_IntDisMeasStop
000058  bf00              NOP      
00005a  9802              LDR      r0,[sp,#8]
00005c  f7fffffe          BL       CPU_SR_Restore
000060  bf00              NOP      
000062  bf00              NOP      
                  |L10.100|
;;;1052           return;
;;;1053       }
;;;1054   
;;;1055       p_pend_data = p_pend_list->HeadPtr;
;;;1056       while (p_pend_data != DEF_NULL) {
;;;1057           p_tcb            = p_pend_data->TCBPtr;
;;;1058           p_pend_data_next = p_pend_data->NextPtr;
;;;1059           OS_Post((OS_PEND_OBJ *)((void *)p_q),
;;;1060                   p_tcb,
;;;1061                   p_void,
;;;1062                   msg_size,
;;;1063                   ts);
;;;1064           if ((opt & OS_OPT_POST_ALL) == 0)  {                    /* Post message to all tasks waiting?                   */
;;;1065               break;                                              /* No                                                   */
;;;1066           }
;;;1067           p_pend_data = p_pend_data_next;
;;;1068       }
;;;1069       OS_CRITICAL_EXIT_NO_SCHED();
;;;1070       if ((opt & OS_OPT_POST_NO_SCHED) == 0u) {
;;;1071           OSSched();                                              /* Run the scheduler                                    */
;;;1072       }
;;;1073      *p_err = OS_ERR_NONE;
;;;1074   }
000064  b005              ADD      sp,sp,#0x14
000066  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.106|
00006a  f8d85000          LDR      r5,[r8,#0]            ;1055
00006e  e010              B        |L10.146|
                  |L10.112|
000070  68a8              LDR      r0,[r5,#8]            ;1057
000072  9003              STR      r0,[sp,#0xc]          ;1057
000074  6868              LDR      r0,[r5,#4]            ;1058
000076  9004              STR      r0,[sp,#0x10]         ;1058
000078  4653              MOV      r3,r10                ;1059
00007a  464a              MOV      r2,r9                 ;1059
00007c  f8cdb000          STR      r11,[sp,#0]           ;1059
000080  4630              MOV      r0,r6                 ;1059
000082  9903              LDR      r1,[sp,#0xc]          ;1059
000084  f7fffffe          BL       OS_Post
000088  f4147f00          TST      r4,#0x200             ;1064
00008c  d100              BNE      |L10.144|
00008e  e002              B        |L10.150|
                  |L10.144|
000090  9d04              LDR      r5,[sp,#0x10]         ;1067
                  |L10.146|
000092  2d00              CMP      r5,#0                 ;1056
000094  d1ec              BNE      |L10.112|
                  |L10.150|
000096  bf00              NOP                            ;1065
000098  bf00              NOP                            ;1069
00009a  f7fffffe          BL       CPU_IntDisMeasStop
00009e  bf00              NOP                            ;1069
0000a0  9802              LDR      r0,[sp,#8]            ;1069
0000a2  f7fffffe          BL       CPU_SR_Restore
0000a6  bf00              NOP                            ;1069
0000a8  bf00              NOP                            ;1069
0000aa  f4144f00          TST      r4,#0x8000            ;1070
0000ae  d101              BNE      |L10.180|
0000b0  f7fffffe          BL       OSSched
                  |L10.180|
0000b4  2100              MOVS     r1,#0                 ;1073
0000b6  980f              LDR      r0,[sp,#0x3c]         ;1073
0000b8  8001              STRH     r1,[r0,#0]            ;1073
0000ba  bf00              NOP      
0000bc  e7d2              B        |L10.100|
;;;1075   
                          ENDP

