; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\bsp_spi_flash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\bsp_spi_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -I..\..\Malloc -I..\..\User\Modbus -Id:\Keil_v4\ARM\RV31\INC -Id:\Keil_v4\ARM\CMSIS\Include -Id:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Flash\Obj\bsp_spi_flash.crf ..\..\User\bsp\src\bsp_spi_flash.c]
                          THUMB

                          AREA ||i.bsp_InitSFlash||, CODE, READONLY, ALIGN=1

                  bsp_InitSFlash PROC
;;;159    */
;;;160    void bsp_InitSFlash(void)
000000  b510              PUSH     {r4,lr}
;;;161    {
;;;162    	sf_ConfigGPIO();			/* 配置GPIO */
000002  f7fffffe          BL       sf_ConfigGPIO
;;;163    	
;;;164    //	sf_CfgSpiHard();
;;;165    	
;;;166    	sf_ReadInfo();				/* 自动识别芯片型号 */
000006  f7fffffe          BL       sf_ReadInfo
;;;167    
;;;168    	sf_SetCS(0);				/* 软件方式，使能串行Flash片选 */
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       sf_SetCS
;;;169    	bsp_spiWrite1(CMD_DISWR);		/* 发送禁止写入的命令,即使能软件写保护 */
000010  2004              MOVS     r0,#4
000012  f7fffffe          BL       bsp_spiWrite1
;;;170    	sf_SetCS(1);				/* 软件方式，禁能串行Flash片选 */
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       sf_SetCS
;;;171    
;;;172    	sf_WaitForWriteEnd();		/* 等待串行Flash内部操作完成 */
00001c  f7fffffe          BL       sf_WaitForWriteEnd
;;;173    
;;;174    	sf_WriteStatus(0);			/* 解除所有BLOCK的写保护 */
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       sf_WriteStatus
;;;175    }
000026  bd10              POP      {r4,pc}
;;;176    
                          ENDP


                          AREA ||i.sf_AutoWritePage||, CODE, READONLY, ALIGN=2

                  sf_AutoWritePage PROC
;;;435    */
;;;436    static uint8_t sf_AutoWritePage(uint8_t *_ucpSrc, uint32_t _uiWrAddr, uint16_t _usWrLen)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;437    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;438    	uint16_t i;
;;;439    	uint16_t j;					/* 用于延时 */
;;;440    	uint32_t uiFirstAddr;		/* 扇区首址 */
;;;441    	uint8_t ucNeedErase;		/* 1表示需要擦除 */
;;;442    	uint8_t cRet;
;;;443    
;;;444    	/* 长度为0时不继续操作,直接认为成功 */
;;;445    	if (_usWrLen == 0)
00000a  b916              CBNZ     r6,|L2.18|
;;;446    	{
;;;447    		return 1;
00000c  2001              MOVS     r0,#1
                  |L2.14|
;;;448    	}
;;;449    
;;;450    	/* 如果偏移地址超过芯片容量则退出 */
;;;451    	if (_uiWrAddr >= g_tSF.TotalSize)
;;;452    	{
;;;453    		return 0;
;;;454    	}
;;;455    
;;;456    	/* 如果数据长度大于扇区容量，则退出 */
;;;457    	if (_usWrLen > g_tSF.PageSize)
;;;458    	{
;;;459    		return 0;
;;;460    	}
;;;461    
;;;462    	/* 如果FLASH中的数据没有变化,则不写FLASH */
;;;463    	sf_ReadBuffer(s_spiBuf, _uiWrAddr, _usWrLen);
;;;464    	if (memcmp(s_spiBuf, _ucpSrc, _usWrLen) == 0)
;;;465    	{
;;;466    		return 1;
;;;467    	}
;;;468    
;;;469    	/* 判断是否需要先擦除扇区 */
;;;470    	/* 如果旧数据修改为新数据，所有位均是 1->0 或者 0->0, 则无需擦除,提高Flash寿命 */
;;;471    	ucNeedErase = 0;
;;;472    	if (sf_NeedErase(s_spiBuf, _ucpSrc, _usWrLen))
;;;473    	{
;;;474    		ucNeedErase = 1;
;;;475    	}
;;;476    
;;;477    	uiFirstAddr = _uiWrAddr & (~(g_tSF.PageSize - 1));
;;;478    
;;;479    	if (_usWrLen == g_tSF.PageSize)		/* 整个扇区都改写 */
;;;480    	{
;;;481    		for	(i = 0; i < g_tSF.PageSize; i++)
;;;482    		{
;;;483    			s_spiBuf[i] = _ucpSrc[i];
;;;484    		}
;;;485    	}
;;;486    	else						/* 改写部分数据 */
;;;487    	{
;;;488    		/* 先将整个扇区的数据读出 */
;;;489    		sf_ReadBuffer(s_spiBuf, uiFirstAddr, g_tSF.PageSize);
;;;490    
;;;491    		/* 再用新数据覆盖 */
;;;492    		i = _uiWrAddr & (g_tSF.PageSize - 1);
;;;493    		memcpy(&s_spiBuf[i], _ucpSrc, _usWrLen);
;;;494    	}
;;;495    
;;;496    	/* 写完之后进行校验，如果不正确则重写，最多3次 */
;;;497    	cRet = 0;
;;;498    	for (i = 0; i < 3; i++)
;;;499    	{
;;;500    
;;;501    		/* 如果旧数据修改为新数据，所有位均是 1->0 或者 0->0, 则无需擦除,提高Flash寿命 */
;;;502    		if (ucNeedErase == 1)
;;;503    		{
;;;504    			sf_EraseSector(uiFirstAddr);		/* 擦除1个扇区 */
;;;505    		}
;;;506    
;;;507    		/* 编程一个PAGE */
;;;508    		sf_PageWrite(s_spiBuf, uiFirstAddr, g_tSF.PageSize);
;;;509    
;;;510    		if (sf_CmpData(_uiWrAddr, _ucpSrc, _usWrLen) == 0)
;;;511    		{
;;;512    			cRet = 1;
;;;513    			break;
;;;514    		}
;;;515    		else
;;;516    		{
;;;517    			if (sf_CmpData(_uiWrAddr, _ucpSrc, _usWrLen) == 0)
;;;518    			{
;;;519    				cRet = 1;
;;;520    				break;
;;;521    			}
;;;522    
;;;523    			/* 失败后延迟一段时间再重试 */
;;;524    			for (j = 0; j < 10000; j++);
;;;525    		}
;;;526    	}
;;;527    
;;;528    	return cRet;
;;;529    }
00000e  e8bd9ff0          POP      {r4-r12,pc}
                  |L2.18|
000012  483e              LDR      r0,|L2.268|
000014  6940              LDR      r0,[r0,#0x14]         ;451  ; g_tSF
000016  42a8              CMP      r0,r5                 ;451
000018  d801              BHI      |L2.30|
00001a  2000              MOVS     r0,#0                 ;453
00001c  e7f7              B        |L2.14|
                  |L2.30|
00001e  483b              LDR      r0,|L2.268|
000020  8b00              LDRH     r0,[r0,#0x18]         ;457  ; g_tSF
000022  42b0              CMP      r0,r6                 ;457
000024  da01              BGE      |L2.42|
000026  2000              MOVS     r0,#0                 ;459
000028  e7f1              B        |L2.14|
                  |L2.42|
00002a  4632              MOV      r2,r6                 ;463
00002c  4629              MOV      r1,r5                 ;463
00002e  4838              LDR      r0,|L2.272|
000030  f7fffffe          BL       sf_ReadBuffer
000034  4632              MOV      r2,r6                 ;464
000036  4639              MOV      r1,r7                 ;464
000038  4835              LDR      r0,|L2.272|
00003a  f7fffffe          BL       memcmp
00003e  b908              CBNZ     r0,|L2.68|
000040  2001              MOVS     r0,#1                 ;466
000042  e7e4              B        |L2.14|
                  |L2.68|
000044  f04f0a00          MOV      r10,#0                ;471
000048  4632              MOV      r2,r6                 ;472
00004a  4639              MOV      r1,r7                 ;472
00004c  4830              LDR      r0,|L2.272|
00004e  f7fffffe          BL       sf_NeedErase
000052  b108              CBZ      r0,|L2.88|
000054  f04f0a01          MOV      r10,#1                ;474
                  |L2.88|
000058  482c              LDR      r0,|L2.268|
00005a  8b00              LDRH     r0,[r0,#0x18]         ;477  ; g_tSF
00005c  1e40              SUBS     r0,r0,#1              ;477
00005e  ea250800          BIC      r8,r5,r0              ;477
000062  482a              LDR      r0,|L2.268|
000064  8b00              LDRH     r0,[r0,#0x18]         ;479  ; g_tSF
000066  42b0              CMP      r0,r6                 ;479
000068  d10b              BNE      |L2.130|
00006a  2400              MOVS     r4,#0                 ;481
00006c  e004              B        |L2.120|
                  |L2.110|
00006e  5d38              LDRB     r0,[r7,r4]            ;483
000070  4927              LDR      r1,|L2.272|
000072  5508              STRB     r0,[r1,r4]            ;483
000074  1c60              ADDS     r0,r4,#1              ;481
000076  b284              UXTH     r4,r0                 ;481
                  |L2.120|
000078  4824              LDR      r0,|L2.268|
00007a  8b00              LDRH     r0,[r0,#0x18]         ;481  ; g_tSF
00007c  42a0              CMP      r0,r4                 ;481
00007e  dcf6              BGT      |L2.110|
000080  e010              B        |L2.164|
                  |L2.130|
000082  4822              LDR      r0,|L2.268|
000084  8b02              LDRH     r2,[r0,#0x18]         ;489  ; g_tSF
000086  4641              MOV      r1,r8                 ;489
000088  4821              LDR      r0,|L2.272|
00008a  f7fffffe          BL       sf_ReadBuffer
00008e  481f              LDR      r0,|L2.268|
000090  8b00              LDRH     r0,[r0,#0x18]         ;492  ; g_tSF
000092  1e40              SUBS     r0,r0,#1              ;492
000094  4028              ANDS     r0,r0,r5              ;492
000096  b284              UXTH     r4,r0                 ;492
000098  491d              LDR      r1,|L2.272|
00009a  1908              ADDS     r0,r1,r4              ;493
00009c  4632              MOV      r2,r6                 ;493
00009e  4639              MOV      r1,r7                 ;493
0000a0  f7fffffe          BL       __aeabi_memcpy
                  |L2.164|
0000a4  f04f0b00          MOV      r11,#0                ;497
0000a8  2400              MOVS     r4,#0                 ;498
0000aa  e02a              B        |L2.258|
                  |L2.172|
0000ac  f1ba0f01          CMP      r10,#1                ;502
0000b0  d102              BNE      |L2.184|
0000b2  4640              MOV      r0,r8                 ;504
0000b4  f7fffffe          BL       sf_EraseSector
                  |L2.184|
0000b8  4814              LDR      r0,|L2.268|
0000ba  8b02              LDRH     r2,[r0,#0x18]         ;508  ; g_tSF
0000bc  4641              MOV      r1,r8                 ;508
0000be  4814              LDR      r0,|L2.272|
0000c0  f7fffffe          BL       sf_PageWrite
0000c4  4632              MOV      r2,r6                 ;510
0000c6  4639              MOV      r1,r7                 ;510
0000c8  4628              MOV      r0,r5                 ;510
0000ca  f7fffffe          BL       sf_CmpData
0000ce  b910              CBNZ     r0,|L2.214|
0000d0  f04f0b01          MOV      r11,#1                ;512
0000d4  e017              B        |L2.262|
                  |L2.214|
0000d6  4632              MOV      r2,r6                 ;517
0000d8  4639              MOV      r1,r7                 ;517
0000da  4628              MOV      r0,r5                 ;517
0000dc  f7fffffe          BL       sf_CmpData
0000e0  b910              CBNZ     r0,|L2.232|
0000e2  f04f0b01          MOV      r11,#1                ;519
0000e6  e00e              B        |L2.262|
                  |L2.232|
0000e8  f04f0900          MOV      r9,#0                 ;524
0000ec  e003              B        |L2.246|
                  |L2.238|
0000ee  f1090001          ADD      r0,r9,#1              ;524
0000f2  fa1ff980          UXTH     r9,r0                 ;524
                  |L2.246|
0000f6  f2427010          MOV      r0,#0x2710            ;524
0000fa  4581              CMP      r9,r0                 ;524
0000fc  dbf7              BLT      |L2.238|
0000fe  1c60              ADDS     r0,r4,#1              ;498
000100  b284              UXTH     r4,r0                 ;498
                  |L2.258|
000102  2c03              CMP      r4,#3                 ;498
000104  dbd2              BLT      |L2.172|
                  |L2.262|
000106  bf00              NOP                            ;513
000108  4658              MOV      r0,r11                ;528
00010a  e780              B        |L2.14|
;;;530    
                          ENDP

                  |L2.268|
                          DCD      g_tSF
                  |L2.272|
                          DCD      s_spiBuf

                          AREA ||i.sf_CfgSpiHard||, CODE, READONLY, ALIGN=2

                  sf_CfgSpiHard PROC
;;;91     */
;;;92     void sf_CfgSpiHard(void)
000000  b500              PUSH     {lr}
;;;93     {
000002  b085              SUB      sp,sp,#0x14
;;;94     	SPI_InitTypeDef  SPI_InitStructure;
;;;95     
;;;96     	/* 配置SPI硬件参数 */
;;;97     	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;	/* 数据方向：2线全双工 */
000004  2000              MOVS     r0,#0
000006  f8ad0000          STRH     r0,[sp,#0]
;;;98     	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;		/* STM32的SPI工作模式 ：主机模式 */
00000a  f44f7082          MOV      r0,#0x104
00000e  f8ad0002          STRH     r0,[sp,#2]
;;;99     	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;	/* 数据位长度 ： 8位 */
000012  2000              MOVS     r0,#0
000014  f8ad0004          STRH     r0,[sp,#4]
;;;100    	/* SPI_CPOL和SPI_CPHA结合使用决定时钟和数据采样点的相位关系、
;;;101    	   本例配置: 总线空闲是高电平,第2个边沿（上升沿采样数据)
;;;102    	*/
;;;103    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;			/* 时钟上升沿采样数据 */
000018  2002              MOVS     r0,#2
00001a  f8ad0006          STRH     r0,[sp,#6]
;;;104    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;		/* 时钟的第2个边沿采样数据 */
00001e  2001              MOVS     r0,#1
000020  f8ad0008          STRH     r0,[sp,#8]
;;;105    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;			/* 片选控制方式：软件控制 */
000024  0240              LSLS     r0,r0,#9
000026  f8ad000a          STRH     r0,[sp,#0xa]
;;;106    
;;;107    	/* 设置波特率预分频系数 SPI_BaudRatePrescaler_8 ，实测SCK周期 96ns, 10.4MHz */
;;;108    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
00002a  2010              MOVS     r0,#0x10
00002c  f8ad000c          STRH     r0,[sp,#0xc]
;;;109    
;;;110    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;	/* 数据位传输次序：高位先传 */
000030  2000              MOVS     r0,#0
000032  f8ad000e          STRH     r0,[sp,#0xe]
;;;111    	SPI_InitStructure.SPI_CRCPolynomial = 7;			/* CRC多项式寄存器，复位后为7。本例程不用 */
000036  2007              MOVS     r0,#7
000038  f8ad0010          STRH     r0,[sp,#0x10]
;;;112    	SPI_Init(SPI1, &SPI_InitStructure);
00003c  4669              MOV      r1,sp
00003e  4804              LDR      r0,|L3.80|
000040  f7fffffe          BL       SPI_Init
;;;113    
;;;114    	SPI_Cmd(SPI1, ENABLE);				/* 使能SPI  */
000044  2101              MOVS     r1,#1
000046  4802              LDR      r0,|L3.80|
000048  f7fffffe          BL       SPI_Cmd
;;;115    }
00004c  b005              ADD      sp,sp,#0x14
00004e  bd00              POP      {pc}
;;;116    
                          ENDP

                  |L3.80|
                          DCD      0x40013000

                          AREA ||i.sf_CmpData||, CODE, READONLY, ALIGN=2

                  sf_CmpData PROC
;;;347    */
;;;348    static uint8_t sf_CmpData(uint32_t _uiSrcAddr, uint8_t *_ucpTar, uint32_t _uiSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;349    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;350    	uint8_t ucValue;
;;;351    
;;;352    	/* 如果读取的数据长度为0或者超出串行Flash地址空间，则直接返回 */
;;;353    	if ((_uiSrcAddr + _uiSize) > g_tSF.TotalSize)
00000a  1960              ADDS     r0,r4,r5
00000c  4918              LDR      r1,|L4.112|
00000e  6949              LDR      r1,[r1,#0x14]  ; g_tSF
000010  4288              CMP      r0,r1
000012  d902              BLS      |L4.26|
;;;354    	{
;;;355    		return 1;
000014  2001              MOVS     r0,#1
                  |L4.22|
;;;356    	}
;;;357    
;;;358    	if (_uiSize == 0)
;;;359    	{
;;;360    		return 0;
;;;361    	}
;;;362    
;;;363    	sf_SetCS(0);									/* 使能片选 */
;;;364    	bsp_spiWrite1(CMD_READ);							/* 发送读命令 */
;;;365    	bsp_spiWrite1((_uiSrcAddr & 0xFF0000) >> 16);		/* 发送扇区地址的高8bit */
;;;366    	bsp_spiWrite1((_uiSrcAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;367    	bsp_spiWrite1(_uiSrcAddr & 0xFF);					/* 发送扇区地址低8bit */
;;;368    	while (_uiSize--)
;;;369    	{
;;;370    		/* 读一个字节 */
;;;371    		ucValue = bsp_spiRead1();
;;;372    		if (*_ucpTar++ != ucValue)
;;;373    		{
;;;374    			sf_SetCS(1);
;;;375    			return 1;
;;;376    		}
;;;377    	}
;;;378    	sf_SetCS(1);
;;;379    	return 0;
;;;380    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L4.26|
00001a  b90d              CBNZ     r5,|L4.32|
00001c  2000              MOVS     r0,#0                 ;360
00001e  e7fa              B        |L4.22|
                  |L4.32|
000020  2000              MOVS     r0,#0                 ;363
000022  f7fffffe          BL       sf_SetCS
000026  2003              MOVS     r0,#3                 ;364
000028  f7fffffe          BL       bsp_spiWrite1
00002c  f3c44007          UBFX     r0,r4,#16,#8          ;365
000030  f7fffffe          BL       bsp_spiWrite1
000034  f3c42007          UBFX     r0,r4,#8,#8           ;366
000038  f7fffffe          BL       bsp_spiWrite1
00003c  b2e0              UXTB     r0,r4                 ;367
00003e  f7fffffe          BL       bsp_spiWrite1
000042  e00b              B        |L4.92|
                  |L4.68|
000044  f7fffffe          BL       bsp_spiRead1
000048  4607              MOV      r7,r0                 ;371
00004a  f8161b01          LDRB     r1,[r6],#1            ;372
00004e  42b9              CMP      r1,r7                 ;372
000050  d004              BEQ      |L4.92|
000052  2001              MOVS     r0,#1                 ;374
000054  f7fffffe          BL       sf_SetCS
000058  2001              MOVS     r0,#1                 ;375
00005a  e7dc              B        |L4.22|
                  |L4.92|
00005c  0028              MOVS     r0,r5                 ;368
00005e  f1a50501          SUB      r5,r5,#1              ;368
000062  d1ef              BNE      |L4.68|
000064  2001              MOVS     r0,#1                 ;378
000066  f7fffffe          BL       sf_SetCS
00006a  2000              MOVS     r0,#0                 ;379
00006c  e7d3              B        |L4.22|
;;;381    
                          ENDP

00006e  0000              DCW      0x0000
                  |L4.112|
                          DCD      g_tSF

                          AREA ||i.sf_ConfigGPIO||, CODE, READONLY, ALIGN=2

                  sf_ConfigGPIO PROC
;;;64     */
;;;65     static void sf_ConfigGPIO(void)
000000  b508              PUSH     {r3,lr}
;;;66     {
;;;67     	/*
;;;68     		安富莱STM32-V4 开发板口线分配：  串行Flash型号为 W25Q64BVSSIG (80MHz)
;;;69     		PF8/SF_CS
;;;70     	*/
;;;71     	GPIO_InitTypeDef GPIO_InitStructure;
;;;72     
;;;73     	/* 使能GPIO 时钟 */
;;;74     	RCC_APB2PeriphClockCmd(SF_RCC_CS, ENABLE);
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;75     
;;;76     	/* 配置片选口线为推挽输出模式 */
;;;77     	sf_SetCS(1);		/* 片选置高，不选中 */
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       sf_SetCS
;;;78     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;79     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000016  2003              MOVS     r0,#3
000018  f88d0002          STRB     r0,[sp,#2]
;;;80     	GPIO_InitStructure.GPIO_Pin = SF_PIN_CS;
00001c  2010              MOVS     r0,#0x10
00001e  f8ad0000          STRH     r0,[sp,#0]
;;;81     	GPIO_Init(SF_PORT_CS, &GPIO_InitStructure);
000022  4669              MOV      r1,sp
000024  4801              LDR      r0,|L5.44|
000026  f7fffffe          BL       GPIO_Init
;;;82     }
00002a  bd08              POP      {r3,pc}
;;;83     
                          ENDP

                  |L5.44|
                          DCD      0x40010800

                          AREA ||i.sf_EraseChip||, CODE, READONLY, ALIGN=1

                  sf_EraseChip PROC
;;;207    */
;;;208    void sf_EraseChip(void)
000000  b510              PUSH     {r4,lr}
;;;209    {
;;;210    	sf_WriteEnable();								/* 发送写使能命令 */
000002  f7fffffe          BL       sf_WriteEnable
;;;211    
;;;212    	/* 擦除扇区操作 */
;;;213    	sf_SetCS(0);									/* 使能片选 */
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       sf_SetCS
;;;214    	bsp_spiWrite1(CMD_BE);							/* 发送整片擦除命令 */
00000c  20c7              MOVS     r0,#0xc7
00000e  f7fffffe          BL       bsp_spiWrite1
;;;215    	sf_SetCS(1);									/* 禁能片选 */
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       sf_SetCS
;;;216    
;;;217    	sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
000018  f7fffffe          BL       sf_WaitForWriteEnd
;;;218    }
00001c  bd10              POP      {r4,pc}
;;;219    
                          ENDP


                          AREA ||i.sf_EraseSector||, CODE, READONLY, ALIGN=1

                  sf_EraseSector PROC
;;;184    */
;;;185    void sf_EraseSector(uint32_t _uiSectorAddr)
000000  b510              PUSH     {r4,lr}
;;;186    {
000002  4604              MOV      r4,r0
;;;187    	sf_WriteEnable();								/* 发送写使能命令 */
000004  f7fffffe          BL       sf_WriteEnable
;;;188    
;;;189    	/* 擦除扇区操作 */
;;;190    	sf_SetCS(0);									/* 使能片选 */
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       sf_SetCS
;;;191    	bsp_spiWrite1(CMD_SE);								/* 发送擦除命令 */
00000e  2020              MOVS     r0,#0x20
000010  f7fffffe          BL       bsp_spiWrite1
;;;192    	bsp_spiWrite1((_uiSectorAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
000014  f3c44007          UBFX     r0,r4,#16,#8
000018  f7fffffe          BL       bsp_spiWrite1
;;;193    	bsp_spiWrite1((_uiSectorAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
00001c  f3c42007          UBFX     r0,r4,#8,#8
000020  f7fffffe          BL       bsp_spiWrite1
;;;194    	bsp_spiWrite1(_uiSectorAddr & 0xFF);				/* 发送扇区地址低8bit */
000024  b2e0              UXTB     r0,r4
000026  f7fffffe          BL       bsp_spiWrite1
;;;195    	sf_SetCS(1);									/* 禁能片选 */
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       sf_SetCS
;;;196    
;;;197    	sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
000030  f7fffffe          BL       sf_WaitForWriteEnd
;;;198    }
000034  bd10              POP      {r4,pc}
;;;199    
                          ENDP


                          AREA ||i.sf_NeedErase||, CODE, READONLY, ALIGN=1

                  sf_NeedErase PROC
;;;391    */
;;;392    static uint8_t sf_NeedErase(uint8_t * _ucpOldBuf, uint8_t *_ucpNewBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;393    {
000002  4603              MOV      r3,r0
;;;394    	uint16_t i;
;;;395    	uint8_t ucOld;
;;;396    
;;;397    	/*
;;;398    	算法第1步：old 求反, new 不变
;;;399    	      old    new
;;;400    		  1101   0101
;;;401    	~     1111
;;;402    		= 0010   0101
;;;403    
;;;404    	算法第2步: old 求反的结果与 new 位与
;;;405    		  0010   old
;;;406    	&	  0101   new
;;;407    		 =0000
;;;408    
;;;409    	算法第3步: 结果为0,则表示无需擦除. 否则表示需要擦除
;;;410    	*/
;;;411    
;;;412    	for (i = 0; i < _usLen; i++)
000004  2400              MOVS     r4,#0
000006  e00b              B        |L8.32|
                  |L8.8|
;;;413    	{
;;;414    		ucOld = *_ucpOldBuf++;
000008  f8135b01          LDRB     r5,[r3],#1
;;;415    		ucOld = ~ucOld;
00000c  43e8              MVNS     r0,r5
00000e  b2c5              UXTB     r5,r0
;;;416    
;;;417    		/* 注意错误的写法: if (ucOld & (*_ucpNewBuf++) != 0) */
;;;418    		if ((ucOld & (*_ucpNewBuf++)) != 0)
000010  f8110b01          LDRB     r0,[r1],#1
000014  4228              TST      r0,r5
000016  d001              BEQ      |L8.28|
;;;419    		{
;;;420    			return 1;
000018  2001              MOVS     r0,#1
                  |L8.26|
;;;421    		}
;;;422    	}
;;;423    	return 0;
;;;424    }
00001a  bd70              POP      {r4-r6,pc}
                  |L8.28|
00001c  1c60              ADDS     r0,r4,#1              ;412
00001e  b284              UXTH     r4,r0                 ;412
                  |L8.32|
000020  4294              CMP      r4,r2                 ;412
000022  dbf1              BLT      |L8.8|
000024  2000              MOVS     r0,#0                 ;423
000026  e7f8              B        |L8.26|
;;;425    
                          ENDP


                          AREA ||i.sf_PageWrite||, CODE, READONLY, ALIGN=2

                  sf_PageWrite PROC
;;;229    */
;;;230    void sf_PageWrite(uint8_t * _pBuf, uint32_t _uiWriteAddr, uint16_t _usSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;231    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;232    	uint32_t i, j;
;;;233    
;;;234    	if (g_tSF.ChipID == SST25VF016B_ID)
00000a  484a              LDR      r0,|L9.308|
00000c  6800              LDR      r0,[r0,#0]  ; g_tSF
00000e  494a              LDR      r1,|L9.312|
000010  4288              CMP      r0,r1
000012  d153              BNE      |L9.188|
;;;235    	{
;;;236    		/* AAI指令要求传入的数据个数是偶数 */
;;;237    		if ((_usSize < 2) && (_usSize % 2))
000014  2d02              CMP      r5,#2
000016  da08              BGE      |L9.42|
000018  4628              MOV      r0,r5
00001a  eb0571d0          ADD      r1,r5,r0,LSR #31
00001e  1049              ASRS     r1,r1,#1
000020  ebb50141          SUBS     r1,r5,r1,LSL #1
000024  d001              BEQ      |L9.42|
                  |L9.38|
;;;238    		{
;;;239    			return ;
;;;240    		}
;;;241    
;;;242    		sf_WriteEnable();								/* 发送写使能命令 */
;;;243    
;;;244    		sf_SetCS(0);									/* 使能片选 */
;;;245    		bsp_spiWrite1(CMD_AAI);							/* 发送AAI命令(地址自动增加编程) */
;;;246    		bsp_spiWrite1((_uiWriteAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
;;;247    		bsp_spiWrite1((_uiWriteAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;248    		bsp_spiWrite1(_uiWriteAddr & 0xFF);				/* 发送扇区地址低8bit */
;;;249    		bsp_spiWrite1(*_pBuf++);							/* 发送第1个数据 */
;;;250    		bsp_spiWrite1(*_pBuf++);							/* 发送第2个数据 */
;;;251    		sf_SetCS(1);									/* 禁能片选 */
;;;252    
;;;253    		sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
;;;254    
;;;255    		_usSize -= 2;									/* 计算剩余字节数 */
;;;256    
;;;257    		for (i = 0; i < _usSize / 2; i++)
;;;258    		{
;;;259    			sf_SetCS(0);								/* 使能片选 */
;;;260    			bsp_spiWrite1(CMD_AAI);						/* 发送AAI命令(地址自动增加编程) */
;;;261    			bsp_spiWrite1(*_pBuf++);						/* 发送数据 */
;;;262    			bsp_spiWrite1(*_pBuf++);						/* 发送数据 */
;;;263    			sf_SetCS(1);								/* 禁能片选 */
;;;264    			sf_WaitForWriteEnd();						/* 等待串行Flash内部写操作完成 */
;;;265    		}
;;;266    
;;;267    		/* 进入写保护状态 */
;;;268    		sf_SetCS(0);
;;;269    		bsp_spiWrite1(CMD_DISWR);
;;;270    		sf_SetCS(1);
;;;271    
;;;272    		sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
;;;273    	}
;;;274    	else	/* for MX25L1606E 、 W25Q64BV */
;;;275    	{
;;;276    		for (j = 0; j < _usSize / 256; j++)
;;;277    		{
;;;278    			sf_WriteEnable();								/* 发送写使能命令 */
;;;279    
;;;280    			sf_SetCS(0);									/* 使能片选 */
;;;281    			bsp_spiWrite1(0x02);								/* 发送AAI命令(地址自动增加编程) */
;;;282    			bsp_spiWrite1((_uiWriteAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
;;;283    			bsp_spiWrite1((_uiWriteAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;284    			bsp_spiWrite1(_uiWriteAddr & 0xFF);				/* 发送扇区地址低8bit */
;;;285    
;;;286    			for (i = 0; i < 256; i++)
;;;287    			{
;;;288    				bsp_spiWrite1(*_pBuf++);					/* 发送数据 */
;;;289    			}
;;;290    
;;;291    			sf_SetCS(1);								/* 禁止片选 */
;;;292    
;;;293    			sf_WaitForWriteEnd();						/* 等待串行Flash内部写操作完成 */
;;;294    
;;;295    			_uiWriteAddr += 256;
;;;296    		}
;;;297    
;;;298    		/* 进入写保护状态 */
;;;299    		sf_SetCS(0);
;;;300    		bsp_spiWrite1(CMD_DISWR);
;;;301    		sf_SetCS(1);
;;;302    
;;;303    		sf_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
;;;304    	}
;;;305    }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L9.42|
00002a  f7fffffe          BL       sf_WriteEnable
00002e  2000              MOVS     r0,#0                 ;244
000030  f7fffffe          BL       sf_SetCS
000034  20ad              MOVS     r0,#0xad              ;245
000036  f7fffffe          BL       bsp_spiWrite1
00003a  f3c64007          UBFX     r0,r6,#16,#8          ;246
00003e  f7fffffe          BL       bsp_spiWrite1
000042  f3c62007          UBFX     r0,r6,#8,#8           ;247
000046  f7fffffe          BL       bsp_spiWrite1
00004a  b2f0              UXTB     r0,r6                 ;248
00004c  f7fffffe          BL       bsp_spiWrite1
000050  f8140b01          LDRB     r0,[r4],#1            ;249
000054  f7fffffe          BL       bsp_spiWrite1
000058  f8140b01          LDRB     r0,[r4],#1            ;250
00005c  f7fffffe          BL       bsp_spiWrite1
000060  2001              MOVS     r0,#1                 ;251
000062  f7fffffe          BL       sf_SetCS
000066  f7fffffe          BL       sf_WaitForWriteEnd
00006a  1ea8              SUBS     r0,r5,#2              ;255
00006c  b285              UXTH     r5,r0                 ;255
00006e  2700              MOVS     r7,#0                 ;257
000070  e013              B        |L9.154|
                  |L9.114|
000072  2000              MOVS     r0,#0                 ;259
000074  f7fffffe          BL       sf_SetCS
000078  20ad              MOVS     r0,#0xad              ;260
00007a  f7fffffe          BL       bsp_spiWrite1
00007e  f8140b01          LDRB     r0,[r4],#1            ;261
000082  f7fffffe          BL       bsp_spiWrite1
000086  f8140b01          LDRB     r0,[r4],#1            ;262
00008a  f7fffffe          BL       bsp_spiWrite1
00008e  2001              MOVS     r0,#1                 ;263
000090  f7fffffe          BL       sf_SetCS
000094  f7fffffe          BL       sf_WaitForWriteEnd
000098  1c7f              ADDS     r7,r7,#1              ;257
                  |L9.154|
00009a  eb0571d5          ADD      r1,r5,r5,LSR #31      ;257
00009e  ebb70f61          CMP      r7,r1,ASR #1          ;257
0000a2  d3e6              BCC      |L9.114|
0000a4  2000              MOVS     r0,#0                 ;268
0000a6  f7fffffe          BL       sf_SetCS
0000aa  2004              MOVS     r0,#4                 ;269
0000ac  f7fffffe          BL       bsp_spiWrite1
0000b0  2001              MOVS     r0,#1                 ;270
0000b2  f7fffffe          BL       sf_SetCS
0000b6  f7fffffe          BL       sf_WaitForWriteEnd
0000ba  e038              B        |L9.302|
                  |L9.188|
0000bc  f04f0800          MOV      r8,#0                 ;276
0000c0  e024              B        |L9.268|
                  |L9.194|
0000c2  f7fffffe          BL       sf_WriteEnable
0000c6  2000              MOVS     r0,#0                 ;280
0000c8  f7fffffe          BL       sf_SetCS
0000cc  2002              MOVS     r0,#2                 ;281
0000ce  f7fffffe          BL       bsp_spiWrite1
0000d2  f3c64007          UBFX     r0,r6,#16,#8          ;282
0000d6  f7fffffe          BL       bsp_spiWrite1
0000da  f3c62007          UBFX     r0,r6,#8,#8           ;283
0000de  f7fffffe          BL       bsp_spiWrite1
0000e2  b2f0              UXTB     r0,r6                 ;284
0000e4  f7fffffe          BL       bsp_spiWrite1
0000e8  2700              MOVS     r7,#0                 ;286
0000ea  e004              B        |L9.246|
                  |L9.236|
0000ec  f8140b01          LDRB     r0,[r4],#1            ;288
0000f0  f7fffffe          BL       bsp_spiWrite1
0000f4  1c7f              ADDS     r7,r7,#1              ;286
                  |L9.246|
0000f6  2fff              CMP      r7,#0xff              ;286
0000f8  d9f8              BLS      |L9.236|
0000fa  2001              MOVS     r0,#1                 ;291
0000fc  f7fffffe          BL       sf_SetCS
000100  f7fffffe          BL       sf_WaitForWriteEnd
000104  f5067680          ADD      r6,r6,#0x100          ;295
000108  f1080801          ADD      r8,r8,#1              ;276
                  |L9.268|
00010c  17e9              ASRS     r1,r5,#31             ;276
00010e  eb056111          ADD      r1,r5,r1,LSR #24      ;276
000112  ebb82f21          CMP      r8,r1,ASR #8          ;276
000116  d3d4              BCC      |L9.194|
000118  2000              MOVS     r0,#0                 ;299
00011a  f7fffffe          BL       sf_SetCS
00011e  2004              MOVS     r0,#4                 ;300
000120  f7fffffe          BL       bsp_spiWrite1
000124  2001              MOVS     r0,#1                 ;301
000126  f7fffffe          BL       sf_SetCS
00012a  f7fffffe          BL       sf_WaitForWriteEnd
                  |L9.302|
00012e  bf00              NOP      
000130  e779              B        |L9.38|
;;;306    
                          ENDP

000132  0000              DCW      0x0000
                  |L9.308|
                          DCD      g_tSF
                  |L9.312|
                          DCD      0x00bf2541

                          AREA ||i.sf_ReadBuffer||, CODE, READONLY, ALIGN=2

                  sf_ReadBuffer PROC
;;;316    */
;;;317    void sf_ReadBuffer(uint8_t * _pBuf, uint32_t _uiReadAddr, uint32_t _uiSize)
000000  b570              PUSH     {r4-r6,lr}
;;;318    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;319    	/* 如果读取的数据长度为0或者超出串行Flash地址空间，则直接返回 */
;;;320    	if ((_uiSize == 0) ||(_uiReadAddr + _uiSize) > g_tSF.TotalSize)
000008  b125              CBZ      r5,|L10.20|
00000a  1960              ADDS     r0,r4,r5
00000c  4911              LDR      r1,|L10.84|
00000e  6949              LDR      r1,[r1,#0x14]  ; g_tSF
000010  4288              CMP      r0,r1
000012  d900              BLS      |L10.22|
                  |L10.20|
;;;321    	{
;;;322    		return;
;;;323    	}
;;;324    
;;;325    	/* 擦除扇区操作 */
;;;326    	sf_SetCS(0);									/* 使能片选 */
;;;327    	bsp_spiWrite1(CMD_READ);							/* 发送读命令 */
;;;328    	bsp_spiWrite1((_uiReadAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
;;;329    	bsp_spiWrite1((_uiReadAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;330    	bsp_spiWrite1(_uiReadAddr & 0xFF);				/* 发送扇区地址低8bit */
;;;331    	while (_uiSize--)
;;;332    	{
;;;333    		*_pBuf++ = bsp_spiRead1();			/* 读一个字节并存储到pBuf，读完后指针自加1 */
;;;334    	}
;;;335    	sf_SetCS(1);									/* 禁能片选 */
;;;336    }
000014  bd70              POP      {r4-r6,pc}
                  |L10.22|
000016  2000              MOVS     r0,#0                 ;326
000018  f7fffffe          BL       sf_SetCS
00001c  2003              MOVS     r0,#3                 ;327
00001e  f7fffffe          BL       bsp_spiWrite1
000022  f3c44007          UBFX     r0,r4,#16,#8          ;328
000026  f7fffffe          BL       bsp_spiWrite1
00002a  f3c42007          UBFX     r0,r4,#8,#8           ;329
00002e  f7fffffe          BL       bsp_spiWrite1
000032  b2e0              UXTB     r0,r4                 ;330
000034  f7fffffe          BL       bsp_spiWrite1
000038  e003              B        |L10.66|
                  |L10.58|
00003a  f7fffffe          BL       bsp_spiRead1
00003e  f8060b01          STRB     r0,[r6],#1            ;333
                  |L10.66|
000042  0028              MOVS     r0,r5                 ;331
000044  f1a50501          SUB      r5,r5,#1              ;331
000048  d1f7              BNE      |L10.58|
00004a  2001              MOVS     r0,#1                 ;335
00004c  f7fffffe          BL       sf_SetCS
000050  bf00              NOP      
000052  e7df              B        |L10.20|
;;;337    
                          ENDP

                  |L10.84|
                          DCD      g_tSF

                          AREA ||i.sf_ReadID||, CODE, READONLY, ALIGN=1

                  sf_ReadID PROC
;;;648    */
;;;649    uint32_t sf_ReadID(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;650    {
;;;651    	uint32_t uiID;
;;;652    	uint8_t id1, id2, id3;
;;;653    
;;;654    	sf_SetCS(0);									/* 使能片选 */
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       sf_SetCS
;;;655    	bsp_spiWrite1(CMD_RDID);								/* 发送读ID命令 */
00000a  209f              MOVS     r0,#0x9f
00000c  f7fffffe          BL       bsp_spiWrite1
;;;656    	id1 = bsp_spiRead1();					/* 读ID的第1个字节 */
000010  f7fffffe          BL       bsp_spiRead1
000014  4605              MOV      r5,r0
;;;657    	id2 = bsp_spiRead1();					/* 读ID的第2个字节 */
000016  f7fffffe          BL       bsp_spiRead1
00001a  4606              MOV      r6,r0
;;;658    	id3 = bsp_spiRead1();					/* 读ID的第3个字节 */
00001c  f7fffffe          BL       bsp_spiRead1
000020  4607              MOV      r7,r0
;;;659    	sf_SetCS(1);									/* 禁能片选 */
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       sf_SetCS
;;;660    
;;;661    	uiID = ((uint32_t)id1 << 16) | ((uint32_t)id2 << 8) | id3;
000028  0428              LSLS     r0,r5,#16
00002a  ea402006          ORR      r0,r0,r6,LSL #8
00002e  ea400407          ORR      r4,r0,r7
;;;662    
;;;663    	return uiID;
000032  4620              MOV      r0,r4
;;;664    }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;665    
                          ENDP


                          AREA ||i.sf_ReadInfo||, CODE, READONLY, ALIGN=2

                  sf_ReadInfo PROC
;;;673    */
;;;674    void sf_ReadInfo(void)
000000  b510              PUSH     {r4,lr}
;;;675    {
;;;676    	/* 自动识别串行Flash型号 */
;;;677    	{
;;;678    		g_tSF.ChipID = sf_ReadID();	/* 芯片ID */
000002  f7fffffe          BL       sf_ReadID
000006  4937              LDR      r1,|L12.228|
000008  6008              STR      r0,[r1,#0]  ; g_tSF
;;;679    
;;;680    		switch (g_tSF.ChipID)
00000a  4608              MOV      r0,r1
00000c  6800              LDR      r0,[r0,#0]  ; g_tSF
00000e  4a36              LDR      r2,|L12.232|
000010  1a81              SUBS     r1,r0,r2
000012  4290              CMP      r0,r2
000014  d03f              BEQ      |L12.150|
000016  dc09              BGT      |L12.44|
000018  4934              LDR      r1,|L12.236|
00001a  1840              ADDS     r0,r0,r1
00001c  d00b              BEQ      |L12.54|
00001e  4934              LDR      r1,|L12.240|
000020  1840              ADDS     r0,r0,r1
000022  d014              BEQ      |L12.78|
000024  f5b02fc4          CMP      r0,#0x62000
000028  d14d              BNE      |L12.198|
00002a  e01c              B        |L12.102|
                  |L12.44|
00002c  2902              CMP      r1,#2
00002e  d026              BEQ      |L12.126|
000030  2903              CMP      r1,#3
000032  d148              BNE      |L12.198|
000034  e03b              B        |L12.174|
                  |L12.54|
;;;681    		{
;;;682    			case SST25VF016B_ID:
;;;683    				strcpy(g_tSF.ChipName, "SST25VF016B");
000036  a12f              ADR      r1,|L12.244|
000038  482a              LDR      r0,|L12.228|
00003a  1d00              ADDS     r0,r0,#4
00003c  f7fffffe          BL       strcpy
;;;684    				g_tSF.TotalSize = 2 * 1024 * 1024;	/* 总容量 = 2M */
000040  f44f1000          MOV      r0,#0x200000
000044  4927              LDR      r1,|L12.228|
000046  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;685    				g_tSF.PageSize = 4 * 1024;			/* 页面大小 = 4K */
000048  1240              ASRS     r0,r0,#9
00004a  8308              STRH     r0,[r1,#0x18]
;;;686    				break;
00004c  e047              B        |L12.222|
                  |L12.78|
;;;687    
;;;688    			case MX25L1606E_ID:
;;;689    				strcpy(g_tSF.ChipName, "MX25L1606E");
00004e  a12c              ADR      r1,|L12.256|
000050  4824              LDR      r0,|L12.228|
000052  1d00              ADDS     r0,r0,#4
000054  f7fffffe          BL       strcpy
;;;690    				g_tSF.TotalSize = 2 * 1024 * 1024;	/* 总容量 = 2M */
000058  f44f1000          MOV      r0,#0x200000
00005c  4921              LDR      r1,|L12.228|
00005e  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;691    				g_tSF.PageSize = 4 * 1024;			/* 页面大小 = 4K */
000060  1240              ASRS     r0,r0,#9
000062  8308              STRH     r0,[r1,#0x18]
;;;692    				break;
000064  e03b              B        |L12.222|
                  |L12.102|
;;;693    			
;;;694    			case BH25Q16CS1G_ID:
;;;695    				strcpy(g_tSF.ChipName, "BH25Q16CS1G");
000066  a129              ADR      r1,|L12.268|
000068  481e              LDR      r0,|L12.228|
00006a  1d00              ADDS     r0,r0,#4
00006c  f7fffffe          BL       strcpy
;;;696    				g_tSF.TotalSize = 2 * 1024 * 1024;	/* 总容量 = 2M */
000070  f44f1000          MOV      r0,#0x200000
000074  491b              LDR      r1,|L12.228|
000076  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;697    				g_tSF.PageSize = 4 * 1024;			/* 页面大小 = 4K */
000078  1240              ASRS     r0,r0,#9
00007a  8308              STRH     r0,[r1,#0x18]
;;;698    				break;
00007c  e02f              B        |L12.222|
                  |L12.126|
;;;699    			
;;;700    			case W25Q64_ID:
;;;701    				strcpy(g_tSF.ChipName, "W25Q64");
00007e  a126              ADR      r1,|L12.280|
000080  4818              LDR      r0,|L12.228|
000082  1d00              ADDS     r0,r0,#4
000084  f7fffffe          BL       strcpy
;;;702    				g_tSF.TotalSize = 8 * 1024 * 1024;	/* 总容量 = 8M */
000088  f44f0000          MOV      r0,#0x800000
00008c  4915              LDR      r1,|L12.228|
00008e  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;703    				g_tSF.PageSize = 4 * 1024;			/* 页面大小 = 4K */
000090  12c0              ASRS     r0,r0,#11
000092  8308              STRH     r0,[r1,#0x18]
;;;704    				break;
000094  e023              B        |L12.222|
                  |L12.150|
;;;705    			
;;;706    			case W25Q16BV_ID:
;;;707    				strcpy(g_tSF.ChipName, "W25Q16BV");
000096  a122              ADR      r1,|L12.288|
000098  4812              LDR      r0,|L12.228|
00009a  1d00              ADDS     r0,r0,#4
00009c  f7fffffe          BL       strcpy
;;;708    				g_tSF.TotalSize = 2 * 1024 * 1024;	/* 总容量 = 2M */
0000a0  f44f1000          MOV      r0,#0x200000
0000a4  490f              LDR      r1,|L12.228|
0000a6  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;709    				g_tSF.PageSize = 4 * 1024;			    /* 页面大小 = 4K */
0000a8  1240              ASRS     r0,r0,#9
0000aa  8308              STRH     r0,[r1,#0x18]
;;;710    				break;
0000ac  e017              B        |L12.222|
                  |L12.174|
;;;711    			
;;;712    			case W25Q128_ID:
;;;713    				strcpy(g_tSF.ChipName, "W25Q128");
0000ae  a11f              ADR      r1,|L12.300|
0000b0  480c              LDR      r0,|L12.228|
0000b2  1d00              ADDS     r0,r0,#4
0000b4  f7fffffe          BL       strcpy
;;;714    				g_tSF.TotalSize = 16 * 1024 * 1024;	/* 总容量 = 16M */
0000b8  f04f7080          MOV      r0,#0x1000000
0000bc  4909              LDR      r1,|L12.228|
0000be  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;715    				g_tSF.PageSize = 4 * 1024;			/* 页面大小 = 4K */
0000c0  1300              ASRS     r0,r0,#12
0000c2  8308              STRH     r0,[r1,#0x18]
;;;716    				break;			
0000c4  e00b              B        |L12.222|
                  |L12.198|
;;;717    
;;;718    			default:
;;;719    				strcpy(g_tSF.ChipName, "Unknow Flash");
0000c6  a11b              ADR      r1,|L12.308|
0000c8  4806              LDR      r0,|L12.228|
0000ca  1d00              ADDS     r0,r0,#4
0000cc  f7fffffe          BL       strcpy
;;;720    				g_tSF.TotalSize = 2 * 1024 * 1024;
0000d0  f44f1000          MOV      r0,#0x200000
0000d4  4903              LDR      r1,|L12.228|
0000d6  6148              STR      r0,[r1,#0x14]  ; g_tSF
;;;721    				g_tSF.PageSize = 4 * 1024;
0000d8  1240              ASRS     r0,r0,#9
0000da  8308              STRH     r0,[r1,#0x18]
;;;722    				break;
0000dc  bf00              NOP      
                  |L12.222|
0000de  bf00              NOP                            ;686
;;;723    		}
;;;724    	}
;;;725    }
0000e0  bd10              POP      {r4,pc}
;;;726    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L12.228|
                          DCD      g_tSF
                  |L12.232|
                          DCD      0x00ef4015
                  |L12.236|
                          DCD      0xff40dabf
                  |L12.240|
                          DCD      0xfffd052c
                  |L12.244|
0000f4  53535432          DCB      "SST25VF016B",0
0000f8  35564630
0000fc  31364200
                  |L12.256|
000100  4d583235          DCB      "MX25L1606E",0
000104  4c313630
000108  364500  
00010b  00                DCB      0
                  |L12.268|
00010c  42483235          DCB      "BH25Q16CS1G",0
000110  51313643
000114  53314700
                  |L12.280|
000118  57323551          DCB      "W25Q64",0
00011c  363400  
00011f  00                DCB      0
                  |L12.288|
000120  57323551          DCB      "W25Q16BV",0
000124  31364256
000128  00      
000129  00                DCB      0
00012a  00                DCB      0
00012b  00                DCB      0
                  |L12.300|
00012c  57323551          DCB      "W25Q128",0
000130  31323800
                  |L12.308|
000134  556e6b6e          DCB      "Unknow Flash",0
000138  6f772046
00013c  6c617368
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0

                          AREA ||i.sf_SetCS||, CODE, READONLY, ALIGN=2

                  sf_SetCS PROC
;;;124    */
;;;125    static void sf_SetCS(uint8_t _level)
000000  b510              PUSH     {r4,lr}
;;;126    {
000002  4604              MOV      r4,r0
;;;127    	if (_level == 0)
000004  b94c              CBNZ     r4,|L13.26|
;;;128    	{
;;;129    		bsp_SpiBusEnter();	/* 占用SPI总线， 用于总线共享 */
000006  f7fffffe          BL       bsp_SpiBusEnter
;;;130    
;;;131    		#ifdef SOFT_SPI		/* 软件SPI */
;;;132    			bsp_SetSpiSck(1);
;;;133    			SF_CS_0();
;;;134    		#endif
;;;135    
;;;136    		#ifdef HARD_SPI		/* 硬件SPI */
;;;137    
;;;138    			bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
00000a  f2403017          MOV      r0,#0x317
00000e  f7fffffe          BL       bsp_SPI_Init
;;;139    				| SPI_CPOL_High | SPI_CPHA_2Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_8 | SPI_FirstBit_MSB);
;;;140    
;;;141    			SF_CS_0();
000012  2010              MOVS     r0,#0x10
000014  4904              LDR      r1,|L13.40|
000016  6008              STR      r0,[r1,#0]
000018  e005              B        |L13.38|
                  |L13.26|
;;;142    		#endif
;;;143    	}
;;;144    	else
;;;145    	{
;;;146    		SF_CS_1();
00001a  2010              MOVS     r0,#0x10
00001c  4902              LDR      r1,|L13.40|
00001e  1f09              SUBS     r1,r1,#4
000020  6008              STR      r0,[r1,#0]
;;;147    
;;;148    		bsp_SpiBusExit();	/* 释放SPI总线， 用于总线共享 */
000022  f7fffffe          BL       bsp_SpiBusExit
                  |L13.38|
;;;149    	}
;;;150    }
000026  bd10              POP      {r4,pc}
;;;151    
                          ENDP

                  |L13.40|
                          DCD      0x40010814

                          AREA ||i.sf_WaitForWriteEnd||, CODE, READONLY, ALIGN=1

                  sf_WaitForWriteEnd PROC
;;;782    */
;;;783    static void sf_WaitForWriteEnd(void)
000000  b510              PUSH     {r4,lr}
;;;784    {
;;;785    	sf_SetCS(0);									/* 使能片选 */
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       sf_SetCS
;;;786    	bsp_spiWrite1(CMD_RDSR);							/* 发送命令， 读状态寄存器 */
000008  2005              MOVS     r0,#5
00000a  f7fffffe          BL       bsp_spiWrite1
;;;787    	while((bsp_spiRead1() & WIP_FLAG) == SET);	/* 判断状态寄存器的忙标志位 */
00000e  bf00              NOP      
                  |L14.16|
000010  f7fffffe          BL       bsp_spiRead1
000014  f0100f01          TST      r0,#1
000018  d1fa              BNE      |L14.16|
;;;788    	sf_SetCS(1);									/* 禁能片选 */
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       sf_SetCS
;;;789    }
000020  bd10              POP      {r4,pc}
;;;790    
                          ENDP


                          AREA ||i.sf_WriteBuffer||, CODE, READONLY, ALIGN=2

                  sf_WriteBuffer PROC
;;;540    */
;;;541    uint8_t sf_WriteBuffer(uint8_t* _pBuf, uint32_t _uiWriteAddr, uint16_t _usWriteSize)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;542    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;543    	uint16_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
00000a  f04f0800          MOV      r8,#0
00000e  46c1              MOV      r9,r8
000010  46c2              MOV      r10,r8
000012  2400              MOVS     r4,#0
000014  46a3              MOV      r11,r4
;;;544    
;;;545    	Addr = _uiWriteAddr % g_tSF.PageSize;
000016  4856              LDR      r0,|L15.368|
000018  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
00001a  fbb5f1f0          UDIV     r1,r5,r0
00001e  fb005011          MLS      r0,r0,r1,r5
000022  fa1ffa80          UXTH     r10,r0
;;;546    	count = g_tSF.PageSize - Addr;
000026  4852              LDR      r0,|L15.368|
000028  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
00002a  eba0000a          SUB      r0,r0,r10
00002e  b284              UXTH     r4,r0
;;;547    	NumOfPage =  _usWriteSize / g_tSF.PageSize;
000030  484f              LDR      r0,|L15.368|
000032  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
000034  fb96f0f0          SDIV     r0,r6,r0
000038  fa1ff880          UXTH     r8,r0
;;;548    	NumOfSingle = _usWriteSize % g_tSF.PageSize;
00003c  484c              LDR      r0,|L15.368|
00003e  8b00              LDRH     r0,[r0,#0x18]  ; g_tSF
000040  fb96f1f0          SDIV     r1,r6,r0
000044  fb006011          MLS      r0,r0,r1,r6
000048  fa1ff980          UXTH     r9,r0
;;;549    
;;;550    	if (Addr == 0) /* 起始地址是页面首地址  */
00004c  f1ba0f00          CMP      r10,#0
000050  d12a              BNE      |L15.168|
;;;551    	{
;;;552    		if (NumOfPage == 0) /* 数据长度小于页面大小 */
000052  f1b80f00          CMP      r8,#0
000056  d108              BNE      |L15.106|
;;;553    		{
;;;554    			if (sf_AutoWritePage(_pBuf, _uiWriteAddr, _usWriteSize) == 0)
000058  4632              MOV      r2,r6
00005a  4629              MOV      r1,r5
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       sf_AutoWritePage
000062  2800              CMP      r0,#0
000064  d17e              BNE      |L15.356|
                  |L15.102|
;;;555    			{
;;;556    				return 0;
;;;557    			}
;;;558    		}
;;;559    		else 	/* 数据长度大于等于页面大小 */
;;;560    		{
;;;561    			while (NumOfPage--)
;;;562    			{
;;;563    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, g_tSF.PageSize) == 0)
;;;564    				{
;;;565    					return 0;
;;;566    				}
;;;567    				_uiWriteAddr +=  g_tSF.PageSize;
;;;568    				_pBuf += g_tSF.PageSize;
;;;569    			}
;;;570    			if (sf_AutoWritePage(_pBuf, _uiWriteAddr, NumOfSingle) == 0)
;;;571    			{
;;;572    				return 0;
;;;573    			}
;;;574    		}
;;;575    	}
;;;576    	else  /* 起始地址不是页面首地址  */
;;;577    	{
;;;578    		if (NumOfPage == 0) /* 数据长度小于页面大小 */
;;;579    		{
;;;580    			if (NumOfSingle > count) /* (_usWriteSize + _uiWriteAddr) > SPI_FLASH_PAGESIZE */
;;;581    			{
;;;582    				temp = NumOfSingle - count;
;;;583    
;;;584    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, count) == 0)
;;;585    				{
;;;586    					return 0;
;;;587    				}
;;;588    
;;;589    				_uiWriteAddr +=  count;
;;;590    				_pBuf += count;
;;;591    
;;;592    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, temp) == 0)
;;;593    				{
;;;594    					return 0;
;;;595    				}
;;;596    			}
;;;597    			else
;;;598    			{
;;;599    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, _usWriteSize) == 0)
;;;600    				{
;;;601    					return 0;
;;;602    				}
;;;603    			}
;;;604    		}
;;;605    		else	/* 数据长度大于等于页面大小 */
;;;606    		{
;;;607    			_usWriteSize -= count;
;;;608    			NumOfPage =  _usWriteSize / g_tSF.PageSize;
;;;609    			NumOfSingle = _usWriteSize % g_tSF.PageSize;
;;;610    
;;;611    			if (sf_AutoWritePage(_pBuf, _uiWriteAddr, count) == 0)
;;;612    			{
;;;613    				return 0;
;;;614    			}
;;;615    
;;;616    			_uiWriteAddr +=  count;
;;;617    			_pBuf += count;
;;;618    
;;;619    			while (NumOfPage--)
;;;620    			{
;;;621    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, g_tSF.PageSize) == 0)
;;;622    				{
;;;623    					return 0;
;;;624    				}
;;;625    				_uiWriteAddr +=  g_tSF.PageSize;
;;;626    				_pBuf += g_tSF.PageSize;
;;;627    			}
;;;628    
;;;629    			if (NumOfSingle != 0)
;;;630    			{
;;;631    				if (sf_AutoWritePage(_pBuf, _uiWriteAddr, NumOfSingle) == 0)
;;;632    				{
;;;633    					return 0;
;;;634    				}
;;;635    			}
;;;636    		}
;;;637    	}
;;;638    	return 1;	/* 成功 */
;;;639    }
000066  e8bd9ff0          POP      {r4-r12,pc}
                  |L15.106|
00006a  e00e              B        |L15.138|
                  |L15.108|
00006c  4840              LDR      r0,|L15.368|
00006e  8b02              LDRH     r2,[r0,#0x18]         ;563  ; g_tSF
000070  4629              MOV      r1,r5                 ;563
000072  4638              MOV      r0,r7                 ;563
000074  f7fffffe          BL       sf_AutoWritePage
000078  b908              CBNZ     r0,|L15.126|
00007a  2000              MOVS     r0,#0                 ;565
00007c  e7f3              B        |L15.102|
                  |L15.126|
00007e  483c              LDR      r0,|L15.368|
000080  8b00              LDRH     r0,[r0,#0x18]         ;567  ; g_tSF
000082  4405              ADD      r5,r5,r0              ;567
000084  483a              LDR      r0,|L15.368|
000086  8b00              LDRH     r0,[r0,#0x18]         ;568  ; g_tSF
000088  4407              ADD      r7,r7,r0              ;568
                  |L15.138|
00008a  ea5f0008          MOVS     r0,r8                 ;561
00008e  f1a80101          SUB      r1,r8,#1              ;561
000092  fa1ff881          UXTH     r8,r1                 ;561
000096  d1e9              BNE      |L15.108|
000098  464a              MOV      r2,r9                 ;570
00009a  4629              MOV      r1,r5                 ;570
00009c  4638              MOV      r0,r7                 ;570
00009e  f7fffffe          BL       sf_AutoWritePage
0000a2  2800              CMP      r0,#0                 ;570
0000a4  d161              BNE      |L15.362|
0000a6  e7de              B        |L15.102|
                  |L15.168|
0000a8  f1b80f00          CMP      r8,#0                 ;578
0000ac  d11f              BNE      |L15.238|
0000ae  45a1              CMP      r9,r4                 ;580
0000b0  dd15              BLE      |L15.222|
0000b2  eba90004          SUB      r0,r9,r4              ;582
0000b6  fa1ffb80          UXTH     r11,r0                ;582
0000ba  4622              MOV      r2,r4                 ;584
0000bc  4629              MOV      r1,r5                 ;584
0000be  4638              MOV      r0,r7                 ;584
0000c0  f7fffffe          BL       sf_AutoWritePage
0000c4  b908              CBNZ     r0,|L15.202|
0000c6  2000              MOVS     r0,#0                 ;586
0000c8  e7cd              B        |L15.102|
                  |L15.202|
0000ca  4425              ADD      r5,r5,r4              ;589
0000cc  4427              ADD      r7,r7,r4              ;590
0000ce  465a              MOV      r2,r11                ;592
0000d0  4629              MOV      r1,r5                 ;592
0000d2  4638              MOV      r0,r7                 ;592
0000d4  f7fffffe          BL       sf_AutoWritePage
0000d8  2800              CMP      r0,#0                 ;592
0000da  d146              BNE      |L15.362|
0000dc  e7c3              B        |L15.102|
                  |L15.222|
0000de  4632              MOV      r2,r6                 ;599
0000e0  4629              MOV      r1,r5                 ;599
0000e2  4638              MOV      r0,r7                 ;599
0000e4  f7fffffe          BL       sf_AutoWritePage
0000e8  bbe0              CBNZ     r0,|L15.356|
0000ea  2000              MOVS     r0,#0                 ;601
0000ec  e7bb              B        |L15.102|
                  |L15.238|
0000ee  1b30              SUBS     r0,r6,r4              ;607
0000f0  b286              UXTH     r6,r0                 ;607
0000f2  481f              LDR      r0,|L15.368|
0000f4  8b00              LDRH     r0,[r0,#0x18]         ;608  ; g_tSF
0000f6  fb96f0f0          SDIV     r0,r6,r0              ;608
0000fa  fa1ff880          UXTH     r8,r0                 ;608
0000fe  481c              LDR      r0,|L15.368|
000100  8b00              LDRH     r0,[r0,#0x18]         ;609  ; g_tSF
000102  fb96f1f0          SDIV     r1,r6,r0              ;609
000106  fb006011          MLS      r0,r0,r1,r6           ;609
00010a  fa1ff980          UXTH     r9,r0                 ;609
00010e  4622              MOV      r2,r4                 ;611
000110  4629              MOV      r1,r5                 ;611
000112  4638              MOV      r0,r7                 ;611
000114  f7fffffe          BL       sf_AutoWritePage
000118  b908              CBNZ     r0,|L15.286|
00011a  2000              MOVS     r0,#0                 ;613
00011c  e7a3              B        |L15.102|
                  |L15.286|
00011e  4425              ADD      r5,r5,r4              ;616
000120  4427              ADD      r7,r7,r4              ;617
000122  e00e              B        |L15.322|
                  |L15.292|
000124  4812              LDR      r0,|L15.368|
000126  8b02              LDRH     r2,[r0,#0x18]         ;621  ; g_tSF
000128  4629              MOV      r1,r5                 ;621
00012a  4638              MOV      r0,r7                 ;621
00012c  f7fffffe          BL       sf_AutoWritePage
000130  b908              CBNZ     r0,|L15.310|
000132  2000              MOVS     r0,#0                 ;623
000134  e797              B        |L15.102|
                  |L15.310|
000136  480e              LDR      r0,|L15.368|
000138  8b00              LDRH     r0,[r0,#0x18]         ;625  ; g_tSF
00013a  4405              ADD      r5,r5,r0              ;625
00013c  480c              LDR      r0,|L15.368|
00013e  8b00              LDRH     r0,[r0,#0x18]         ;626  ; g_tSF
000140  4407              ADD      r7,r7,r0              ;626
                  |L15.322|
000142  ea5f0008          MOVS     r0,r8                 ;619
000146  f1a80101          SUB      r1,r8,#1              ;619
00014a  fa1ff881          UXTH     r8,r1                 ;619
00014e  d1e9              BNE      |L15.292|
000150  f1b90f00          CMP      r9,#0                 ;629
000154  d009              BEQ      |L15.362|
000156  464a              MOV      r2,r9                 ;631
000158  4629              MOV      r1,r5                 ;631
00015a  4638              MOV      r0,r7                 ;631
00015c  f7fffffe          BL       sf_AutoWritePage
000160  b900              CBNZ     r0,|L15.356|
000162  e000              B        |L15.358|
                  |L15.356|
000164  e001              B        |L15.362|
                  |L15.358|
000166  2000              MOVS     r0,#0                 ;633
000168  e77d              B        |L15.102|
                  |L15.362|
00016a  2001              MOVS     r0,#1                 ;638
00016c  e77b              B        |L15.102|
;;;640    
                          ENDP

00016e  0000              DCW      0x0000
                  |L15.368|
                          DCD      g_tSF

                          AREA ||i.sf_WriteEnable||, CODE, READONLY, ALIGN=1

                  sf_WriteEnable PROC
;;;734    */
;;;735    static void sf_WriteEnable(void)
000000  b510              PUSH     {r4,lr}
;;;736    {
;;;737    	sf_SetCS(0);									/* 使能片选 */
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       sf_SetCS
;;;738    	bsp_spiWrite1(CMD_WREN);								/* 发送命令 */
000008  2006              MOVS     r0,#6
00000a  f7fffffe          BL       bsp_spiWrite1
;;;739    	sf_SetCS(1);									/* 禁能片选 */
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       sf_SetCS
;;;740    }
000014  bd10              POP      {r4,pc}
;;;741    
                          ENDP


                          AREA ||i.sf_WriteStatus||, CODE, READONLY, ALIGN=2

                  sf_WriteStatus PROC
;;;749    */
;;;750    static void sf_WriteStatus(uint8_t _ucValue)
000000  b510              PUSH     {r4,lr}
;;;751    {
000002  4604              MOV      r4,r0
;;;752    
;;;753    	if (g_tSF.ChipID == SST25VF016B_ID)
000004  4813              LDR      r0,|L17.84|
000006  6800              LDR      r0,[r0,#0]  ; g_tSF
000008  4913              LDR      r1,|L17.88|
00000a  4288              CMP      r0,r1
00000c  d115              BNE      |L17.58|
;;;754    	{
;;;755    		/* 第1步：先使能写状态寄存器 */
;;;756    		sf_SetCS(0);									/* 使能片选 */
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       sf_SetCS
;;;757    		bsp_spiWrite1(CMD_EWRSR);							/* 发送命令， 允许写状态寄存器 */
000014  2050              MOVS     r0,#0x50
000016  f7fffffe          BL       bsp_spiWrite1
;;;758    		sf_SetCS(1);									/* 禁能片选 */
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       sf_SetCS
;;;759    
;;;760    		/* 第2步：再写状态寄存器 */
;;;761    		sf_SetCS(0);									/* 使能片选 */
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       sf_SetCS
;;;762    		bsp_spiWrite1(CMD_WRSR);							/* 发送命令， 写状态寄存器 */
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       bsp_spiWrite1
;;;763    		bsp_spiWrite1(_ucValue);							/* 发送数据：状态寄存器的值 */
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       bsp_spiWrite1
;;;764    		sf_SetCS(1);									/* 禁能片选 */
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       sf_SetCS
000038  e00b              B        |L17.82|
                  |L17.58|
;;;765    	}
;;;766    	else
;;;767    	{
;;;768    		sf_SetCS(0);									/* 使能片选 */
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       sf_SetCS
;;;769    		bsp_spiWrite1(CMD_WRSR);							/* 发送命令， 写状态寄存器 */
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       bsp_spiWrite1
;;;770    		bsp_spiWrite1(_ucValue);							/* 发送数据：状态寄存器的值 */
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       bsp_spiWrite1
;;;771    		sf_SetCS(1);									/* 禁能片选 */
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       sf_SetCS
                  |L17.82|
;;;772    	}
;;;773    }
000052  bd10              POP      {r4,pc}
;;;774    
                          ENDP

                  |L17.84|
                          DCD      g_tSF
                  |L17.88|
                          DCD      0x00bf2541

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tSF
                          %        28
                  s_spiBuf
                          %        4096

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_spi_flash.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_bsp_spi_flash_c_69e7dfca____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_spi_flash_c_69e7dfca____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_bsp_spi_flash_c_69e7dfca____REVSH|
#line 128
|__asm___15_bsp_spi_flash_c_69e7dfca____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
